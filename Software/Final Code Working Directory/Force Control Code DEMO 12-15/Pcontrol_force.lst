;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/15/2016 8:46:56 AM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2001  	537001980
0x0004	0x26B90000  	9913
0x0008	0x29490000  	10569
0x000C	0x29490000  	10569
0x0010	0x29490000  	10569
0x0014	0x29490000  	10569
0x0018	0x29490000  	10569
0x001C	0x29490000  	10569
0x0020	0x29490000  	10569
0x0024	0x29490000  	10569
0x0028	0x29490000  	10569
0x002C	0x29490000  	10569
0x0030	0x29490000  	10569
0x0034	0x29490000  	10569
0x0038	0x29490000  	10569
0x003C	0x29490000  	10569
0x0040	0x29490000  	10569
0x0044	0x29490000  	10569
0x0048	0x29490000  	10569
0x004C	0x29490000  	10569
0x0050	0x29490000  	10569
0x0054	0x29490000  	10569
0x0058	0x29490000  	10569
0x005C	0x29490000  	10569
0x0060	0x29490000  	10569
0x0064	0x20090000  	8201
0x0068	0x29490000  	10569
0x006C	0x29490000  	10569
0x0070	0x29490000  	10569
0x0074	0x29490000  	10569
0x0078	0x29490000  	10569
0x007C	0x29490000  	10569
0x0080	0x29490000  	10569
0x0084	0x29490000  	10569
0x0088	0x29490000  	10569
0x008C	0x29490000  	10569
0x0090	0x29490000  	10569
0x0094	0x29490000  	10569
0x0098	0x29490000  	10569
0x009C	0x29490000  	10569
0x00A0	0x29490000  	10569
0x00A4	0x20B50000  	8373
0x00A8	0x21450000  	8517
0x00AC	0x29490000  	10569
0x00B0	0x22E10000  	8929
0x00B4	0x21690000  	8553
0x00B8	0x29490000  	10569
0x00BC	0x29490000  	10569
0x00C0	0x29490000  	10569
0x00C4	0x29490000  	10569
0x00C8	0x29490000  	10569
0x00CC	0x29490000  	10569
0x00D0	0x29490000  	10569
0x00D4	0x29490000  	10569
0x00D8	0x29490000  	10569
0x00DC	0x29490000  	10569
0x00E0	0x29490000  	10569
0x00E4	0x29490000  	10569
0x00E8	0x29490000  	10569
0x00EC	0x29490000  	10569
0x00F0	0x29490000  	10569
0x00F4	0x29490000  	10569
0x00F8	0x29490000  	10569
0x00FC	0x29490000  	10569
0x0100	0x29490000  	10569
0x0104	0x29490000  	10569
0x0108	0x29490000  	10569
0x010C	0x29490000  	10569
0x0110	0x29490000  	10569
0x0114	0x29490000  	10569
0x0118	0x29490000  	10569
0x011C	0x29490000  	10569
0x0120	0x29490000  	10569
0x0124	0x29490000  	10569
0x0128	0x29490000  	10569
0x012C	0x29490000  	10569
0x0130	0x29490000  	10569
0x0134	0x29490000  	10569
0x0138	0x29490000  	10569
0x013C	0x29490000  	10569
0x0140	0x29490000  	10569
0x0144	0x29490000  	10569
0x0148	0x29490000  	10569
0x014C	0x29490000  	10569
0x0150	0x29490000  	10569
0x0154	0x29490000  	10569
0x0158	0x29490000  	10569
0x015C	0x29490000  	10569
0x0160	0x29490000  	10569
0x0164	0x29490000  	10569
0x0168	0x29490000  	10569
0x016C	0x29490000  	10569
0x0170	0x29490000  	10569
0x0174	0x29490000  	10569
0x0178	0x29490000  	10569
0x017C	0x29490000  	10569
0x0180	0x29490000  	10569
0x0184	0x29490000  	10569
; end of ____SysVT
_main:
;Input Capture Complete 5ch.c, 145 :: 		void main() {
0x26B8	0xB081    SUB	SP, SP, #4
0x26BA	0xF7FFFE4D  BL	9048
0x26BE	0xF000F92D  BL	10524
0x26C2	0xF000FB1B  BL	11516
0x26C6	0xF000F917  BL	10488
0x26CA	0xF000FAAD  BL	11304
;Input Capture Complete 5ch.c, 148 :: 		init_UART();                                                            // Configure and Initialize UART serial communications
0x26CE	0xF7FEFFD3  BL	_init_UART+0
;Input Capture Complete 5ch.c, 149 :: 		init_GPIO();                                                            // Configure MCU I/O
0x26D2	0xF7FFF8CD  BL	_init_GPIO+0
;Input Capture Complete 5ch.c, 150 :: 		init_pointer_PWM(0);                                                    // Set up PWM with 0% duty cycle
0x26D6	0x2000    MOVS	R0, #0
0x26D8	0xF7FFFB0C  BL	_init_pointer_PWM+0
;Input Capture Complete 5ch.c, 164 :: 		InitTimer10();                  // Timer3 init
0x26DC	0xF7FFF958  BL	_InitTimer10+0
;Input Capture Complete 5ch.c, 168 :: 		strcpy(fngr_pointer.name, "fngr_pointer");
0x26E0	0x4868    LDR	R0, [PC, #416]
0x26E2	0x4601    MOV	R1, R0
0x26E4	0x4868    LDR	R0, [PC, #416]
0x26E6	0xF7FFF9E9  BL	_strcpy+0
;Input Capture Complete 5ch.c, 169 :: 		strcpy(fngr_middle.name, "fngr_middle");
0x26EA	0x4868    LDR	R0, [PC, #416]
0x26EC	0x4601    MOV	R1, R0
0x26EE	0x4868    LDR	R0, [PC, #416]
0x26F0	0xF7FFF9E4  BL	_strcpy+0
;Input Capture Complete 5ch.c, 170 :: 		strcpy(fngr_ring.name, "fngr_ring");
0x26F4	0x4867    LDR	R0, [PC, #412]
0x26F6	0x4601    MOV	R1, R0
0x26F8	0x4867    LDR	R0, [PC, #412]
0x26FA	0xF7FFF9DF  BL	_strcpy+0
;Input Capture Complete 5ch.c, 171 :: 		strcpy(fngr_pinky.name, "fngr_pinky");
0x26FE	0x4867    LDR	R0, [PC, #412]
0x2700	0x4601    MOV	R1, R0
0x2702	0x4867    LDR	R0, [PC, #412]
0x2704	0xF7FFF9DA  BL	_strcpy+0
;Input Capture Complete 5ch.c, 172 :: 		strcpy(fngr_thumb.name, "fngr_thumb");
0x2708	0x4866    LDR	R0, [PC, #408]
0x270A	0x4601    MOV	R1, R0
0x270C	0x4866    LDR	R0, [PC, #408]
0x270E	0xF7FFF9D5  BL	_strcpy+0
;Input Capture Complete 5ch.c, 175 :: 		init_finger(&fngr_pointer);
0x2712	0x485D    LDR	R0, [PC, #372]
0x2714	0xF7FFF964  BL	_init_finger+0
;Input Capture Complete 5ch.c, 176 :: 		init_finger(&fngr_middle);
0x2718	0x485D    LDR	R0, [PC, #372]
0x271A	0xF7FFF961  BL	_init_finger+0
;Input Capture Complete 5ch.c, 177 :: 		init_finger(&fngr_ring);
0x271E	0x485E    LDR	R0, [PC, #376]
0x2720	0xF7FFF95E  BL	_init_finger+0
;Input Capture Complete 5ch.c, 178 :: 		init_finger(&fngr_pinky);
0x2724	0x485E    LDR	R0, [PC, #376]
0x2726	0xF7FFF95B  BL	_init_finger+0
;Input Capture Complete 5ch.c, 179 :: 		init_finger(&fngr_thumb);
0x272A	0x485F    LDR	R0, [PC, #380]
0x272C	0xF7FFF958  BL	_init_finger+0
;Input Capture Complete 5ch.c, 182 :: 		ADC1_init();
0x2730	0xF7FFF914  BL	_ADC1_Init+0
;Input Capture Complete 5ch.c, 185 :: 		UART1_Write_Text("\n\n\rProgram Has Started!\n\r");
0x2734	0x485D    LDR	R0, [PC, #372]
0x2736	0xF7FFF9D5  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 186 :: 		delay_ms(500);
0x273A	0xF64367FE  MOVW	R7, #16126
0x273E	0xF2C017AB  MOVT	R7, #427
L_main0:
0x2742	0x1E7F    SUBS	R7, R7, #1
0x2744	0xD1FD    BNE	L_main0
0x2746	0xBF00    NOP
0x2748	0xBF00    NOP
0x274A	0xBF00    NOP
0x274C	0xBF00    NOP
0x274E	0xBF00    NOP
;Input Capture Complete 5ch.c, 189 :: 		init_timer11();                                                         // Initialize timer 11, used for sampling
0x2750	0xF7FFFAF4  BL	_init_timer11+0
;Input Capture Complete 5ch.c, 190 :: 		init_input_capture();                                                   // Initialize input capture channels
0x2754	0xF7FFFB22  BL	_init_input_capture+0
;Input Capture Complete 5ch.c, 192 :: 		setP = SP_LOW;                                                          // Medium touch to begin
0x2758	0x4855    LDR	R0, [PC, #340]
0x275A	0xF9B01000  LDRSH	R1, [R0, #0]
0x275E	0x4855    LDR	R0, [PC, #340]
0x2760	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 193 :: 		change_SP_flag = 1;                                                     // Light touch next time
0x2762	0x2101    MOVS	R1, #1
0x2764	0xB209    SXTH	R1, R1
0x2766	0x4854    LDR	R0, [PC, #336]
0x2768	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 195 :: 		LOW_BATTERY_LED = 0;
0x276A	0x2100    MOVS	R1, #0
0x276C	0xB249    SXTB	R1, R1
0x276E	0x4853    LDR	R0, [PC, #332]
0x2770	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 198 :: 		while(1) {
L_main2:
;Input Capture Complete 5ch.c, 201 :: 		if(analogGo && !doShutdown)         // if the system is running and still needs to go through the shutoff procedure
0x2772	0x4853    LDR	R0, [PC, #332]
0x2774	0xF9B00000  LDRSH	R0, [R0, #0]
0x2778	0x2800    CMP	R0, #0
0x277A	0xD038    BEQ	L__main63
0x277C	0x4851    LDR	R0, [PC, #324]
0x277E	0xF9B00000  LDRSH	R0, [R0, #0]
0x2782	0x2800    CMP	R0, #0
0x2784	0xD133    BNE	L__main62
L__main61:
;Input Capture Complete 5ch.c, 203 :: 		if (poll_flag) {                             // system is running and doesn't need to go through shutoff
0x2786	0x4850    LDR	R0, [PC, #320]
0x2788	0x8800    LDRH	R0, [R0, #0]
0x278A	0xB188    CBZ	R0, L_main7
;Input Capture Complete 5ch.c, 204 :: 		poll_flag = 0;                                                    // Clear flag
0x278C	0x2100    MOVS	R1, #0
0x278E	0x484E    LDR	R0, [PC, #312]
0x2790	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 205 :: 		sample_finger(&fngr_pointer);                                     // Call state calculation function for each finger - equivalent of sampling
0x2792	0x483D    LDR	R0, [PC, #244]
0x2794	0xF7FFF9B4  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 206 :: 		sample_finger(&fngr_middle);
0x2798	0x483D    LDR	R0, [PC, #244]
0x279A	0xF7FFF9B1  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 207 :: 		sample_finger(&fngr_ring);
0x279E	0x483E    LDR	R0, [PC, #248]
0x27A0	0xF7FFF9AE  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 208 :: 		sample_finger(&fngr_pinky);
0x27A4	0x483E    LDR	R0, [PC, #248]
0x27A6	0xF7FFF9AB  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 209 :: 		sample_finger(&fngr_thumb);
0x27AA	0x483F    LDR	R0, [PC, #252]
0x27AC	0xF7FFF9A8  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 210 :: 		}
L_main7:
;Input Capture Complete 5ch.c, 214 :: 		if(fngr_pointer.position_actual >= FULLY_CONTRACTED )
0x27B0	0x4846    LDR	R0, [PC, #280]
0x27B2	0x6801    LDR	R1, [R0, #0]
0x27B4	0x4846    LDR	R0, [PC, #280]
0x27B6	0x6800    LDR	R0, [R0, #0]
0x27B8	0x4288    CMP	R0, R1
0x27BA	0xD303    BCC	L_main8
;Input Capture Complete 5ch.c, 215 :: 		doShutdown = 1;
0x27BC	0x2101    MOVS	R1, #1
0x27BE	0xB209    SXTH	R1, R1
0x27C0	0x4840    LDR	R0, [PC, #256]
0x27C2	0x8001    STRH	R1, [R0, #0]
L_main8:
;Input Capture Complete 5ch.c, 217 :: 		MPV = fngr_pointer.tip_force;                                     // Store the sampled value locally
0x27C4	0x4A43    LDR	R2, [PC, #268]
0x27C6	0xF9B21000  LDRSH	R1, [R2, #0]
0x27CA	0x4843    LDR	R0, [PC, #268]
0x27CC	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 219 :: 		dutyCycle = Pcontrol_force(&fngr_pointer, setP, MPV);  // apply P control; input is finger, SP, MPV
0x27CE	0x4610    MOV	R0, R2
0x27D0	0x8801    LDRH	R1, [R0, #0]
0x27D2	0x4838    LDR	R0, [PC, #224]
0x27D4	0xF9B00000  LDRSH	R0, [R0, #0]
0x27D8	0xB28A    UXTH	R2, R1
0x27DA	0xB281    UXTH	R1, R0
0x27DC	0x482A    LDR	R0, [PC, #168]
0x27DE	0xF7FFF803  BL	_Pcontrol_force+0
0x27E2	0x493E    LDR	R1, [PC, #248]
0x27E4	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 236 :: 		move_pointer_finger(&fngr_pointer, dutyCycle);                 // apply duty cycle
0x27E6	0xB281    UXTH	R1, R0
0x27E8	0x4827    LDR	R0, [PC, #156]
0x27EA	0xF7FEFF61  BL	_move_pointer_finger+0
;Input Capture Complete 5ch.c, 201 :: 		if(analogGo && !doShutdown)         // if the system is running and still needs to go through the shutoff procedure
L__main63:
L__main62:
;Input Capture Complete 5ch.c, 289 :: 		if (poll_flag && (terminal_print_count >= TERMINAL_PRINT_THRESH)) {  // Set number of polling events has occured => Print statistics to terminal
0x27EE	0x4836    LDR	R0, [PC, #216]
0x27F0	0x8800    LDRH	R0, [R0, #0]
0x27F2	0xB1B8    CBZ	R0, L__main65
0x27F4	0x483A    LDR	R0, [PC, #232]
0x27F6	0x8801    LDRH	R1, [R0, #0]
0x27F8	0x483A    LDR	R0, [PC, #232]
0x27FA	0x8800    LDRH	R0, [R0, #0]
0x27FC	0x4288    CMP	R0, R1
0x27FE	0xD311    BCC	L__main64
L__main60:
;Input Capture Complete 5ch.c, 291 :: 		print_finger_info(&fngr_pointer);                                 // Print statistics to terminal for each finger     - PUT BACK IN
0x2800	0x4821    LDR	R0, [PC, #132]
0x2802	0xF7FEFF6B  BL	_print_finger_info+0
;Input Capture Complete 5ch.c, 292 :: 		print_finger_info(&fngr_middle);
0x2806	0x4822    LDR	R0, [PC, #136]
0x2808	0xF7FEFF68  BL	_print_finger_info+0
;Input Capture Complete 5ch.c, 293 :: 		print_finger_info(&fngr_ring);
0x280C	0x4822    LDR	R0, [PC, #136]
0x280E	0xF7FEFF65  BL	_print_finger_info+0
;Input Capture Complete 5ch.c, 294 :: 		print_finger_info(&fngr_pinky);
0x2812	0x4823    LDR	R0, [PC, #140]
0x2814	0xF7FEFF62  BL	_print_finger_info+0
;Input Capture Complete 5ch.c, 295 :: 		print_finger_info(&fngr_thumb);
0x2818	0x4823    LDR	R0, [PC, #140]
0x281A	0xF7FEFF5F  BL	_print_finger_info+0
;Input Capture Complete 5ch.c, 296 :: 		UART1_Write_Text("\n\n\n\n\n\n\n\r");                             //PUT BACK IN
0x281E	0x4832    LDR	R0, [PC, #200]
0x2820	0xF7FFF960  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 289 :: 		if (poll_flag && (terminal_print_count >= TERMINAL_PRINT_THRESH)) {  // Set number of polling events has occured => Print statistics to terminal
L__main65:
L__main64:
;Input Capture Complete 5ch.c, 300 :: 		if (doShutdown) {
0x2824	0x4827    LDR	R0, [PC, #156]
0x2826	0xF9B00000  LDRSH	R0, [R0, #0]
0x282A	0x2800    CMP	R0, #0
0x282C	0xD027    BEQ	L_main12
;Input Capture Complete 5ch.c, 302 :: 		while(fngr_pointer.position_actual >= FULLY_EXTENDED) {		// Loop until finger is fully extended again
L_main13:
0x282E	0x482F    LDR	R0, [PC, #188]
0x2830	0x6801    LDR	R1, [R0, #0]
0x2832	0x4827    LDR	R0, [PC, #156]
0x2834	0x6800    LDR	R0, [R0, #0]
0x2836	0x4288    CMP	R0, R1
0x2838	0xDB0E    BLT	L_main14
;Input Capture Complete 5ch.c, 303 :: 		sample_finger(&fngr_pointer);
0x283A	0x4813    LDR	R0, [PC, #76]
0x283C	0xF7FFF960  BL	_sample_finger+0
;Input Capture Complete 5ch.c, 304 :: 		fngr_pointer.direction_desired = EXTEND;
0x2840	0x2101    MOVS	R1, #1
0x2842	0x482B    LDR	R0, [PC, #172]
0x2844	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 305 :: 		POINTER_DIRECTION = EXTEND;
0x2846	0x2101    MOVS	R1, #1
0x2848	0xB249    SXTB	R1, R1
0x284A	0x482A    LDR	R0, [PC, #168]
0x284C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 306 :: 		move_pointer_finger(&fngr_pointer, 100);                          // Run finger back
0x284E	0x2164    MOVS	R1, #100
0x2850	0x480D    LDR	R0, [PC, #52]
0x2852	0xF7FEFF2D  BL	_move_pointer_finger+0
;Input Capture Complete 5ch.c, 307 :: 		}
0x2856	0xE7EA    B	L_main13
L_main14:
;Input Capture Complete 5ch.c, 309 :: 		move_pointer_finger(&fngr_pointer, 0);                                // Stop the motor - wait for analogGo again
0x2858	0x2100    MOVS	R1, #0
0x285A	0x480B    LDR	R0, [PC, #44]
0x285C	0xF7FEFF28  BL	_move_pointer_finger+0
;Input Capture Complete 5ch.c, 310 :: 		analogGo = 0;				                                // Set the system to be inactive
0x2860	0x2100    MOVS	R1, #0
0x2862	0xB209    SXTH	R1, R1
0x2864	0x4816    LDR	R0, [PC, #88]
0x2866	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 311 :: 		doShutdown = 0;				                        // Disable shutdown flag since shutdown routine has been completed
0x2868	0x2100    MOVS	R1, #0
0x286A	0xB209    SXTH	R1, R1
0x286C	0x4815    LDR	R0, [PC, #84]
0x286E	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 312 :: 		LOW_BATTERY_LED = 0;		                                        // Turn off LED to indicate system is now inactive
0x2870	0x2100    MOVS	R1, #0
0x2872	0xB249    SXTB	R1, R1
0x2874	0x4811    LDR	R0, [PC, #68]
0x2876	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 313 :: 		fngr_pointer.position_actual = 2;
0x2878	0x2102    MOVS	R1, #2
0x287A	0x4815    LDR	R0, [PC, #84]
0x287C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 314 :: 		}
L_main12:
;Input Capture Complete 5ch.c, 318 :: 		}
0x287E	0xE778    B	L_main2
;Input Capture Complete 5ch.c, 319 :: 		} // Main ends here
L_end_main:
L__main_end_loop:
0x2880	0xE7FE    B	L__main_end_loop
0x2882	0xBF00    NOP
0x2884	0x017F2000  	?lstr1_Input_32Capture_32Complete_325ch+0
0x2888	0x02182000  	_fngr_pointer+0
0x288C	0x018C2000  	?lstr2_Input_32Capture_32Complete_325ch+0
0x2890	0x02682000  	_fngr_middle+0
0x2894	0x01982000  	?lstr3_Input_32Capture_32Complete_325ch+0
0x2898	0x02B82000  	_fngr_ring+0
0x289C	0x01A22000  	?lstr4_Input_32Capture_32Complete_325ch+0
0x28A0	0x03082000  	_fngr_pinky+0
0x28A4	0x01AD2000  	?lstr5_Input_32Capture_32Complete_325ch+0
0x28A8	0x03582000  	_fngr_thumb+0
0x28AC	0x01B82000  	?lstr6_Input_32Capture_32Complete_325ch+0
0x28B0	0x01D22000  	_SP_LOW+0
0x28B4	0x03A82000  	_setP+0
0x28B8	0x03AA2000  	_change_SP_flag+0
0x28BC	0x829C4240  	GPIOB_ODR+0
0x28C0	0x01D42000  	_analogGo+0
0x28C4	0x01D62000  	_doShutdown+0
0x28C8	0x03AC2000  	_poll_flag+0
0x28CC	0x01D82000  	_FULLY_CONTRACTED+0
0x28D0	0x022C2000  	_fngr_pointer+20
0x28D4	0x02642000  	_fngr_pointer+76
0x28D8	0x03AE2000  	_MPV+0
0x28DC	0x03B02000  	_dutyCycle+0
0x28E0	0x01DC2000  	_TERMINAL_PRINT_THRESH+0
0x28E4	0x020E2000  	_terminal_print_count+0
0x28E8	0x01DE2000  	?lstr7_Input_32Capture_32Complete_325ch+0
0x28EC	0x01E82000  	_FULLY_EXTENDED+0
0x28F0	0x02322000  	_fngr_pointer+26
0x28F4	0x02A84242  	GPIOE_ODR+0
; end of _main
___CC2DW:
;__Lib_System_4XX.c, 43 :: 		
0x1618	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 45 :: 		
L_loopDW:
;__Lib_System_4XX.c, 46 :: 		
0x161A	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_4XX.c, 47 :: 		
0x161E	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_4XX.c, 48 :: 		
0x1622	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_4XX.c, 49 :: 		
0x1626	0xD1F8    BNE	L_loopDW
;__Lib_System_4XX.c, 51 :: 		
L_end___CC2DW:
0x1628	0xB001    ADD	SP, SP, #4
0x162A	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_4XX.c, 85 :: 		
0x15DC	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 87 :: 		
0x15DE	0xF04F0900  MOV	R9, #0
;__Lib_System_4XX.c, 88 :: 		
0x15E2	0xF04F0C00  MOV	R12, #0
;__Lib_System_4XX.c, 89 :: 		
0x15E6	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_4XX.c, 90 :: 		
0x15EA	0xDC04    BGT	L_loopFZs
;__Lib_System_4XX.c, 91 :: 		
0x15EC	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_4XX.c, 92 :: 		
0x15F0	0xDB01    BLT	L_loopFZs
;__Lib_System_4XX.c, 93 :: 		
0x15F2	0x46D4    MOV	R12, R10
;__Lib_System_4XX.c, 94 :: 		
0x15F4	0x46EA    MOV	R10, SP
;__Lib_System_4XX.c, 95 :: 		
L_loopFZs:
;__Lib_System_4XX.c, 96 :: 		
0x15F6	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_4XX.c, 97 :: 		
0x15FA	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_4XX.c, 98 :: 		
0x15FE	0xD1FA    BNE	L_loopFZs
;__Lib_System_4XX.c, 99 :: 		
0x1600	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_4XX.c, 100 :: 		
0x1604	0xDD05    BLE	L_norep
;__Lib_System_4XX.c, 101 :: 		
0x1606	0x46E2    MOV	R10, R12
;__Lib_System_4XX.c, 102 :: 		
0x1608	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_4XX.c, 103 :: 		
0x160C	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_4XX.c, 104 :: 		
0x1610	0xE7F1    B	L_loopFZs
;__Lib_System_4XX.c, 105 :: 		
L_norep:
;__Lib_System_4XX.c, 107 :: 		
L_end___FillZeros:
0x1612	0xB001    ADD	SP, SP, #4
0x1614	0x4770    BX	LR
; end of ___FillZeros
_init_UART:
;Input Capture Complete 5ch.c, 532 :: 		void init_UART() {
0x1678	0xB081    SUB	SP, SP, #4
0x167A	0xF8CDE000  STR	LR, [SP, #0]
;Input Capture Complete 5ch.c, 534 :: 		UART1_Init(UART_BAUD_RATE);                                                 // Configure UART 1
0x167E	0xF44F30E1  MOV	R0, #115200
0x1682	0xF7FFFF11  BL	_UART1_Init+0
;Input Capture Complete 5ch.c, 535 :: 		Delay_ms(200);                                                              // Wait for UART to stabilize
0x1686	0xF24E57FE  MOVW	R7, #58878
0x168A	0xF2C007AA  MOVT	R7, #170
0x168E	0xBF00    NOP
0x1690	0xBF00    NOP
L_init_UART37:
0x1692	0x1E7F    SUBS	R7, R7, #1
0x1694	0xD1FD    BNE	L_init_UART37
0x1696	0xBF00    NOP
0x1698	0xBF00    NOP
0x169A	0xBF00    NOP
;Input Capture Complete 5ch.c, 536 :: 		UART_Write_Text("\rUART Init Complete\r\n");                                // *** DEBUG *** Print test statement to terminal
0x169C	0x4803    LDR	R0, [PC, #12]
0x169E	0xF7FFFF1D  BL	_UART_Write_Text+0
;Input Capture Complete 5ch.c, 537 :: 		}
L_end_init_UART:
0x16A2	0xF8DDE000  LDR	LR, [SP, #0]
0x16A6	0xB001    ADD	SP, SP, #4
0x16A8	0x4770    BX	LR
0x16AA	0xBF00    NOP
0x16AC	0x01692000  	?lstr14_Input_32Capture_32Complete_325ch+0
; end of _init_UART
_UART1_Init:
;__Lib_UART_123_45_6.c, 439 :: 		
; baud_rate start address is: 0 (R0)
0x14A8	0xB081    SUB	SP, SP, #4
0x14AA	0xF8CDE000  STR	LR, [SP, #0]
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 440 :: 		
0x14AE	0x4A09    LDR	R2, [PC, #36]
0x14B0	0xF2400100  MOVW	R1, #0
0x14B4	0xB404    PUSH	(R2)
0x14B6	0xB402    PUSH	(R1)
0x14B8	0xF2400300  MOVW	R3, #0
0x14BC	0xF2400200  MOVW	R2, #0
0x14C0	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x14C2	0x4805    LDR	R0, [PC, #20]
0x14C4	0xF7FFFAF6  BL	__Lib_UART_123_45_6_UARTx_Init_Advanced+0
0x14C8	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45_6.c, 441 :: 		
L_end_UART1_Init:
0x14CA	0xF8DDE000  LDR	LR, [SP, #0]
0x14CE	0xB001    ADD	SP, SP, #4
0x14D0	0x4770    BX	LR
0x14D2	0xBF00    NOP
0x14D4	0x2AF80000  	__GPIO_MODULE_USART1_PA9_10+0
0x14D8	0x10004001  	USART1_SR+0
; end of _UART1_Init
__Lib_UART_123_45_6_UARTx_Init_Advanced:
;__Lib_UART_123_45_6.c, 319 :: 		
; parity start address is: 12 (R3)
; baud_rate start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x0AB4	0xB08B    SUB	SP, SP, #44
0x0AB6	0xF8CDE000  STR	LR, [SP, #0]
0x0ABA	0xB29A    UXTH	R2, R3
; parity end address is: 12 (R3)
; baud_rate end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; baud_rate start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
0x0ABC	0xF8BD302C  LDRH	R3, [SP, #44]
; module start address is: 24 (R6)
0x0AC0	0x9E0C    LDR	R6, [SP, #48]
;__Lib_UART_123_45_6.c, 323 :: 		
0x0AC2	0xAC06    ADD	R4, SP, #24
0x0AC4	0xF8AD3004  STRH	R3, [SP, #4]
0x0AC8	0xF8AD2008  STRH	R2, [SP, #8]
0x0ACC	0x9103    STR	R1, [SP, #12]
0x0ACE	0x9004    STR	R0, [SP, #16]
0x0AD0	0x4620    MOV	R0, R4
0x0AD2	0xF7FFFDBD  BL	_RCC_GetClocksFrequency+0
0x0AD6	0x9804    LDR	R0, [SP, #16]
0x0AD8	0x9903    LDR	R1, [SP, #12]
0x0ADA	0xF8BD2008  LDRH	R2, [SP, #8]
0x0ADE	0xF8BD3004  LDRH	R3, [SP, #4]
;__Lib_UART_123_45_6.c, 325 :: 		
0x0AE2	0x4C71    LDR	R4, [PC, #452]
0x0AE4	0x42A0    CMP	R0, R4
0x0AE6	0xD112    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced15
;__Lib_UART_123_45_6.c, 326 :: 		
0x0AE8	0x2501    MOVS	R5, #1
0x0AEA	0xB26D    SXTB	R5, R5
0x0AEC	0x4C6F    LDR	R4, [PC, #444]
0x0AEE	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 327 :: 		
0x0AF0	0x4D6F    LDR	R5, [PC, #444]
0x0AF2	0x4C70    LDR	R4, [PC, #448]
0x0AF4	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 328 :: 		
0x0AF6	0x4D70    LDR	R5, [PC, #448]
0x0AF8	0x4C70    LDR	R4, [PC, #448]
0x0AFA	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 329 :: 		
0x0AFC	0x4D70    LDR	R5, [PC, #448]
0x0AFE	0x4C71    LDR	R4, [PC, #452]
0x0B00	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 330 :: 		
0x0B02	0x4D71    LDR	R5, [PC, #452]
0x0B04	0x4C71    LDR	R4, [PC, #452]
0x0B06	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 331 :: 		
0x0B08	0x9C09    LDR	R4, [SP, #36]
0x0B0A	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 332 :: 		
0x0B0C	0xE06C    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced16
L___Lib_UART_123_45_6_UARTx_Init_Advanced15:
;__Lib_UART_123_45_6.c, 333 :: 		
0x0B0E	0x4C70    LDR	R4, [PC, #448]
0x0B10	0x42A0    CMP	R0, R4
0x0B12	0xD112    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced17
;__Lib_UART_123_45_6.c, 334 :: 		
0x0B14	0x2501    MOVS	R5, #1
0x0B16	0xB26D    SXTB	R5, R5
0x0B18	0x4C6E    LDR	R4, [PC, #440]
0x0B1A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 335 :: 		
0x0B1C	0x4D6E    LDR	R5, [PC, #440]
0x0B1E	0x4C65    LDR	R4, [PC, #404]
0x0B20	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 336 :: 		
0x0B22	0x4D6E    LDR	R5, [PC, #440]
0x0B24	0x4C65    LDR	R4, [PC, #404]
0x0B26	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 337 :: 		
0x0B28	0x4D6D    LDR	R5, [PC, #436]
0x0B2A	0x4C66    LDR	R4, [PC, #408]
0x0B2C	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 338 :: 		
0x0B2E	0x4D6D    LDR	R5, [PC, #436]
0x0B30	0x4C66    LDR	R4, [PC, #408]
0x0B32	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 339 :: 		
0x0B34	0x9C08    LDR	R4, [SP, #32]
0x0B36	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 340 :: 		
0x0B38	0xE056    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced18
L___Lib_UART_123_45_6_UARTx_Init_Advanced17:
;__Lib_UART_123_45_6.c, 341 :: 		
0x0B3A	0x4C6B    LDR	R4, [PC, #428]
0x0B3C	0x42A0    CMP	R0, R4
0x0B3E	0xD112    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced19
;__Lib_UART_123_45_6.c, 342 :: 		
0x0B40	0x2501    MOVS	R5, #1
0x0B42	0xB26D    SXTB	R5, R5
0x0B44	0x4C69    LDR	R4, [PC, #420]
0x0B46	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 343 :: 		
0x0B48	0x4D69    LDR	R5, [PC, #420]
0x0B4A	0x4C5A    LDR	R4, [PC, #360]
0x0B4C	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 344 :: 		
0x0B4E	0x4D69    LDR	R5, [PC, #420]
0x0B50	0x4C5A    LDR	R4, [PC, #360]
0x0B52	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 345 :: 		
0x0B54	0x4D68    LDR	R5, [PC, #416]
0x0B56	0x4C5B    LDR	R4, [PC, #364]
0x0B58	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 346 :: 		
0x0B5A	0x4D68    LDR	R5, [PC, #416]
0x0B5C	0x4C5B    LDR	R4, [PC, #364]
0x0B5E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 347 :: 		
0x0B60	0x9C08    LDR	R4, [SP, #32]
0x0B62	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 348 :: 		
0x0B64	0xE040    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced20
L___Lib_UART_123_45_6_UARTx_Init_Advanced19:
;__Lib_UART_123_45_6.c, 349 :: 		
0x0B66	0x4C66    LDR	R4, [PC, #408]
0x0B68	0x42A0    CMP	R0, R4
0x0B6A	0xD112    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced21
;__Lib_UART_123_45_6.c, 350 :: 		
0x0B6C	0x2501    MOVS	R5, #1
0x0B6E	0xB26D    SXTB	R5, R5
0x0B70	0x4C64    LDR	R4, [PC, #400]
0x0B72	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 351 :: 		
0x0B74	0x4D64    LDR	R5, [PC, #400]
0x0B76	0x4C4F    LDR	R4, [PC, #316]
0x0B78	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 352 :: 		
0x0B7A	0x4D64    LDR	R5, [PC, #400]
0x0B7C	0x4C4F    LDR	R4, [PC, #316]
0x0B7E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 353 :: 		
0x0B80	0x4D63    LDR	R5, [PC, #396]
0x0B82	0x4C50    LDR	R4, [PC, #320]
0x0B84	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 354 :: 		
0x0B86	0x4D63    LDR	R5, [PC, #396]
0x0B88	0x4C50    LDR	R4, [PC, #320]
0x0B8A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 355 :: 		
0x0B8C	0x9C08    LDR	R4, [SP, #32]
0x0B8E	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 356 :: 		
0x0B90	0xE02A    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced22
L___Lib_UART_123_45_6_UARTx_Init_Advanced21:
;__Lib_UART_123_45_6.c, 357 :: 		
0x0B92	0x4C61    LDR	R4, [PC, #388]
0x0B94	0x42A0    CMP	R0, R4
0x0B96	0xD112    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced23
;__Lib_UART_123_45_6.c, 358 :: 		
0x0B98	0x2501    MOVS	R5, #1
0x0B9A	0xB26D    SXTB	R5, R5
0x0B9C	0x4C5F    LDR	R4, [PC, #380]
0x0B9E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 359 :: 		
0x0BA0	0x4D5F    LDR	R5, [PC, #380]
0x0BA2	0x4C44    LDR	R4, [PC, #272]
0x0BA4	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 360 :: 		
0x0BA6	0x4D5F    LDR	R5, [PC, #380]
0x0BA8	0x4C44    LDR	R4, [PC, #272]
0x0BAA	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 361 :: 		
0x0BAC	0x4D5E    LDR	R5, [PC, #376]
0x0BAE	0x4C45    LDR	R4, [PC, #276]
0x0BB0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 362 :: 		
0x0BB2	0x4D5E    LDR	R5, [PC, #376]
0x0BB4	0x4C45    LDR	R4, [PC, #276]
0x0BB6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 363 :: 		
0x0BB8	0x9C08    LDR	R4, [SP, #32]
0x0BBA	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 364 :: 		
0x0BBC	0xE014    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced24
L___Lib_UART_123_45_6_UARTx_Init_Advanced23:
;__Lib_UART_123_45_6.c, 365 :: 		
0x0BBE	0x4C5C    LDR	R4, [PC, #368]
0x0BC0	0x42A0    CMP	R0, R4
0x0BC2	0xD111    BNE	L___Lib_UART_123_45_6_UARTx_Init_Advanced25
;__Lib_UART_123_45_6.c, 366 :: 		
0x0BC4	0x2501    MOVS	R5, #1
0x0BC6	0xB26D    SXTB	R5, R5
0x0BC8	0x4C5A    LDR	R4, [PC, #360]
0x0BCA	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 367 :: 		
0x0BCC	0x4D5A    LDR	R5, [PC, #360]
0x0BCE	0x4C39    LDR	R4, [PC, #228]
0x0BD0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 368 :: 		
0x0BD2	0x4D5A    LDR	R5, [PC, #360]
0x0BD4	0x4C39    LDR	R4, [PC, #228]
0x0BD6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 369 :: 		
0x0BD8	0x4D59    LDR	R5, [PC, #356]
0x0BDA	0x4C3A    LDR	R4, [PC, #232]
0x0BDC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 370 :: 		
0x0BDE	0x4D59    LDR	R5, [PC, #356]
0x0BE0	0x4C3A    LDR	R4, [PC, #232]
0x0BE2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45_6.c, 371 :: 		
0x0BE4	0x9C09    LDR	R4, [SP, #36]
0x0BE6	0x9405    STR	R4, [SP, #20]
;__Lib_UART_123_45_6.c, 372 :: 		
L___Lib_UART_123_45_6_UARTx_Init_Advanced25:
L___Lib_UART_123_45_6_UARTx_Init_Advanced24:
L___Lib_UART_123_45_6_UARTx_Init_Advanced22:
L___Lib_UART_123_45_6_UARTx_Init_Advanced20:
L___Lib_UART_123_45_6_UARTx_Init_Advanced18:
L___Lib_UART_123_45_6_UARTx_Init_Advanced16:
;__Lib_UART_123_45_6.c, 374 :: 		
0x0BE8	0xF8AD3004  STRH	R3, [SP, #4]
; module end address is: 24 (R6)
0x0BEC	0xF8AD2008  STRH	R2, [SP, #8]
0x0BF0	0x9103    STR	R1, [SP, #12]
0x0BF2	0x9004    STR	R0, [SP, #16]
0x0BF4	0x4630    MOV	R0, R6
0x0BF6	0xF7FFFD6D  BL	_GPIO_Alternate_Function_Enable+0
0x0BFA	0x9804    LDR	R0, [SP, #16]
0x0BFC	0x9903    LDR	R1, [SP, #12]
0x0BFE	0xF8BD2008  LDRH	R2, [SP, #8]
0x0C02	0xF8BD3004  LDRH	R3, [SP, #4]
;__Lib_UART_123_45_6.c, 376 :: 		
0x0C06	0xF2000510  ADDW	R5, R0, #16
0x0C0A	0x2400    MOVS	R4, #0
0x0C0C	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 377 :: 		
0x0C0E	0xF2000510  ADDW	R5, R0, #16
0x0C12	0x682C    LDR	R4, [R5, #0]
0x0C14	0x431C    ORRS	R4, R3
; stop_bits end address is: 12 (R3)
0x0C16	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 378 :: 		
0x0C18	0xF200050C  ADDW	R5, R0, #12
0x0C1C	0x2400    MOVS	R4, #0
0x0C1E	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 380 :: 		
0x0C20	0xB11A    CBZ	R2, L___Lib_UART_123_45_6_UARTx_Init_Advanced40
;__Lib_UART_123_45_6.c, 381 :: 		
0x0C22	0xF4426280  ORR	R2, R2, #1024
0x0C26	0xB292    UXTH	R2, R2
; parity end address is: 8 (R2)
;__Lib_UART_123_45_6.c, 382 :: 		
0x0C28	0xE7FF    B	L___Lib_UART_123_45_6_UARTx_Init_Advanced26
L___Lib_UART_123_45_6_UARTx_Init_Advanced40:
;__Lib_UART_123_45_6.c, 380 :: 		
;__Lib_UART_123_45_6.c, 382 :: 		
L___Lib_UART_123_45_6_UARTx_Init_Advanced26:
;__Lib_UART_123_45_6.c, 384 :: 		
; parity start address is: 8 (R2)
0x0C2A	0xF200050C  ADDW	R5, R0, #12
0x0C2E	0x682C    LDR	R4, [R5, #0]
0x0C30	0x4314    ORRS	R4, R2
; parity end address is: 8 (R2)
0x0C32	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 386 :: 		
0x0C34	0xF200060C  ADDW	R6, R0, #12
0x0C38	0x2501    MOVS	R5, #1
0x0C3A	0x6834    LDR	R4, [R6, #0]
0x0C3C	0xF365344D  BFI	R4, R5, #13, #1
0x0C40	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45_6.c, 387 :: 		
0x0C42	0xF200060C  ADDW	R6, R0, #12
0x0C46	0x2501    MOVS	R5, #1
0x0C48	0x6834    LDR	R4, [R6, #0]
0x0C4A	0xF36504C3  BFI	R4, R5, #3, #1
0x0C4E	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45_6.c, 388 :: 		
0x0C50	0xF200060C  ADDW	R6, R0, #12
0x0C54	0x2501    MOVS	R5, #1
0x0C56	0x6834    LDR	R4, [R6, #0]
0x0C58	0xF3650482  BFI	R4, R5, #2, #1
0x0C5C	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45_6.c, 389 :: 		
0x0C5E	0xF2000514  ADDW	R5, R0, #20
0x0C62	0x2400    MOVS	R4, #0
0x0C64	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 394 :: 		
0x0C66	0x9D05    LDR	R5, [SP, #20]
0x0C68	0x2419    MOVS	R4, #25
0x0C6A	0x4365    MULS	R5, R4, R5
0x0C6C	0x008C    LSLS	R4, R1, #2
; baud_rate end address is: 4 (R1)
0x0C6E	0xFBB5F7F4  UDIV	R7, R5, R4
;__Lib_UART_123_45_6.c, 395 :: 		
0x0C72	0x2464    MOVS	R4, #100
0x0C74	0xFBB7F4F4  UDIV	R4, R7, R4
0x0C78	0x0126    LSLS	R6, R4, #4
;__Lib_UART_123_45_6.c, 397 :: 		
0x0C7A	0x0935    LSRS	R5, R6, #4
0x0C7C	0x2464    MOVS	R4, #100
0x0C7E	0x436C    MULS	R4, R5, R4
0x0C80	0x1B3C    SUB	R4, R7, R4
;__Lib_UART_123_45_6.c, 398 :: 		
0x0C82	0x0124    LSLS	R4, R4, #4
0x0C84	0xF2040532  ADDW	R5, R4, #50
0x0C88	0x2464    MOVS	R4, #100
0x0C8A	0xFBB5F4F4  UDIV	R4, R5, R4
0x0C8E	0xF004040F  AND	R4, R4, #15
0x0C92	0xEA460404  ORR	R4, R6, R4, LSL #0
;__Lib_UART_123_45_6.c, 400 :: 		
0x0C96	0xF2000508  ADDW	R5, R0, #8
; UART_Base end address is: 0 (R0)
0x0C9A	0xB2A4    UXTH	R4, R4
0x0C9C	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45_6.c, 401 :: 		
L_end_UARTx_Init_Advanced:
0x0C9E	0xF8DDE000  LDR	LR, [SP, #0]
0x0CA2	0xB00B    ADD	SP, SP, #44
0x0CA4	0x4770    BX	LR
0x0CA6	0xBF00    NOP
0x0CA8	0x10004001  	USART1_SR+0
0x0CAC	0x08904247  	RCC_APB2ENR+0
0x0CB0	0x06190000  	_UART1_Write+0
0x0CB4	0x03C02000  	_UART_Wr_Ptr+0
0x0CB8	0xFFFFFFFF  	_UART1_Read+0
0x0CBC	0x03C42000  	_UART_Rd_Ptr+0
0x0CC0	0xFFFFFFFF  	_UART1_Data_Ready+0
0x0CC4	0x03C82000  	_UART_Rdy_Ptr+0
0x0CC8	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x0CCC	0x03CC2000  	_UART_Tx_Idle_Ptr+0
0x0CD0	0x44004000  	USART2_SR+0
0x0CD4	0x08444247  	RCC_APB1ENR+0
0x0CD8	0x05FD0000  	_UART2_Write+0
0x0CDC	0xFFFFFFFF  	_UART2_Read+0
0x0CE0	0xFFFFFFFF  	_UART2_Data_Ready+0
0x0CE4	0xFFFFFFFF  	_UART2_Tx_Idle+0
0x0CE8	0x48004000  	USART3_SR+0
0x0CEC	0x08484247  	RCC_APB1ENR+0
0x0CF0	0x06350000  	_UART3_Write+0
0x0CF4	0xFFFFFFFF  	_UART3_Read+0
0x0CF8	0xFFFFFFFF  	_UART3_Data_Ready+0
0x0CFC	0xFFFFFFFF  	_UART3_Tx_Idle+0
0x0D00	0x4C004000  	UART4_SR+0
0x0D04	0x084C4247  	RCC_APB1ENR+0
0x0D08	0x058D0000  	_UART4_Write+0
0x0D0C	0xFFFFFFFF  	_UART4_Read+0
0x0D10	0xFFFFFFFF  	_UART4_Data_Ready+0
0x0D14	0xFFFFFFFF  	_UART4_Tx_Idle+0
0x0D18	0x50004000  	UART5_SR+0
0x0D1C	0x08504247  	RCC_APB1ENR+0
0x0D20	0x05A90000  	_UART5_Write+0
0x0D24	0xFFFFFFFF  	_UART5_Read+0
0x0D28	0xFFFFFFFF  	_UART5_Data_Ready+0
0x0D2C	0xFFFFFFFF  	_UART5_Tx_Idle+0
0x0D30	0x14004001  	USART6_SR+0
0x0D34	0x08944247  	RCC_APB2ENR+0
0x0D38	0x05C50000  	_UART6_Write+0
0x0D3C	0xFFFFFFFF  	_UART6_Read+0
0x0D40	0xFFFFFFFF  	_UART6_Data_Ready+0
0x0D44	0xFFFFFFFF  	_UART6_Tx_Idle+0
; end of __Lib_UART_123_45_6_UARTx_Init_Advanced
_RCC_GetClocksFrequency:
;__Lib_System_4XX.c, 389 :: 		
; RCC_Clocks start address is: 0 (R0)
0x0650	0xB082    SUB	SP, SP, #8
0x0652	0xF8CDE000  STR	LR, [SP, #0]
0x0656	0x4603    MOV	R3, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 12 (R3)
;__Lib_System_4XX.c, 391 :: 		
;__Lib_System_4XX.c, 393 :: 		
0x0658	0x4619    MOV	R1, R3
0x065A	0x9101    STR	R1, [SP, #4]
0x065C	0xF7FFFF10  BL	_Get_Fosc_kHz+0
0x0660	0xF24031E8  MOVW	R1, #1000
0x0664	0xFB00F201  MUL	R2, R0, R1
0x0668	0x9901    LDR	R1, [SP, #4]
0x066A	0x600A    STR	R2, [R1, #0]
;__Lib_System_4XX.c, 396 :: 		
0x066C	0x4917    LDR	R1, [PC, #92]
0x066E	0x6809    LDR	R1, [R1, #0]
0x0670	0xF00101F0  AND	R1, R1, #240
;__Lib_System_4XX.c, 397 :: 		
0x0674	0x090A    LSRS	R2, R1, #4
;__Lib_System_4XX.c, 398 :: 		
0x0676	0x4916    LDR	R1, [PC, #88]
0x0678	0x1889    ADDS	R1, R1, R2
0x067A	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x067C	0xB2C0    UXTB	R0, R0
;__Lib_System_4XX.c, 400 :: 		
0x067E	0x1D1A    ADDS	R2, R3, #4
0x0680	0x6819    LDR	R1, [R3, #0]
0x0682	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x0684	0x6011    STR	R1, [R2, #0]
;__Lib_System_4XX.c, 403 :: 		
0x0686	0x4911    LDR	R1, [PC, #68]
0x0688	0x6809    LDR	R1, [R1, #0]
0x068A	0xF40151E0  AND	R1, R1, #7168
;__Lib_System_4XX.c, 404 :: 		
0x068E	0x0A8A    LSRS	R2, R1, #10
;__Lib_System_4XX.c, 405 :: 		
0x0690	0x490F    LDR	R1, [PC, #60]
0x0692	0x1889    ADDS	R1, R1, R2
0x0694	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x0696	0xB2C0    UXTB	R0, R0
;__Lib_System_4XX.c, 407 :: 		
0x0698	0xF2030208  ADDW	R2, R3, #8
0x069C	0x1D19    ADDS	R1, R3, #4
0x069E	0x6809    LDR	R1, [R1, #0]
0x06A0	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x06A2	0x6011    STR	R1, [R2, #0]
;__Lib_System_4XX.c, 410 :: 		
0x06A4	0x4909    LDR	R1, [PC, #36]
0x06A6	0x6809    LDR	R1, [R1, #0]
0x06A8	0xF4014160  AND	R1, R1, #57344
;__Lib_System_4XX.c, 411 :: 		
0x06AC	0x0B4A    LSRS	R2, R1, #13
;__Lib_System_4XX.c, 412 :: 		
0x06AE	0x4908    LDR	R1, [PC, #32]
0x06B0	0x1889    ADDS	R1, R1, R2
0x06B2	0x7809    LDRB	R1, [R1, #0]
; presc start address is: 0 (R0)
0x06B4	0xB2C8    UXTB	R0, R1
;__Lib_System_4XX.c, 414 :: 		
0x06B6	0xF203020C  ADDW	R2, R3, #12
0x06BA	0x1D19    ADDS	R1, R3, #4
; RCC_Clocks end address is: 12 (R3)
0x06BC	0x6809    LDR	R1, [R1, #0]
0x06BE	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x06C0	0x6011    STR	R1, [R2, #0]
;__Lib_System_4XX.c, 415 :: 		
L_end_RCC_GetClocksFrequency:
0x06C2	0xF8DDE000  LDR	LR, [SP, #0]
0x06C6	0xB002    ADD	SP, SP, #8
0x06C8	0x4770    BX	LR
0x06CA	0xBF00    NOP
0x06CC	0x38084002  	RCC_CFGR+0
0x06D0	0x01EC2000  	__Lib_System_4XX_APBAHBPrescTable+0
; end of _RCC_GetClocksFrequency
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
0x0480	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x0482	0x4802    LDR	R0, [PC, #8]
0x0484	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x0486	0xB001    ADD	SP, SP, #4
0x0488	0x4770    BX	LR
0x048A	0xBF00    NOP
0x048C	0x03B82000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F4xx.c, 223 :: 		
; module start address is: 0 (R0)
0x06D4	0xB083    SUB	SP, SP, #12
0x06D6	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F4xx.c, 226 :: 		
; i start address is: 16 (R4)
0x06DA	0x2400    MOVS	R4, #0
; module end address is: 0 (R0)
; i end address is: 16 (R4)
;__Lib_GPIO_32F4xx.c, 227 :: 		
L_GPIO_Alternate_Function_Enable66:
; i start address is: 16 (R4)
; module start address is: 0 (R0)
0x06DC	0x00A1    LSLS	R1, R4, #2
0x06DE	0x1841    ADDS	R1, R0, R1
0x06E0	0x6809    LDR	R1, [R1, #0]
0x06E2	0xF1B13FFF  CMP	R1, #-1
0x06E6	0xD014    BEQ	L_GPIO_Alternate_Function_Enable67
;__Lib_GPIO_32F4xx.c, 228 :: 		
0x06E8	0xF2000134  ADDW	R1, R0, #52
0x06EC	0x00A3    LSLS	R3, R4, #2
0x06EE	0x18C9    ADDS	R1, R1, R3
0x06F0	0x6809    LDR	R1, [R1, #0]
0x06F2	0x460A    MOV	R2, R1
0x06F4	0x18C1    ADDS	R1, R0, R3
0x06F6	0x6809    LDR	R1, [R1, #0]
0x06F8	0x9001    STR	R0, [SP, #4]
0x06FA	0xF8AD4008  STRH	R4, [SP, #8]
0x06FE	0x4608    MOV	R0, R1
0x0700	0x4611    MOV	R1, R2
0x0702	0xF7FFFEC5  BL	__Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function+0
0x0706	0xF8BD4008  LDRH	R4, [SP, #8]
0x070A	0x9801    LDR	R0, [SP, #4]
;__Lib_GPIO_32F4xx.c, 229 :: 		
0x070C	0x1C64    ADDS	R4, R4, #1
0x070E	0xB2A4    UXTH	R4, R4
;__Lib_GPIO_32F4xx.c, 230 :: 		
; module end address is: 0 (R0)
; i end address is: 16 (R4)
0x0710	0xE7E4    B	L_GPIO_Alternate_Function_Enable66
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F4xx.c, 231 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x0712	0xF8DDE000  LDR	LR, [SP, #0]
0x0716	0xB003    ADD	SP, SP, #12
0x0718	0x4770    BX	LR
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function:
;__Lib_GPIO_32F4xx.c, 190 :: 		
; configs start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x0490	0xB083    SUB	SP, SP, #12
0x0492	0xF8CDE000  STR	LR, [SP, #0]
0x0496	0x4604    MOV	R4, R0
; configs end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 16 (R4)
; configs start address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 195 :: 		
0x0498	0xF00403FF  AND	R3, R4, #255
0x049C	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x049E	0x4610    MOV	R0, R2
;__Lib_GPIO_32F4xx.c, 196 :: 		
0x04A0	0xF003020F  AND	R2, R3, #15
; pin start address is: 48 (R12)
0x04A4	0x4694    MOV	R12, R2
;__Lib_GPIO_32F4xx.c, 197 :: 		
0x04A6	0x0A22    LSRS	R2, R4, #8
; af_pin end address is: 16 (R4)
0x04A8	0xF002020F  AND	R2, R2, #15
; af start address is: 44 (R11)
0x04AC	0x4693    MOV	R11, R2
;__Lib_GPIO_32F4xx.c, 199 :: 		
0x04AE	0xE01A    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function54
; port end address is: 0 (R0)
;__Lib_GPIO_32F4xx.c, 200 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function56:
0x04B0	0x4A2D    LDR	R2, [PC, #180]
0x04B2	0x9202    STR	R2, [SP, #8]
0x04B4	0xE029    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 201 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function57:
0x04B6	0x4A2D    LDR	R2, [PC, #180]
0x04B8	0x9202    STR	R2, [SP, #8]
0x04BA	0xE026    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 202 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function58:
0x04BC	0x4A2C    LDR	R2, [PC, #176]
0x04BE	0x9202    STR	R2, [SP, #8]
0x04C0	0xE023    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 203 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function59:
0x04C2	0x4A2C    LDR	R2, [PC, #176]
0x04C4	0x9202    STR	R2, [SP, #8]
0x04C6	0xE020    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 204 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function60:
0x04C8	0x4A2B    LDR	R2, [PC, #172]
0x04CA	0x9202    STR	R2, [SP, #8]
0x04CC	0xE01D    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 205 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function61:
0x04CE	0x4A2B    LDR	R2, [PC, #172]
0x04D0	0x9202    STR	R2, [SP, #8]
0x04D2	0xE01A    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 206 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function62:
0x04D4	0x4A2A    LDR	R2, [PC, #168]
0x04D6	0x9202    STR	R2, [SP, #8]
0x04D8	0xE017    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 207 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function63:
0x04DA	0x4A2A    LDR	R2, [PC, #168]
0x04DC	0x9202    STR	R2, [SP, #8]
0x04DE	0xE014    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 208 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function64:
0x04E0	0x4A29    LDR	R2, [PC, #164]
0x04E2	0x9202    STR	R2, [SP, #8]
0x04E4	0xE011    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55
;__Lib_GPIO_32F4xx.c, 209 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function54:
; port start address is: 0 (R0)
0x04E6	0x2800    CMP	R0, #0
0x04E8	0xD0E2    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function56
0x04EA	0x2801    CMP	R0, #1
0x04EC	0xD0E3    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function57
0x04EE	0x2802    CMP	R0, #2
0x04F0	0xD0E4    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function58
0x04F2	0x2803    CMP	R0, #3
0x04F4	0xD0E5    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function59
0x04F6	0x2804    CMP	R0, #4
0x04F8	0xD0E6    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function60
0x04FA	0x2805    CMP	R0, #5
0x04FC	0xD0E7    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function61
0x04FE	0x2806    CMP	R0, #6
0x0500	0xD0E8    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function62
0x0502	0x2807    CMP	R0, #7
0x0504	0xD0E9    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function63
0x0506	0x2808    CMP	R0, #8
0x0508	0xD0EA    BEQ	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function64
; port end address is: 0 (R0)
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function55:
;__Lib_GPIO_32F4xx.c, 211 :: 		
0x050A	0x2201    MOVS	R2, #1
0x050C	0xB212    SXTH	R2, R2
0x050E	0xFA02F20C  LSL	R2, R2, R12
0x0512	0xF8AD2004  STRH	R2, [SP, #4]
; configs end address is: 4 (R1)
0x0516	0x9802    LDR	R0, [SP, #8]
0x0518	0x460A    MOV	R2, R1
0x051A	0xF8BD1004  LDRH	R1, [SP, #4]
0x051E	0xF7FFFE87  BL	_GPIO_Config+0
;__Lib_GPIO_32F4xx.c, 213 :: 		
0x0522	0x9A02    LDR	R2, [SP, #8]
0x0524	0xF2020120  ADDW	R1, R2, #32
; tmp_ptr start address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 214 :: 		
0x0528	0xF1BC0F07  CMP	R12, #7
0x052C	0xD908    BLS	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function90
;__Lib_GPIO_32F4xx.c, 215 :: 		
0x052E	0x1D0A    ADDS	R2, R1, #4
; tmp_ptr end address is: 4 (R1)
; tmp_ptr start address is: 0 (R0)
0x0530	0x4610    MOV	R0, R2
;__Lib_GPIO_32F4xx.c, 216 :: 		
0x0532	0xF1AC0208  SUB	R2, R12, #8
; pin end address is: 48 (R12)
; pin start address is: 4 (R1)
0x0536	0x4611    MOV	R1, R2
; tmp_ptr end address is: 0 (R0)
; pin end address is: 4 (R1)
0x0538	0x9101    STR	R1, [SP, #4]
0x053A	0x4601    MOV	R1, R0
0x053C	0x9801    LDR	R0, [SP, #4]
;__Lib_GPIO_32F4xx.c, 217 :: 		
0x053E	0xE000    B	L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function65
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function90:
;__Lib_GPIO_32F4xx.c, 214 :: 		
0x0540	0x4660    MOV	R0, R12
;__Lib_GPIO_32F4xx.c, 217 :: 		
L___Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function65:
;__Lib_GPIO_32F4xx.c, 218 :: 		
; pin start address is: 0 (R0)
; tmp_ptr start address is: 4 (R1)
0x0542	0x0083    LSLS	R3, R0, #2
0x0544	0xF04F020F  MOV	R2, #15
0x0548	0x409A    LSLS	R2, R3
0x054A	0x43D3    MVN	R3, R2
0x054C	0x680A    LDR	R2, [R1, #0]
0x054E	0x401A    ANDS	R2, R3
0x0550	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F4xx.c, 219 :: 		
0x0552	0x0082    LSLS	R2, R0, #2
; pin end address is: 0 (R0)
0x0554	0xFA0BF302  LSL	R3, R11, R2
; af end address is: 44 (R11)
0x0558	0x680A    LDR	R2, [R1, #0]
0x055A	0x431A    ORRS	R2, R3
0x055C	0x600A    STR	R2, [R1, #0]
; tmp_ptr end address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 220 :: 		
L_end_GPIO_Config_Pin_Alternate_Function:
0x055E	0xF8DDE000  LDR	LR, [SP, #0]
0x0562	0xB003    ADD	SP, SP, #12
0x0564	0x4770    BX	LR
0x0566	0xBF00    NOP
0x0568	0x00004002  	#1073872896
0x056C	0x04004002  	#1073873920
0x0570	0x08004002  	#1073874944
0x0574	0x0C004002  	#1073875968
0x0578	0x10004002  	#1073876992
0x057C	0x14004002  	#1073878016
0x0580	0x18004002  	#1073879040
0x0584	0x1C004002  	#1073880064
0x0588	0x20004002  	#1073881088
; end of __Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function
_GPIO_Config:
;__Lib_GPIO_32F4xx.c, 74 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0230	0xB084    SUB	SP, SP, #16
0x0232	0xF8CDE000  STR	LR, [SP, #0]
0x0236	0xB28D    UXTH	R5, R1
0x0238	0x4616    MOV	R6, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 20 (R5)
; config start address is: 24 (R6)
;__Lib_GPIO_32F4xx.c, 75 :: 		
;__Lib_GPIO_32F4xx.c, 76 :: 		
;__Lib_GPIO_32F4xx.c, 80 :: 		
0x023A	0x4B86    LDR	R3, [PC, #536]
0x023C	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 28 (R7)
0x0240	0x461F    MOV	R7, R3
;__Lib_GPIO_32F4xx.c, 82 :: 		
0x0242	0x4618    MOV	R0, R3
0x0244	0xF7FFFFA0  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F4xx.c, 85 :: 		
0x0248	0xF1B50FFF  CMP	R5, #255
0x024C	0xD120    BNE	L_GPIO_Config22
;__Lib_GPIO_32F4xx.c, 86 :: 		
0x024E	0x683C    LDR	R4, [R7, #0]
;__Lib_GPIO_32F4xx.c, 87 :: 		
0x0250	0x4B81    LDR	R3, [PC, #516]
0x0252	0xEA040303  AND	R3, R4, R3, LSL #0
; tmp start address is: 0 (R0)
0x0256	0x4618    MOV	R0, R3
;__Lib_GPIO_32F4xx.c, 88 :: 		
0x0258	0x4B80    LDR	R3, [PC, #512]
0x025A	0x429E    CMP	R6, R3
0x025C	0xD114    BNE	L_GPIO_Config23
; pin_mask end address is: 20 (R5)
; config end address is: 24 (R6)
;__Lib_GPIO_32F4xx.c, 89 :: 		
0x025E	0xF2455355  MOVW	R3, #21845
0x0262	0xEA400303  ORR	R3, R0, R3, LSL #0
; tmp end address is: 0 (R0)
;__Lib_GPIO_32F4xx.c, 90 :: 		
0x0266	0x603B    STR	R3, [R7, #0]
;__Lib_GPIO_32F4xx.c, 91 :: 		
0x0268	0x1D3D    ADDS	R5, R7, #4
0x026A	0x682C    LDR	R4, [R5, #0]
0x026C	0xF06F03FF  MVN	R3, #255
0x0270	0xEA040303  AND	R3, R4, R3, LSL #0
0x0274	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 92 :: 		
0x0276	0xF2070508  ADDW	R5, R7, #8
; port end address is: 28 (R7)
0x027A	0x682C    LDR	R4, [R5, #0]
0x027C	0xF64F73FF  MOVW	R3, #65535
0x0280	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0284	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 93 :: 		
0x0286	0xE0E1    B	L_end_GPIO_Config
;__Lib_GPIO_32F4xx.c, 94 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F4xx.c, 95 :: 		
; port start address is: 28 (R7)
; tmp start address is: 0 (R0)
; config start address is: 24 (R6)
; pin_mask start address is: 20 (R5)
0x0288	0x2E42    CMP	R6, #66
0x028A	0xD101    BNE	L_GPIO_Config24
; pin_mask end address is: 20 (R5)
; config end address is: 24 (R6)
;__Lib_GPIO_32F4xx.c, 96 :: 		
0x028C	0x6038    STR	R0, [R7, #0]
; tmp end address is: 0 (R0)
; port end address is: 28 (R7)
;__Lib_GPIO_32F4xx.c, 97 :: 		
0x028E	0xE0DD    B	L_end_GPIO_Config
;__Lib_GPIO_32F4xx.c, 98 :: 		
L_GPIO_Config24:
;__Lib_GPIO_32F4xx.c, 99 :: 		
; port start address is: 28 (R7)
; config start address is: 24 (R6)
; pin_mask start address is: 20 (R5)
L_GPIO_Config22:
;__Lib_GPIO_32F4xx.c, 101 :: 		
0x0290	0xF64F73FF  MOVW	R3, #65535
0x0294	0x429D    CMP	R5, R3
0x0296	0xD113    BNE	L_GPIO_Config25
;__Lib_GPIO_32F4xx.c, 102 :: 		
0x0298	0x4B70    LDR	R3, [PC, #448]
0x029A	0x429E    CMP	R6, R3
0x029C	0xD10B    BNE	L_GPIO_Config26
; pin_mask end address is: 20 (R5)
; config end address is: 24 (R6)
;__Lib_GPIO_32F4xx.c, 103 :: 		
0x029E	0xF04F3355  MOV	R3, #1431655765
0x02A2	0x603B    STR	R3, [R7, #0]
;__Lib_GPIO_32F4xx.c, 104 :: 		
0x02A4	0x1D3C    ADDS	R4, R7, #4
0x02A6	0x2300    MOVS	R3, #0
0x02A8	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F4xx.c, 105 :: 		
0x02AA	0xF2070408  ADDW	R4, R7, #8
; port end address is: 28 (R7)
0x02AE	0xF04F33FF  MOV	R3, #-1
0x02B2	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F4xx.c, 106 :: 		
0x02B4	0xE0CA    B	L_end_GPIO_Config
;__Lib_GPIO_32F4xx.c, 107 :: 		
L_GPIO_Config26:
;__Lib_GPIO_32F4xx.c, 108 :: 		
; port start address is: 28 (R7)
; config start address is: 24 (R6)
; pin_mask start address is: 20 (R5)
0x02B6	0x2E42    CMP	R6, #66
0x02B8	0xD102    BNE	L_GPIO_Config27
; pin_mask end address is: 20 (R5)
; config end address is: 24 (R6)
;__Lib_GPIO_32F4xx.c, 109 :: 		
0x02BA	0x2300    MOVS	R3, #0
0x02BC	0x603B    STR	R3, [R7, #0]
; port end address is: 28 (R7)
;__Lib_GPIO_32F4xx.c, 110 :: 		
0x02BE	0xE0C5    B	L_end_GPIO_Config
;__Lib_GPIO_32F4xx.c, 111 :: 		
L_GPIO_Config27:
;__Lib_GPIO_32F4xx.c, 112 :: 		
; port start address is: 28 (R7)
; config start address is: 24 (R6)
; pin_mask start address is: 20 (R5)
L_GPIO_Config25:
;__Lib_GPIO_32F4xx.c, 114 :: 		
0x02C0	0xF0060301  AND	R3, R6, #1
0x02C4	0xB10B    CBZ	R3, L_GPIO_Config28
;__Lib_GPIO_32F4xx.c, 115 :: 		
; mode start address is: 0 (R0)
0x02C6	0x2003    MOVS	R0, #3
; mode end address is: 0 (R0)
0x02C8	0xE00A    B	L_GPIO_Config29
L_GPIO_Config28:
;__Lib_GPIO_32F4xx.c, 116 :: 		
0x02CA	0xF0060308  AND	R3, R6, #8
0x02CE	0xB10B    CBZ	R3, L_GPIO_Config30
;__Lib_GPIO_32F4xx.c, 117 :: 		
; mode start address is: 0 (R0)
0x02D0	0x2002    MOVS	R0, #2
; mode end address is: 0 (R0)
0x02D2	0xE005    B	L_GPIO_Config31
L_GPIO_Config30:
;__Lib_GPIO_32F4xx.c, 118 :: 		
0x02D4	0xF0060304  AND	R3, R6, #4
0x02D8	0xB10B    CBZ	R3, L_GPIO_Config32
;__Lib_GPIO_32F4xx.c, 119 :: 		
; mode start address is: 0 (R0)
0x02DA	0x2001    MOVS	R0, #1
; mode end address is: 0 (R0)
0x02DC	0xE000    B	L_GPIO_Config33
L_GPIO_Config32:
;__Lib_GPIO_32F4xx.c, 121 :: 		
; mode start address is: 0 (R0)
0x02DE	0x2000    MOVS	R0, #0
; mode end address is: 0 (R0)
L_GPIO_Config33:
; mode start address is: 0 (R0)
; mode end address is: 0 (R0)
L_GPIO_Config31:
; mode start address is: 0 (R0)
; mode end address is: 0 (R0)
L_GPIO_Config29:
;__Lib_GPIO_32F4xx.c, 123 :: 		
; mode start address is: 0 (R0)
0x02E0	0xF4062301  AND	R3, R6, #528384
0x02E4	0xB10B    CBZ	R3, L_GPIO_Config34
;__Lib_GPIO_32F4xx.c, 124 :: 		
; speed start address is: 4 (R1)
0x02E6	0x2103    MOVS	R1, #3
; speed end address is: 4 (R1)
0x02E8	0xE00A    B	L_GPIO_Config35
L_GPIO_Config34:
;__Lib_GPIO_32F4xx.c, 125 :: 		
0x02EA	0xF4066300  AND	R3, R6, #2048
0x02EE	0xB10B    CBZ	R3, L_GPIO_Config36
;__Lib_GPIO_32F4xx.c, 126 :: 		
; speed start address is: 4 (R1)
0x02F0	0x2102    MOVS	R1, #2
; speed end address is: 4 (R1)
0x02F2	0xE005    B	L_GPIO_Config37
L_GPIO_Config36:
;__Lib_GPIO_32F4xx.c, 127 :: 		
0x02F4	0xF4066380  AND	R3, R6, #1024
0x02F8	0xB10B    CBZ	R3, L_GPIO_Config38
;__Lib_GPIO_32F4xx.c, 128 :: 		
; speed start address is: 4 (R1)
0x02FA	0x2101    MOVS	R1, #1
; speed end address is: 4 (R1)
0x02FC	0xE000    B	L_GPIO_Config39
L_GPIO_Config38:
;__Lib_GPIO_32F4xx.c, 130 :: 		
; speed start address is: 4 (R1)
0x02FE	0x2100    MOVS	R1, #0
; speed end address is: 4 (R1)
L_GPIO_Config39:
; speed start address is: 4 (R1)
; speed end address is: 4 (R1)
L_GPIO_Config37:
; speed start address is: 4 (R1)
; speed end address is: 4 (R1)
L_GPIO_Config35:
;__Lib_GPIO_32F4xx.c, 132 :: 		
; speed start address is: 4 (R1)
0x0300	0xF0060320  AND	R3, R6, #32
0x0304	0xB10B    CBZ	R3, L_GPIO_Config40
;__Lib_GPIO_32F4xx.c, 133 :: 		
; otype start address is: 8 (R2)
0x0306	0x2201    MOVS	R2, #1
; otype end address is: 8 (R2)
0x0308	0xE000    B	L_GPIO_Config41
L_GPIO_Config40:
;__Lib_GPIO_32F4xx.c, 135 :: 		
; otype start address is: 8 (R2)
0x030A	0x2200    MOVS	R2, #0
; otype end address is: 8 (R2)
L_GPIO_Config41:
;__Lib_GPIO_32F4xx.c, 137 :: 		
; otype start address is: 8 (R2)
0x030C	0xF4067380  AND	R3, R6, #256
0x0310	0xB10B    CBZ	R3, L_GPIO_Config42
;__Lib_GPIO_32F4xx.c, 138 :: 		
; pull start address is: 12 (R3)
0x0312	0x2302    MOVS	R3, #2
; pull end address is: 12 (R3)
0x0314	0xE005    B	L_GPIO_Config43
L_GPIO_Config42:
;__Lib_GPIO_32F4xx.c, 139 :: 		
0x0316	0xF0060380  AND	R3, R6, #128
0x031A	0xB10B    CBZ	R3, L_GPIO_Config44
;__Lib_GPIO_32F4xx.c, 140 :: 		
; pull start address is: 12 (R3)
0x031C	0x2301    MOVS	R3, #1
; pull end address is: 12 (R3)
0x031E	0xE000    B	L_GPIO_Config45
L_GPIO_Config44:
;__Lib_GPIO_32F4xx.c, 142 :: 		
; pull start address is: 12 (R3)
0x0320	0x2300    MOVS	R3, #0
; pull end address is: 12 (R3)
L_GPIO_Config45:
; pull start address is: 12 (R3)
; pull end address is: 12 (R3)
L_GPIO_Config43:
;__Lib_GPIO_32F4xx.c, 146 :: 		
; pull start address is: 12 (R3)
; pinpos start address is: 40 (R10)
0x0322	0xF2400A00  MOVW	R10, #0
; pin_mask end address is: 20 (R5)
; config end address is: 24 (R6)
; mode end address is: 0 (R0)
; speed end address is: 4 (R1)
; otype end address is: 8 (R2)
; pull end address is: 12 (R3)
; pinpos end address is: 40 (R10)
0x0326	0x9201    STR	R2, [SP, #4]
0x0328	0xFA1FF985  UXTH	R9, R5
0x032C	0x46B0    MOV	R8, R6
0x032E	0x4606    MOV	R6, R0
0x0330	0x4618    MOV	R0, R3
0x0332	0x460A    MOV	R2, R1
0x0334	0x9901    LDR	R1, [SP, #4]
L_GPIO_Config46:
; pinpos start address is: 40 (R10)
; pin_mask start address is: 36 (R9)
; config start address is: 32 (R8)
; mode start address is: 24 (R6)
; speed start address is: 8 (R2)
; otype start address is: 4 (R1)
; pull start address is: 0 (R0)
; pull start address is: 0 (R0)
; pull end address is: 0 (R0)
; otype start address is: 4 (R1)
; otype end address is: 4 (R1)
; speed start address is: 8 (R2)
; speed end address is: 8 (R2)
; mode start address is: 24 (R6)
; mode end address is: 24 (R6)
; port start address is: 28 (R7)
; port end address is: 28 (R7)
; config start address is: 32 (R8)
; config end address is: 32 (R8)
; pin_mask start address is: 36 (R9)
; pin_mask end address is: 36 (R9)
0x0336	0xF1BA0F10  CMP	R10, #16
0x033A	0xF0808087  BCS	L_GPIO_Config47
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 24 (R6)
; port end address is: 28 (R7)
; config end address is: 32 (R8)
; pin_mask end address is: 36 (R9)
;__Lib_GPIO_32F4xx.c, 148 :: 		
; pin_mask start address is: 36 (R9)
; config start address is: 32 (R8)
; port start address is: 28 (R7)
; mode start address is: 24 (R6)
; speed start address is: 8 (R2)
; otype start address is: 4 (R1)
; pull start address is: 0 (R0)
0x033E	0xF04F0301  MOV	R3, #1
0x0342	0xFA03F40A  LSL	R4, R3, R10
;__Lib_GPIO_32F4xx.c, 150 :: 		
0x0346	0xEA090304  AND	R3, R9, R4, LSL #0
;__Lib_GPIO_32F4xx.c, 152 :: 		
0x034A	0x42A3    CMP	R3, R4
0x034C	0xF040807B  BNE	L_GPIO_Config49
;__Lib_GPIO_32F4xx.c, 154 :: 		
0x0350	0xEA4F044A  LSL	R4, R10, #1
0x0354	0xF04F0303  MOV	R3, #3
0x0358	0x40A3    LSLS	R3, R4
0x035A	0x43DC    MVN	R4, R3
0x035C	0x683B    LDR	R3, [R7, #0]
0x035E	0x4023    ANDS	R3, R4
0x0360	0x603B    STR	R3, [R7, #0]
;__Lib_GPIO_32F4xx.c, 155 :: 		
0x0362	0xEA4F034A  LSL	R3, R10, #1
0x0366	0xFA06F403  LSL	R4, R6, R3
0x036A	0x683B    LDR	R3, [R7, #0]
0x036C	0x4323    ORRS	R3, R4
0x036E	0x603B    STR	R3, [R7, #0]
;__Lib_GPIO_32F4xx.c, 157 :: 		
0x0370	0xF008030C  AND	R3, R8, #12
0x0374	0xB33B    CBZ	R3, L_GPIO_Config50
;__Lib_GPIO_32F4xx.c, 160 :: 		
0x0376	0xF2070508  ADDW	R5, R7, #8
0x037A	0xEA4F044A  LSL	R4, R10, #1
0x037E	0xF04F0303  MOV	R3, #3
0x0382	0x40A3    LSLS	R3, R4
0x0384	0x43DC    MVN	R4, R3
0x0386	0x682B    LDR	R3, [R5, #0]
0x0388	0x4023    ANDS	R3, R4
0x038A	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 161 :: 		
0x038C	0xF2070508  ADDW	R5, R7, #8
0x0390	0xEA4F034A  LSL	R3, R10, #1
0x0394	0xFA02F403  LSL	R4, R2, R3
0x0398	0x682B    LDR	R3, [R5, #0]
0x039A	0x4323    ORRS	R3, R4
0x039C	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 164 :: 		
0x039E	0x1D3D    ADDS	R5, R7, #4
0x03A0	0xFA1FF48A  UXTH	R4, R10
0x03A4	0xF04F0301  MOV	R3, #1
0x03A8	0x40A3    LSLS	R3, R4
0x03AA	0x43DC    MVN	R4, R3
0x03AC	0x682B    LDR	R3, [R5, #0]
0x03AE	0x4023    ANDS	R3, R4
0x03B0	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 165 :: 		
0x03B2	0x1D3D    ADDS	R5, R7, #4
0x03B4	0xFA1FF48A  UXTH	R4, R10
0x03B8	0xB28B    UXTH	R3, R1
0x03BA	0xFA03F404  LSL	R4, R3, R4
0x03BE	0xB2A4    UXTH	R4, R4
0x03C0	0x682B    LDR	R3, [R5, #0]
0x03C2	0x4323    ORRS	R3, R4
0x03C4	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 166 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F4xx.c, 169 :: 		
0x03C6	0xF207050C  ADDW	R5, R7, #12
0x03CA	0xFA1FF38A  UXTH	R3, R10
0x03CE	0x005C    LSLS	R4, R3, #1
0x03D0	0xB2A4    UXTH	R4, R4
0x03D2	0xF04F0303  MOV	R3, #3
0x03D6	0x40A3    LSLS	R3, R4
0x03D8	0x43DC    MVN	R4, R3
0x03DA	0x682B    LDR	R3, [R5, #0]
0x03DC	0x4023    ANDS	R3, R4
0x03DE	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 170 :: 		
0x03E0	0xF207050C  ADDW	R5, R7, #12
0x03E4	0xEA4F034A  LSL	R3, R10, #1
0x03E8	0xFA00F403  LSL	R4, R0, R3
0x03EC	0x682B    LDR	R3, [R5, #0]
0x03EE	0x4323    ORRS	R3, R4
0x03F0	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F4xx.c, 172 :: 		
0x03F2	0xF0080308  AND	R3, R8, #8
0x03F6	0xB333    CBZ	R3, L_GPIO_Config51
;__Lib_GPIO_32F4xx.c, 173 :: 		
0x03F8	0xF4080370  AND	R3, R8, #15728640
0x03FC	0x0D1B    LSRS	R3, R3, #20
0x03FE	0xF88D300C  STRB	R3, [SP, #12]
;__Lib_GPIO_32F4xx.c, 174 :: 		
0x0402	0xF1BA0F07  CMP	R10, #7
0x0406	0xD905    BLS	L_GPIO_Config52
;__Lib_GPIO_32F4xx.c, 175 :: 		
0x0408	0xF2070324  ADDW	R3, R7, #36
0x040C	0x9302    STR	R3, [SP, #8]
;__Lib_GPIO_32F4xx.c, 176 :: 		
0x040E	0xF1AA0508  SUB	R5, R10, #8
; pos start address is: 20 (R5)
;__Lib_GPIO_32F4xx.c, 177 :: 		
; pos end address is: 20 (R5)
0x0412	0xE003    B	L_GPIO_Config53
L_GPIO_Config52:
;__Lib_GPIO_32F4xx.c, 178 :: 		
0x0414	0xF2070320  ADDW	R3, R7, #32
0x0418	0x9302    STR	R3, [SP, #8]
;__Lib_GPIO_32F4xx.c, 179 :: 		
; pos start address is: 20 (R5)
0x041A	0x4655    MOV	R5, R10
; pos end address is: 20 (R5)
;__Lib_GPIO_32F4xx.c, 180 :: 		
L_GPIO_Config53:
;__Lib_GPIO_32F4xx.c, 181 :: 		
; pos start address is: 20 (R5)
0x041C	0x00AC    LSLS	R4, R5, #2
0x041E	0xF04F030F  MOV	R3, #15
0x0422	0x40A3    LSLS	R3, R4
0x0424	0x43DC    MVN	R4, R3
0x0426	0x9B02    LDR	R3, [SP, #8]
0x0428	0x681B    LDR	R3, [R3, #0]
0x042A	0xEA030404  AND	R4, R3, R4, LSL #0
0x042E	0x9B02    LDR	R3, [SP, #8]
0x0430	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F4xx.c, 182 :: 		
0x0432	0xF89D400C  LDRB	R4, [SP, #12]
0x0436	0x00AB    LSLS	R3, R5, #2
; pos end address is: 20 (R5)
0x0438	0x409C    LSLS	R4, R3
0x043A	0x9B02    LDR	R3, [SP, #8]
0x043C	0x681B    LDR	R3, [R3, #0]
0x043E	0xEA430404  ORR	R4, R3, R4, LSL #0
0x0442	0x9B02    LDR	R3, [SP, #8]
0x0444	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_32F4xx.c, 183 :: 		
L_GPIO_Config51:
;__Lib_GPIO_32F4xx.c, 185 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F4xx.c, 146 :: 		
0x0446	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F4xx.c, 186 :: 		
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 24 (R6)
; port end address is: 28 (R7)
; config end address is: 32 (R8)
; pin_mask end address is: 36 (R9)
; pinpos end address is: 40 (R10)
0x044A	0xE774    B	L_GPIO_Config46
L_GPIO_Config47:
;__Lib_GPIO_32F4xx.c, 187 :: 		
L_end_GPIO_Config:
0x044C	0xF8DDE000  LDR	LR, [SP, #0]
0x0450	0xB004    ADD	SP, SP, #16
0x0452	0x4770    BX	LR
0x0454	0xFC00FFFF  	#-1024
0x0458	0x0000FFFF  	#-65536
0x045C	0x00140008  	#524308
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F4xx.c, 26 :: 		
; gpio_port start address is: 0 (R0)
0x0188	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F4xx.c, 28 :: 		
0x018A	0x491E    LDR	R1, [PC, #120]
0x018C	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x0190	0x4608    MOV	R0, R1
;__Lib_GPIO_32F4xx.c, 29 :: 		
; pos start address is: 8 (R2)
0x0192	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F4xx.c, 30 :: 		
0x0194	0xE012    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F4xx.c, 31 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x0196	0x2001    MOVS	R0, #1
; pos end address is: 0 (R0)
0x0198	0xE02C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 32 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x019A	0x2002    MOVS	R0, #2
; pos end address is: 0 (R0)
0x019C	0xE02A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 33 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x019E	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x01A0	0xE028    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 34 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x01A2	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x01A4	0xE026    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 35 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x01A6	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x01A8	0xE024    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 36 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x01AA	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x01AC	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 37 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x01AE	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x01B0	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 38 :: 		
L_GPIO_Clk_Enable9:
; pos start address is: 0 (R0)
0x01B2	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x01B4	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 39 :: 		
L_GPIO_Clk_Enable10:
; pos start address is: 0 (R0)
0x01B6	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x01BA	0xE01B    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F4xx.c, 40 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x01BC	0x4912    LDR	R1, [PC, #72]
0x01BE	0x4288    CMP	R0, R1
0x01C0	0xD0E9    BEQ	L_GPIO_Clk_Enable2
0x01C2	0x4912    LDR	R1, [PC, #72]
0x01C4	0x4288    CMP	R0, R1
0x01C6	0xD0E8    BEQ	L_GPIO_Clk_Enable3
0x01C8	0x4911    LDR	R1, [PC, #68]
0x01CA	0x4288    CMP	R0, R1
0x01CC	0xD0E7    BEQ	L_GPIO_Clk_Enable4
0x01CE	0x4911    LDR	R1, [PC, #68]
0x01D0	0x4288    CMP	R0, R1
0x01D2	0xD0E6    BEQ	L_GPIO_Clk_Enable5
0x01D4	0x4910    LDR	R1, [PC, #64]
0x01D6	0x4288    CMP	R0, R1
0x01D8	0xD0E5    BEQ	L_GPIO_Clk_Enable6
0x01DA	0x4910    LDR	R1, [PC, #64]
0x01DC	0x4288    CMP	R0, R1
0x01DE	0xD0E4    BEQ	L_GPIO_Clk_Enable7
0x01E0	0x490F    LDR	R1, [PC, #60]
0x01E2	0x4288    CMP	R0, R1
0x01E4	0xD0E3    BEQ	L_GPIO_Clk_Enable8
0x01E6	0x490F    LDR	R1, [PC, #60]
0x01E8	0x4288    CMP	R0, R1
0x01EA	0xD0E2    BEQ	L_GPIO_Clk_Enable9
0x01EC	0x490E    LDR	R1, [PC, #56]
0x01EE	0x4288    CMP	R0, R1
0x01F0	0xD0E1    BEQ	L_GPIO_Clk_Enable10
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x01F2	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F4xx.c, 42 :: 		
; pos start address is: 0 (R0)
0x01F4	0x490D    LDR	R1, [PC, #52]
0x01F6	0x6809    LDR	R1, [R1, #0]
0x01F8	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x01FC	0x490B    LDR	R1, [PC, #44]
0x01FE	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F4xx.c, 43 :: 		
L_end_GPIO_Clk_Enable:
0x0200	0xB001    ADD	SP, SP, #4
0x0202	0x4770    BX	LR
0x0204	0xFC00FFFF  	#-1024
0x0208	0x00004002  	#1073872896
0x020C	0x04004002  	#1073873920
0x0210	0x08004002  	#1073874944
0x0214	0x0C004002  	#1073875968
0x0218	0x10004002  	#1073876992
0x021C	0x14004002  	#1073878016
0x0220	0x18004002  	#1073879040
0x0224	0x1C004002  	#1073880064
0x0228	0x20004002  	#1073881088
0x022C	0x38304002  	RCC_AHB1ENR+0
; end of _GPIO_Clk_Enable
_UART_Write_Text:
;__Lib_UART_123_45_6.c, 476 :: 		
; uart_text start address is: 0 (R0)
0x14DC	0xB083    SUB	SP, SP, #12
0x14DE	0xF8CDE000  STR	LR, [SP, #0]
; uart_text end address is: 0 (R0)
; uart_text start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 477 :: 		
; counter start address is: 8 (R2)
0x14E2	0x2200    MOVS	R2, #0
;__Lib_UART_123_45_6.c, 479 :: 		
0x14E4	0x7801    LDRB	R1, [R0, #0]
; data_ start address is: 12 (R3)
0x14E6	0xB2CB    UXTB	R3, R1
; data_ end address is: 12 (R3)
; counter end address is: 8 (R2)
0x14E8	0xB2D9    UXTB	R1, R3
;__Lib_UART_123_45_6.c, 480 :: 		
L_UART_Write_Text27:
; data_ start address is: 4 (R1)
; counter start address is: 8 (R2)
; uart_text start address is: 0 (R0)
; uart_text end address is: 0 (R0)
0x14EA	0xB171    CBZ	R1, L_UART_Write_Text28
; uart_text end address is: 0 (R0)
;__Lib_UART_123_45_6.c, 481 :: 		
; uart_text start address is: 0 (R0)
0x14EC	0x9001    STR	R0, [SP, #4]
; data_ end address is: 4 (R1)
0x14EE	0xF88D2008  STRB	R2, [SP, #8]
0x14F2	0xB2C8    UXTB	R0, R1
0x14F4	0xF7FFFC28  BL	_UART_Write+0
0x14F8	0xF89D2008  LDRB	R2, [SP, #8]
0x14FC	0x9801    LDR	R0, [SP, #4]
;__Lib_UART_123_45_6.c, 482 :: 		
0x14FE	0x1C51    ADDS	R1, R2, #1
0x1500	0xB2C9    UXTB	R1, R1
0x1502	0xB2CA    UXTB	R2, R1
;__Lib_UART_123_45_6.c, 483 :: 		
0x1504	0x1841    ADDS	R1, R0, R1
0x1506	0x7809    LDRB	R1, [R1, #0]
; data_ start address is: 4 (R1)
;__Lib_UART_123_45_6.c, 484 :: 		
; uart_text end address is: 0 (R0)
; counter end address is: 8 (R2)
; data_ end address is: 4 (R1)
0x1508	0xE7EF    B	L_UART_Write_Text27
L_UART_Write_Text28:
;__Lib_UART_123_45_6.c, 485 :: 		
L_end_UART_Write_Text:
0x150A	0xF8DDE000  LDR	LR, [SP, #0]
0x150E	0xB003    ADD	SP, SP, #12
0x1510	0x4770    BX	LR
; end of _UART_Write_Text
_UART_Write:
;__Lib_UART_123_45_6.c, 472 :: 		
; _data start address is: 0 (R0)
0x0D48	0xB081    SUB	SP, SP, #4
0x0D4A	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 473 :: 		
; _data end address is: 0 (R0)
0x0D4E	0x4C03    LDR	R4, [PC, #12]
0x0D50	0x6824    LDR	R4, [R4, #0]
0x0D52	0x47A0    BLX	R4
;__Lib_UART_123_45_6.c, 474 :: 		
L_end_UART_Write:
0x0D54	0xF8DDE000  LDR	LR, [SP, #0]
0x0D58	0xB001    ADD	SP, SP, #4
0x0D5A	0x4770    BX	LR
0x0D5C	0x03C02000  	_UART_Wr_Ptr+0
; end of _UART_Write
_UART1_Write:
;__Lib_UART_123_45_6.c, 41 :: 		
; _data start address is: 0 (R0)
0x0618	0xB081    SUB	SP, SP, #4
0x061A	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 42 :: 		
0x061E	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0620	0x4803    LDR	R0, [PC, #12]
0x0622	0xF7FFFF1D  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 43 :: 		
L_end_UART1_Write:
0x0626	0xF8DDE000  LDR	LR, [SP, #0]
0x062A	0xB001    ADD	SP, SP, #4
0x062C	0x4770    BX	LR
0x062E	0xBF00    NOP
0x0630	0x10004001  	USART1_SR+0
; end of _UART1_Write
__Lib_UART_123_45_6_UARTx_Write:
;__Lib_UART_123_45_6.c, 35 :: 		
; _data start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x0460	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; _data start address is: 4 (R1)
0x0462	0xF8AD1000  STRH	R1, [SP, #0]
; UART_Base end address is: 0 (R0)
; _data end address is: 4 (R1)
0x0466	0x4601    MOV	R1, R0
0x0468	0xF8BD0000  LDRH	R0, [SP, #0]
;__Lib_UART_123_45_6.c, 36 :: 		
L___Lib_UART_123_45_6_UARTx_Write0:
; _data start address is: 0 (R0)
; UART_Base start address is: 4 (R1)
0x046C	0x680B    LDR	R3, [R1, #0]
0x046E	0xF3C312C0  UBFX	R2, R3, #7, #1
0x0472	0xB902    CBNZ	R2, L___Lib_UART_123_45_6_UARTx_Write1
;__Lib_UART_123_45_6.c, 37 :: 		
0x0474	0xE7FA    B	L___Lib_UART_123_45_6_UARTx_Write0
L___Lib_UART_123_45_6_UARTx_Write1:
;__Lib_UART_123_45_6.c, 38 :: 		
0x0476	0x1D0A    ADDS	R2, R1, #4
; UART_Base end address is: 4 (R1)
0x0478	0x6010    STR	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_123_45_6.c, 39 :: 		
L_end_UARTx_Write:
0x047A	0xB001    ADD	SP, SP, #4
0x047C	0x4770    BX	LR
; end of __Lib_UART_123_45_6_UARTx_Write
_UART2_Write:
;__Lib_UART_123_45_6.c, 45 :: 		
; _data start address is: 0 (R0)
0x05FC	0xB081    SUB	SP, SP, #4
0x05FE	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 46 :: 		
0x0602	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0604	0x4803    LDR	R0, [PC, #12]
0x0606	0xF7FFFF2B  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 47 :: 		
L_end_UART2_Write:
0x060A	0xF8DDE000  LDR	LR, [SP, #0]
0x060E	0xB001    ADD	SP, SP, #4
0x0610	0x4770    BX	LR
0x0612	0xBF00    NOP
0x0614	0x44004000  	USART2_SR+0
; end of _UART2_Write
_UART3_Write:
;__Lib_UART_123_45_6.c, 49 :: 		
; _data start address is: 0 (R0)
0x0634	0xB081    SUB	SP, SP, #4
0x0636	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 50 :: 		
0x063A	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x063C	0x4803    LDR	R0, [PC, #12]
0x063E	0xF7FFFF0F  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 51 :: 		
L_end_UART3_Write:
0x0642	0xF8DDE000  LDR	LR, [SP, #0]
0x0646	0xB001    ADD	SP, SP, #4
0x0648	0x4770    BX	LR
0x064A	0xBF00    NOP
0x064C	0x48004000  	USART3_SR+0
; end of _UART3_Write
_UART4_Write:
;__Lib_UART_123_45_6.c, 53 :: 		
; _data start address is: 0 (R0)
0x058C	0xB081    SUB	SP, SP, #4
0x058E	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 54 :: 		
0x0592	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x0594	0x4803    LDR	R0, [PC, #12]
0x0596	0xF7FFFF63  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 55 :: 		
L_end_UART4_Write:
0x059A	0xF8DDE000  LDR	LR, [SP, #0]
0x059E	0xB001    ADD	SP, SP, #4
0x05A0	0x4770    BX	LR
0x05A2	0xBF00    NOP
0x05A4	0x4C004000  	UART4_SR+0
; end of _UART4_Write
_UART5_Write:
;__Lib_UART_123_45_6.c, 57 :: 		
; _data start address is: 0 (R0)
0x05A8	0xB081    SUB	SP, SP, #4
0x05AA	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 58 :: 		
0x05AE	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x05B0	0x4803    LDR	R0, [PC, #12]
0x05B2	0xF7FFFF55  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 59 :: 		
L_end_UART5_Write:
0x05B6	0xF8DDE000  LDR	LR, [SP, #0]
0x05BA	0xB001    ADD	SP, SP, #4
0x05BC	0x4770    BX	LR
0x05BE	0xBF00    NOP
0x05C0	0x50004000  	UART5_SR+0
; end of _UART5_Write
_UART6_Write:
;__Lib_UART_123_45_6.c, 61 :: 		
; _data start address is: 0 (R0)
0x05C4	0xB081    SUB	SP, SP, #4
0x05C6	0xF8CDE000  STR	LR, [SP, #0]
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 62 :: 		
0x05CA	0xB281    UXTH	R1, R0
; _data end address is: 0 (R0)
0x05CC	0x4803    LDR	R0, [PC, #12]
0x05CE	0xF7FFFF47  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 63 :: 		
L_end_UART6_Write:
0x05D2	0xF8DDE000  LDR	LR, [SP, #0]
0x05D6	0xB001    ADD	SP, SP, #4
0x05D8	0x4770    BX	LR
0x05DA	0xBF00    NOP
0x05DC	0x14004001  	USART6_SR+0
; end of _UART6_Write
_init_GPIO:
;Input Capture Complete 5ch.c, 451 :: 		void init_GPIO() {
0x1870	0xB081    SUB	SP, SP, #4
0x1872	0xF8CDE000  STR	LR, [SP, #0]
;Input Capture Complete 5ch.c, 456 :: 		_GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x1876	0xF2401242  MOVW	R2, #322
0x187A	0xF2410100  MOVW	R1, #4096
;Input Capture Complete 5ch.c, 455 :: 		GPIO_Config(&GPIOE_BASE,                                                    // Pointer Encoder Channel B
0x187E	0x482E    LDR	R0, [PC, #184]
;Input Capture Complete 5ch.c, 456 :: 		_GPIO_PINMASK_12, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x1880	0xF7FEFCD6  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 459 :: 		_GPIO_PINMASK_11, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x1884	0xF2401242  MOVW	R2, #322
0x1888	0xF6400100  MOVW	R1, #2048
;Input Capture Complete 5ch.c, 458 :: 		GPIO_Config(&GPIOA_BASE,                                                    // Middle Encoder Channel B
0x188C	0x482B    LDR	R0, [PC, #172]
;Input Capture Complete 5ch.c, 459 :: 		_GPIO_PINMASK_11, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x188E	0xF7FEFCCF  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 462 :: 		_GPIO_PINMASK_15, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x1892	0xF2401242  MOVW	R2, #322
0x1896	0xF2480100  MOVW	R1, #32768
;Input Capture Complete 5ch.c, 461 :: 		GPIO_Config(&GPIOB_BASE,                                                    // Ring Encoder Channel B
0x189A	0x4829    LDR	R0, [PC, #164]
;Input Capture Complete 5ch.c, 462 :: 		_GPIO_PINMASK_15, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x189C	0xF7FEFCC8  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 465 :: 		_GPIO_PINMASK_9, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x18A0	0xF2401242  MOVW	R2, #322
0x18A4	0xF2402100  MOVW	R1, #512
;Input Capture Complete 5ch.c, 464 :: 		GPIO_Config(&GPIOD_BASE,                                                    // Pinky Encoder Channel B
0x18A8	0x4826    LDR	R0, [PC, #152]
;Input Capture Complete 5ch.c, 465 :: 		_GPIO_PINMASK_9, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x18AA	0xF7FEFCC1  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 468 :: 		_GPIO_PINMASK_11, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x18AE	0xF2401242  MOVW	R2, #322
0x18B2	0xF6400100  MOVW	R1, #2048
;Input Capture Complete 5ch.c, 467 :: 		GPIO_Config(&GPIOC_BASE,                                                    // Thumb Encoder Channel B
0x18B6	0x4824    LDR	R0, [PC, #144]
;Input Capture Complete 5ch.c, 468 :: 		_GPIO_PINMASK_11, _GPIO_CFG_DIGITAL_INPUT | _GPIO_CFG_PULL_DOWN);
0x18B8	0xF7FEFCBA  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 471 :: 		GPIO_Digital_Output(&GPIOE_BASE, _GPIO_PINMASK_10);                         // Pointer direction
0x18BC	0xF2404100  MOVW	R1, #1024
0x18C0	0x481D    LDR	R0, [PC, #116]
0x18C2	0xF7FFFE63  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 472 :: 		GPIO_Digital_Output(&GPIOB_BASE, _GPIO_PINMASK_10);                         // Middle direction
0x18C6	0xF2404100  MOVW	R1, #1024
0x18CA	0x481D    LDR	R0, [PC, #116]
0x18CC	0xF7FFFE5E  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 473 :: 		GPIO_Digital_Output(&GPIOB_BASE, _GPIO_PINMASK_13);                         // Ring direction
0x18D0	0xF2420100  MOVW	R1, #8192
0x18D4	0x481A    LDR	R0, [PC, #104]
0x18D6	0xF7FFFE59  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 474 :: 		GPIO_Digital_Output(&GPIOD_BASE, _GPIO_PINMASK_8);                          // Pinky direction
0x18DA	0xF2401100  MOVW	R1, #256
0x18DE	0x4819    LDR	R0, [PC, #100]
0x18E0	0xF7FFFE54  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 475 :: 		GPIO_Digital_Output(&GPIOC_BASE, _GPIO_PINMASK_12);                         // Thumb direction
0x18E4	0xF2410100  MOVW	R1, #4096
0x18E8	0x4817    LDR	R0, [PC, #92]
0x18EA	0xF7FFFE4F  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 476 :: 		GPIO_Digital_Output(&GPIOE_BASE, _GPIO_PINMASK_0);                          // Motor enable: may not use in this test
0x18EE	0xF2400101  MOVW	R1, #1
0x18F2	0x4811    LDR	R0, [PC, #68]
0x18F4	0xF7FFFE4A  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 479 :: 		GPIO_Digital_Output(&GPIOB_BASE, _GPIO_PINMASK_7 | _GPIO_PINMASK_9);
0x18F8	0xF2402180  MOVW	R1, #640
0x18FC	0x4810    LDR	R0, [PC, #64]
0x18FE	0xF7FFFE45  BL	_GPIO_Digital_Output+0
;Input Capture Complete 5ch.c, 482 :: 		GPIO_Digital_input(&GPIOD_BASE, _GPIO_PINMASK_3);                // Enable digital input on B3
0x1902	0xF2400108  MOVW	R1, #8
0x1906	0x480F    LDR	R0, [PC, #60]
0x1908	0xF7FFFE4E  BL	_GPIO_Digital_Input+0
;Input Capture Complete 5ch.c, 483 :: 		SYSCFGEN_bit = 1;                                        //Enable system config controller clock
0x190C	0x2301    MOVS	R3, #1
0x190E	0xB25B    SXTB	R3, R3
0x1910	0x480E    LDR	R0, [PC, #56]
0x1912	0x6003    STR	R3, [R0, #0]
;Input Capture Complete 5ch.c, 484 :: 		SYSCFG_EXTICR1bits.EXTI3 = 3;                // Map external interrupt 3 to port B
0x1914	0x2203    MOVS	R2, #3
0x1916	0x490E    LDR	R1, [PC, #56]
0x1918	0x8808    LDRH	R0, [R1, #0]
0x191A	0xF362300F  BFI	R0, R2, #12, #4
0x191E	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 485 :: 		EXTI_RTSRbits.TR3 = 1;                                // Set interrupt on rising edge
0x1920	0x480C    LDR	R0, [PC, #48]
0x1922	0x6003    STR	R3, [R0, #0]
;Input Capture Complete 5ch.c, 486 :: 		EXTI_IMRbits.MR3 = 1;                                // Unmask bit 3 to enable external interrupt on line 3
0x1924	0x480C    LDR	R0, [PC, #48]
0x1926	0x6003    STR	R3, [R0, #0]
;Input Capture Complete 5ch.c, 487 :: 		NVIC_IntEnable(IVT_INT_EXTI3);     //Enable external interrupt B3 for EMG override button
0x1928	0xF2400019  MOVW	R0, #25
0x192C	0xF7FFFDF2  BL	_NVIC_IntEnable+0
;Input Capture Complete 5ch.c, 489 :: 		}
L_end_init_GPIO:
0x1930	0xF8DDE000  LDR	LR, [SP, #0]
0x1934	0xB001    ADD	SP, SP, #4
0x1936	0x4770    BX	LR
0x1938	0x10004002  	GPIOE_BASE+0
0x193C	0x00004002  	GPIOA_BASE+0
0x1940	0x04004002  	GPIOB_BASE+0
0x1944	0x0C004002  	GPIOD_BASE+0
0x1948	0x08004002  	GPIOC_BASE+0
0x194C	0x08B84247  	SYSCFGEN_bit+0
0x1950	0x38084001  	SYSCFG_EXTICR1bits+0
0x1954	0x810C4227  	EXTI_RTSRbits+0
0x1958	0x800C4227  	EXTI_IMRbits+0
; end of _init_GPIO
_NVIC_IntEnable:
;__Lib_System_4XX.c, 171 :: 		
; ivt start address is: 0 (R0)
0x1514	0xB081    SUB	SP, SP, #4
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System_4XX.c, 183 :: 		
0x1516	0x2804    CMP	R0, #4
0x1518	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System_4XX.c, 188 :: 		
0x151A	0x4919    LDR	R1, [PC, #100]
0x151C	0x6809    LDR	R1, [R1, #0]
0x151E	0xF4413280  ORR	R2, R1, #65536
0x1522	0x4917    LDR	R1, [PC, #92]
0x1524	0x600A    STR	R2, [R1, #0]
;__Lib_System_4XX.c, 189 :: 		
0x1526	0xE028    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System_4XX.c, 190 :: 		
; ivt start address is: 0 (R0)
0x1528	0x2805    CMP	R0, #5
0x152A	0xD106    BNE	L_NVIC_IntEnable8
; ivt end address is: 0 (R0)
;__Lib_System_4XX.c, 195 :: 		
0x152C	0x4914    LDR	R1, [PC, #80]
0x152E	0x6809    LDR	R1, [R1, #0]
0x1530	0xF4413200  ORR	R2, R1, #131072
0x1534	0x4912    LDR	R1, [PC, #72]
0x1536	0x600A    STR	R2, [R1, #0]
;__Lib_System_4XX.c, 196 :: 		
0x1538	0xE01F    B	L_NVIC_IntEnable9
L_NVIC_IntEnable8:
;__Lib_System_4XX.c, 197 :: 		
; ivt start address is: 0 (R0)
0x153A	0x2806    CMP	R0, #6
0x153C	0xD106    BNE	L_NVIC_IntEnable10
; ivt end address is: 0 (R0)
;__Lib_System_4XX.c, 202 :: 		
0x153E	0x4910    LDR	R1, [PC, #64]
0x1540	0x6809    LDR	R1, [R1, #0]
0x1542	0xF4412280  ORR	R2, R1, #262144
0x1546	0x490E    LDR	R1, [PC, #56]
0x1548	0x600A    STR	R2, [R1, #0]
;__Lib_System_4XX.c, 203 :: 		
0x154A	0xE016    B	L_NVIC_IntEnable11
L_NVIC_IntEnable10:
;__Lib_System_4XX.c, 204 :: 		
; ivt start address is: 0 (R0)
0x154C	0x280F    CMP	R0, #15
0x154E	0xD106    BNE	L_NVIC_IntEnable12
; ivt end address is: 0 (R0)
;__Lib_System_4XX.c, 209 :: 		
0x1550	0x490C    LDR	R1, [PC, #48]
0x1552	0x6809    LDR	R1, [R1, #0]
0x1554	0xF0410202  ORR	R2, R1, #2
0x1558	0x490A    LDR	R1, [PC, #40]
0x155A	0x600A    STR	R2, [R1, #0]
;__Lib_System_4XX.c, 210 :: 		
0x155C	0xE00D    B	L_NVIC_IntEnable13
L_NVIC_IntEnable12:
;__Lib_System_4XX.c, 211 :: 		
; ivt start address is: 0 (R0)
0x155E	0x2810    CMP	R0, #16
0x1560	0xD30B    BCC	L_NVIC_IntEnable14
;__Lib_System_4XX.c, 216 :: 		
0x1562	0xF2A00410  SUBW	R4, R0, #16
; ivt end address is: 0 (R0)
0x1566	0x0961    LSRS	R1, R4, #5
0x1568	0x008A    LSLS	R2, R1, #2
0x156A	0x4907    LDR	R1, [PC, #28]
0x156C	0x188B    ADDS	R3, R1, R2
;__Lib_System_4XX.c, 217 :: 		
0x156E	0xF004021F  AND	R2, R4, #31
0x1572	0xF04F0101  MOV	R1, #1
0x1576	0x4091    LSLS	R1, R2
0x1578	0x6019    STR	R1, [R3, #0]
;__Lib_System_4XX.c, 218 :: 		
L_NVIC_IntEnable14:
L_NVIC_IntEnable13:
L_NVIC_IntEnable11:
L_NVIC_IntEnable9:
L_NVIC_IntEnable7:
;__Lib_System_4XX.c, 219 :: 		
L_end_NVIC_IntEnable:
0x157A	0xB001    ADD	SP, SP, #4
0x157C	0x4770    BX	LR
0x157E	0xBF00    NOP
0x1580	0xED24E000  	SCB_SHCRS+0
0x1584	0xE010E000  	STK_CTRL+0
0x1588	0xE100E000  	NVIC_ISER0+0
; end of _NVIC_IntEnable
_GPIO_Digital_Output:
;__Lib_GPIO_32F4xx.c, 233 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x158C	0xB081    SUB	SP, SP, #4
0x158E	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 234 :: 		
0x1592	0x4A04    LDR	R2, [PC, #16]
0x1594	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x1596	0xF7FEFE4B  BL	_GPIO_Config+0
;__Lib_GPIO_32F4xx.c, 235 :: 		
L_end_GPIO_Digital_Output:
0x159A	0xF8DDE000  LDR	LR, [SP, #0]
0x159E	0xB001    ADD	SP, SP, #4
0x15A0	0x4770    BX	LR
0x15A2	0xBF00    NOP
0x15A4	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Digital_Input:
;__Lib_GPIO_32F4xx.c, 237 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x15A8	0xB081    SUB	SP, SP, #4
0x15AA	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 238 :: 		
0x15AE	0xF04F0242  MOV	R2, #66
0x15B2	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x15B4	0xF7FEFE3C  BL	_GPIO_Config+0
;__Lib_GPIO_32F4xx.c, 239 :: 		
L_end_GPIO_Digital_Input:
0x15B8	0xF8DDE000  LDR	LR, [SP, #0]
0x15BC	0xB001    ADD	SP, SP, #4
0x15BE	0x4770    BX	LR
; end of _GPIO_Digital_Input
_init_pointer_PWM:
;Input Capture Complete 5ch.c, 493 :: 		void init_pointer_PWM(unsigned int dutyCycle) {
; dutyCycle start address is: 0 (R0)
0x1CF4	0xB081    SUB	SP, SP, #4
0x1CF6	0xF8CDE000  STR	LR, [SP, #0]
0x1CFA	0xB285    UXTH	R5, R0
; dutyCycle end address is: 0 (R0)
; dutyCycle start address is: 20 (R5)
;Input Capture Complete 5ch.c, 495 :: 		PWM_PERIOD_TIM1 = PWM_TIM1_Init(PWM_FREQ_HZ);                                   // Set PWM base frequency to 100 Hz
0x1CFC	0x490C    LDR	R1, [PC, #48]
0x1CFE	0x6809    LDR	R1, [R1, #0]
0x1D00	0x4608    MOV	R0, R1
0x1D02	0xF7FFFBB3  BL	_PWM_TIM1_Init+0
0x1D06	0x490B    LDR	R1, [PC, #44]
0x1D08	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 496 :: 		PWM_TIM1_Set_Duty(dutyCycle*(PWM_PERIOD_TIM1/100), _PWM_NON_INVERTED, POINTER_PWM);    // Set duty on Timer 1, channel 1
0x1D0A	0x2164    MOVS	R1, #100
0x1D0C	0xFBB0F1F1  UDIV	R1, R0, R1
0x1D10	0xB289    UXTH	R1, R1
0x1D12	0x4369    MULS	R1, R5, R1
; dutyCycle end address is: 20 (R5)
0x1D14	0x2200    MOVS	R2, #0
0x1D16	0xB288    UXTH	R0, R1
0x1D18	0x2100    MOVS	R1, #0
0x1D1A	0xF7FFFBB5  BL	_PWM_TIM1_Set_Duty+0
;Input Capture Complete 5ch.c, 497 :: 		PWM_TIM1_Start(_PWM_CHANNEL1, &_GPIO_MODULE_TIM1_CH1_PE9);                 // Start PWM
0x1D1E	0x4906    LDR	R1, [PC, #24]
0x1D20	0x2000    MOVS	R0, #0
0x1D22	0xF7FFFC4D  BL	_PWM_TIM1_Start+0
;Input Capture Complete 5ch.c, 498 :: 		}
L_end_init_pointer_PWM:
0x1D26	0xF8DDE000  LDR	LR, [SP, #0]
0x1D2A	0xB001    ADD	SP, SP, #4
0x1D2C	0x4770    BX	LR
0x1D2E	0xBF00    NOP
0x1D30	0x00402000  	_PWM_FREQ_HZ+0
0x1D34	0x01FC2000  	_PWM_PERIOD_TIM1+0
0x1D38	0x2B640000  	__GPIO_MODULE_TIM1_CH1_PE9+0
; end of _init_pointer_PWM
_PWM_TIM1_Init:
;__Lib_PWM_1234589_12_10_11_13_14.c, 194 :: 		
; freq_hz start address is: 0 (R0)
0x146C	0xB081    SUB	SP, SP, #4
0x146E	0xF8CDE000  STR	LR, [SP, #0]
; freq_hz end address is: 0 (R0)
; freq_hz start address is: 0 (R0)
;__Lib_PWM_1234589_12_10_11_13_14.c, 195 :: 		
0x1472	0x4601    MOV	R1, R0
; freq_hz end address is: 0 (R0)
0x1474	0x4803    LDR	R0, [PC, #12]
0x1476	0xF7FFF951  BL	__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init+0
;__Lib_PWM_1234589_12_10_11_13_14.c, 196 :: 		
L_end_PWM_TIM1_Init:
0x147A	0xF8DDE000  LDR	LR, [SP, #0]
0x147E	0xB001    ADD	SP, SP, #4
0x1480	0x4770    BX	LR
0x1482	0xBF00    NOP
0x1484	0x00004001  	TIM1_CR1+0
; end of _PWM_TIM1_Init
__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init:
;__Lib_PWM_1234589_12_10_11_13_14.c, 35 :: 		
; freq_hz start address is: 4 (R1)
; PWM_Base start address is: 0 (R0)
0x071C	0xB081    SUB	SP, SP, #4
0x071E	0xF8CDE000  STR	LR, [SP, #0]
0x0722	0x460C    MOV	R4, R1
0x0724	0x4601    MOV	R1, R0
; freq_hz end address is: 4 (R1)
; PWM_Base end address is: 0 (R0)
; PWM_Base start address is: 4 (R1)
; freq_hz start address is: 16 (R4)
;__Lib_PWM_1234589_12_10_11_13_14.c, 39 :: 		
0x0726	0xF06F02FF  MVN	R2, #255
0x072A	0xEA010202  AND	R2, R1, R2, LSL #0
; _PWM_Base start address is: 0 (R0)
0x072E	0x4610    MOV	R0, R2
;__Lib_PWM_1234589_12_10_11_13_14.c, 41 :: 		
0x0730	0xE03B    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init0
; _PWM_Base end address is: 0 (R0)
;__Lib_PWM_1234589_12_10_11_13_14.c, 43 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init2:
;__Lib_PWM_1234589_12_10_11_13_14.c, 44 :: 		
0x0732	0x2301    MOVS	R3, #1
0x0734	0xB25B    SXTB	R3, R3
0x0736	0x4A41    LDR	R2, [PC, #260]
0x0738	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 45 :: 		
0x073A	0xE05A    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 48 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init3:
;__Lib_PWM_1234589_12_10_11_13_14.c, 49 :: 		
0x073C	0x2301    MOVS	R3, #1
0x073E	0xB25B    SXTB	R3, R3
0x0740	0x4A3F    LDR	R2, [PC, #252]
0x0742	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 50 :: 		
0x0744	0xE055    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 53 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init4:
;__Lib_PWM_1234589_12_10_11_13_14.c, 54 :: 		
0x0746	0x2301    MOVS	R3, #1
0x0748	0xB25B    SXTB	R3, R3
0x074A	0x4A3E    LDR	R2, [PC, #248]
0x074C	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 55 :: 		
0x074E	0xE050    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 58 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init5:
;__Lib_PWM_1234589_12_10_11_13_14.c, 59 :: 		
0x0750	0x2301    MOVS	R3, #1
0x0752	0xB25B    SXTB	R3, R3
0x0754	0x4A3C    LDR	R2, [PC, #240]
0x0756	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 60 :: 		
0x0758	0xE04B    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 63 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init6:
;__Lib_PWM_1234589_12_10_11_13_14.c, 64 :: 		
0x075A	0x2301    MOVS	R3, #1
0x075C	0xB25B    SXTB	R3, R3
0x075E	0x4A3B    LDR	R2, [PC, #236]
0x0760	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 65 :: 		
0x0762	0xE046    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 68 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init7:
;__Lib_PWM_1234589_12_10_11_13_14.c, 69 :: 		
0x0764	0x2301    MOVS	R3, #1
0x0766	0xB25B    SXTB	R3, R3
0x0768	0x4A39    LDR	R2, [PC, #228]
0x076A	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 70 :: 		
0x076C	0xE041    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 73 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init8:
;__Lib_PWM_1234589_12_10_11_13_14.c, 74 :: 		
0x076E	0x2301    MOVS	R3, #1
0x0770	0xB25B    SXTB	R3, R3
0x0772	0x4A38    LDR	R2, [PC, #224]
0x0774	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 75 :: 		
0x0776	0xE03C    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 78 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init9:
;__Lib_PWM_1234589_12_10_11_13_14.c, 79 :: 		
0x0778	0x2301    MOVS	R3, #1
0x077A	0xB25B    SXTB	R3, R3
0x077C	0x4A36    LDR	R2, [PC, #216]
0x077E	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 80 :: 		
0x0780	0xE037    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 83 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init10:
;__Lib_PWM_1234589_12_10_11_13_14.c, 84 :: 		
0x0782	0x2301    MOVS	R3, #1
0x0784	0xB25B    SXTB	R3, R3
0x0786	0x4A35    LDR	R2, [PC, #212]
0x0788	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 85 :: 		
0x078A	0xE032    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 88 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init11:
;__Lib_PWM_1234589_12_10_11_13_14.c, 89 :: 		
0x078C	0x2301    MOVS	R3, #1
0x078E	0xB25B    SXTB	R3, R3
0x0790	0x4A33    LDR	R2, [PC, #204]
0x0792	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 90 :: 		
0x0794	0xE02D    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 93 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init12:
;__Lib_PWM_1234589_12_10_11_13_14.c, 94 :: 		
0x0796	0x2301    MOVS	R3, #1
0x0798	0xB25B    SXTB	R3, R3
0x079A	0x4A32    LDR	R2, [PC, #200]
0x079C	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 95 :: 		
0x079E	0xE028    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 98 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init13:
;__Lib_PWM_1234589_12_10_11_13_14.c, 99 :: 		
0x07A0	0x2301    MOVS	R3, #1
0x07A2	0xB25B    SXTB	R3, R3
0x07A4	0x4A30    LDR	R2, [PC, #192]
0x07A6	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 100 :: 		
0x07A8	0xE023    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1
;__Lib_PWM_1234589_12_10_11_13_14.c, 102 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init0:
; _PWM_Base start address is: 0 (R0)
0x07AA	0x4A30    LDR	R2, [PC, #192]
0x07AC	0x4290    CMP	R0, R2
0x07AE	0xD0C0    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init2
0x07B0	0xF1B04F80  CMP	R0, #1073741824
0x07B4	0xD0C2    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init3
0x07B6	0x4A2E    LDR	R2, [PC, #184]
0x07B8	0x4290    CMP	R0, R2
0x07BA	0xD0C4    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init4
0x07BC	0x4A2D    LDR	R2, [PC, #180]
0x07BE	0x4290    CMP	R0, R2
0x07C0	0xD0C6    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init5
0x07C2	0x4A2D    LDR	R2, [PC, #180]
0x07C4	0x4290    CMP	R0, R2
0x07C6	0xD0C8    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init6
0x07C8	0x4A2C    LDR	R2, [PC, #176]
0x07CA	0x4290    CMP	R0, R2
0x07CC	0xD0CA    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init7
0x07CE	0x4A2C    LDR	R2, [PC, #176]
0x07D0	0x4290    CMP	R0, R2
0x07D2	0xD0CC    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init8
0x07D4	0x4A2B    LDR	R2, [PC, #172]
0x07D6	0x4290    CMP	R0, R2
0x07D8	0xD0CE    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init9
0x07DA	0x4A2B    LDR	R2, [PC, #172]
0x07DC	0x4290    CMP	R0, R2
0x07DE	0xD0D0    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init10
0x07E0	0x4A2A    LDR	R2, [PC, #168]
0x07E2	0x4290    CMP	R0, R2
0x07E4	0xD0D2    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init11
0x07E6	0x4A2A    LDR	R2, [PC, #168]
0x07E8	0x4290    CMP	R0, R2
0x07EA	0xD0D4    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init12
0x07EC	0x4A29    LDR	R2, [PC, #164]
0x07EE	0x4290    CMP	R0, R2
0x07F0	0xD0D6    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init13
; _PWM_Base end address is: 0 (R0)
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init1:
;__Lib_PWM_1234589_12_10_11_13_14.c, 104 :: 		
0x07F2	0xF7FFFE45  BL	_Get_Fosc_kHz+0
; clk start address is: 0 (R0)
;__Lib_PWM_1234589_12_10_11_13_14.c, 106 :: 		
0x07F6	0x680B    LDR	R3, [R1, #0]
0x07F8	0xF06F0210  MVN	R2, #16
0x07FC	0xEA030202  AND	R2, R3, R2, LSL #0
0x0800	0x600A    STR	R2, [R1, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 108 :: 		
0x0802	0xF24032E8  MOVW	R2, #1000
0x0806	0x4342    MULS	R2, R0, R2
; clk end address is: 0 (R0)
0x0808	0xFBB2F3F4  UDIV	R3, R2, R4
; freq_hz end address is: 16 (R4)
; per_reg start address is: 0 (R0)
0x080C	0x4618    MOV	R0, R3
;__Lib_PWM_1234589_12_10_11_13_14.c, 109 :: 		
0x080E	0xF64F72FF  MOVW	R2, #65535
0x0812	0xFBB3F2F2  UDIV	R2, R3, R2
; prescaler start address is: 16 (R4)
0x0816	0x4614    MOV	R4, R2
;__Lib_PWM_1234589_12_10_11_13_14.c, 110 :: 		
0x0818	0xF2010328  ADDW	R3, R1, #40
0x081C	0xB292    UXTH	R2, R2
0x081E	0x601A    STR	R2, [R3, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 112 :: 		
0x0820	0x1C62    ADDS	R2, R4, #1
; prescaler end address is: 16 (R4)
0x0822	0xFBB0F2F2  UDIV	R2, R0, R2
0x0826	0x4610    MOV	R0, R2
;__Lib_PWM_1234589_12_10_11_13_14.c, 114 :: 		
0x0828	0xF201032C  ADDW	R3, R1, #44
; PWM_Base end address is: 4 (R1)
0x082C	0xB292    UXTH	R2, R2
0x082E	0x601A    STR	R2, [R3, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 116 :: 		
0x0830	0xB280    UXTH	R0, R0
; per_reg end address is: 0 (R0)
;__Lib_PWM_1234589_12_10_11_13_14.c, 117 :: 		
L_end_PWM_TIMx_Init:
0x0832	0xF8DDE000  LDR	LR, [SP, #0]
0x0836	0xB001    ADD	SP, SP, #4
0x0838	0x4770    BX	LR
0x083A	0xBF00    NOP
0x083C	0x08804247  	RCC_APB2ENR+0
0x0840	0x08004247  	RCC_APB1ENR+0
0x0844	0x08044247  	RCC_APB1ENR+0
0x0848	0x08084247  	RCC_APB1ENR+0
0x084C	0x080C4247  	RCC_APB1ENR+0
0x0850	0x08844247  	RCC_APB2ENR+0
0x0854	0x08C04247  	RCC_APB2ENR+0
0x0858	0x08C44247  	RCC_APB2ENR+0
0x085C	0x08C84247  	RCC_APB2ENR+0
0x0860	0x08184247  	RCC_APB1ENR+0
0x0864	0x081C4247  	RCC_APB1ENR+0
0x0868	0x08204247  	RCC_APB1ENR+0
0x086C	0x00004001  	#1073807360
0x0870	0x04004000  	#1073742848
0x0874	0x08004000  	#1073743872
0x0878	0x0C004000  	#1073744896
0x087C	0x04004001  	#1073808384
0x0880	0x40004001  	#1073823744
0x0884	0x44004001  	#1073824768
0x0888	0x48004001  	#1073825792
0x088C	0x18004000  	#1073747968
0x0890	0x1C004000  	#1073748992
0x0894	0x20004000  	#1073750016
; end of __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init
_PWM_TIM1_Set_Duty:
;__Lib_PWM_1234589_12_10_11_13_14.c, 198 :: 		
; channel start address is: 8 (R2)
; inverted start address is: 4 (R1)
; duty_ratio start address is: 0 (R0)
0x1488	0xB081    SUB	SP, SP, #4
0x148A	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 8 (R2)
; inverted end address is: 4 (R1)
; duty_ratio end address is: 0 (R0)
; duty_ratio start address is: 0 (R0)
; inverted start address is: 4 (R1)
; channel start address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 199 :: 		
0x148E	0xB2D3    UXTB	R3, R2
; channel end address is: 8 (R2)
0x1490	0xB2CA    UXTB	R2, R1
; inverted end address is: 4 (R1)
0x1492	0xB281    UXTH	R1, R0
; duty_ratio end address is: 0 (R0)
0x1494	0x4803    LDR	R0, [PC, #12]
0x1496	0xF7FFFAC1  BL	__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty+0
;__Lib_PWM_1234589_12_10_11_13_14.c, 200 :: 		
L_end_PWM_TIM1_Set_Duty:
0x149A	0xF8DDE000  LDR	LR, [SP, #0]
0x149E	0xB001    ADD	SP, SP, #4
0x14A0	0x4770    BX	LR
0x14A2	0xBF00    NOP
0x14A4	0x00004001  	TIM1_CR1+0
; end of _PWM_TIM1_Set_Duty
__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty:
;__Lib_PWM_1234589_12_10_11_13_14.c, 121 :: 		
; channel start address is: 12 (R3)
; inverted start address is: 8 (R2)
; duty_ratio start address is: 4 (R1)
; PWM_Base start address is: 0 (R0)
0x0A1C	0xB081    SUB	SP, SP, #4
0x0A1E	0xB2D5    UXTB	R5, R2
; channel end address is: 12 (R3)
; inverted end address is: 8 (R2)
; duty_ratio end address is: 4 (R1)
; PWM_Base end address is: 0 (R0)
; PWM_Base start address is: 0 (R0)
; duty_ratio start address is: 4 (R1)
; inverted start address is: 20 (R5)
; channel start address is: 12 (R3)
;__Lib_PWM_1234589_12_10_11_13_14.c, 126 :: 		
0x0A20	0xF2000420  ADDW	R4, R0, #32
0x0A24	0x6822    LDR	R2, [R4, #0]
; tmpLong start address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 127 :: 		
0x0A26	0x2D01    CMP	R5, #1
0x0A28	0xD108    BNE	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty14
; inverted end address is: 20 (R5)
;__Lib_PWM_1234589_12_10_11_13_14.c, 128 :: 		
0x0A2A	0x009C    LSLS	R4, R3, #2
0x0A2C	0xB224    SXTH	R4, R4
0x0A2E	0x1C65    ADDS	R5, R4, #1
0x0A30	0xB22D    SXTH	R5, R5
0x0A32	0xF04F0401  MOV	R4, #1
0x0A36	0x40AC    LSLS	R4, R5
0x0A38	0x4322    ORRS	R2, R4
0x0A3A	0xE008    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty15
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty14:
;__Lib_PWM_1234589_12_10_11_13_14.c, 130 :: 		
0x0A3C	0x009C    LSLS	R4, R3, #2
0x0A3E	0xB224    SXTH	R4, R4
0x0A40	0x1C65    ADDS	R5, R4, #1
0x0A42	0xB22D    SXTH	R5, R5
0x0A44	0xF04F0401  MOV	R4, #1
0x0A48	0x40AC    LSLS	R4, R5
0x0A4A	0x43E4    MVN	R4, R4
0x0A4C	0x4022    ANDS	R2, R4
; tmpLong end address is: 8 (R2)
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty15:
;__Lib_PWM_1234589_12_10_11_13_14.c, 131 :: 		
; tmpLong start address is: 8 (R2)
0x0A4E	0xF2000420  ADDW	R4, R0, #32
0x0A52	0x6022    STR	R2, [R4, #0]
; tmpLong end address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 134 :: 		
0x0A54	0xF2000534  ADDW	R5, R0, #52
; PWM_Base end address is: 0 (R0)
0x0A58	0x009C    LSLS	R4, R3, #2
; channel end address is: 12 (R3)
0x0A5A	0x192C    ADDS	R4, R5, R4
0x0A5C	0x6021    STR	R1, [R4, #0]
; duty_ratio end address is: 4 (R1)
;__Lib_PWM_1234589_12_10_11_13_14.c, 135 :: 		
L_end_PWM_TIMx_Set_Duty:
0x0A5E	0xB001    ADD	SP, SP, #4
0x0A60	0x4770    BX	LR
; end of __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty
_PWM_TIM1_Start:
;__Lib_PWM_1234589_12_10_11_13_14.c, 202 :: 		
; module start address is: 4 (R1)
; channel start address is: 0 (R0)
0x15C0	0xB081    SUB	SP, SP, #4
0x15C2	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 4 (R1)
; channel end address is: 0 (R0)
; channel start address is: 0 (R0)
; module start address is: 4 (R1)
;__Lib_PWM_1234589_12_10_11_13_14.c, 203 :: 		
0x15C6	0x460A    MOV	R2, R1
; module end address is: 4 (R1)
0x15C8	0xB2C1    UXTB	R1, R0
; channel end address is: 0 (R0)
0x15CA	0x4803    LDR	R0, [PC, #12]
0x15CC	0xF7FFF9DE  BL	__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start+0
;__Lib_PWM_1234589_12_10_11_13_14.c, 204 :: 		
L_end_PWM_TIM1_Start:
0x15D0	0xF8DDE000  LDR	LR, [SP, #0]
0x15D4	0xB001    ADD	SP, SP, #4
0x15D6	0x4770    BX	LR
0x15D8	0x00004001  	TIM1_CR1+0
; end of _PWM_TIM1_Start
__Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start:
;__Lib_PWM_1234589_12_10_11_13_14.c, 139 :: 		
; module start address is: 8 (R2)
; channel start address is: 4 (R1)
; PWM_Base start address is: 0 (R0)
0x098C	0xB083    SUB	SP, SP, #12
0x098E	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 8 (R2)
; channel end address is: 4 (R1)
; PWM_Base end address is: 0 (R0)
; PWM_Base start address is: 0 (R0)
; channel start address is: 4 (R1)
; module start address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 142 :: 		
0x0992	0xF88D1004  STRB	R1, [SP, #4]
; module end address is: 8 (R2)
0x0996	0x9002    STR	R0, [SP, #8]
0x0998	0x4610    MOV	R0, R2
0x099A	0xF7FFFE9B  BL	_GPIO_Alternate_Function_Enable+0
0x099E	0x9802    LDR	R0, [SP, #8]
0x09A0	0xF89D1004  LDRB	R1, [SP, #4]
;__Lib_PWM_1234589_12_10_11_13_14.c, 145 :: 		
0x09A4	0xF2000320  ADDW	R3, R0, #32
0x09A8	0x681A    LDR	R2, [R3, #0]
; tmpLong start address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 146 :: 		
0x09AA	0x008C    LSLS	R4, R1, #2
0x09AC	0xB224    SXTH	R4, R4
0x09AE	0xF04F0301  MOV	R3, #1
0x09B2	0x40A3    LSLS	R3, R4
0x09B4	0x431A    ORRS	R2, R3
;__Lib_PWM_1234589_12_10_11_13_14.c, 147 :: 		
0x09B6	0xF2000320  ADDW	R3, R0, #32
0x09BA	0x601A    STR	R2, [R3, #0]
; tmpLong end address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 150 :: 		
0x09BC	0xF2000444  ADDW	R4, R0, #68
0x09C0	0x6823    LDR	R3, [R4, #0]
0x09C2	0xF4434300  ORR	R3, R3, #32768
0x09C6	0x6023    STR	R3, [R4, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 152 :: 		
0x09C8	0xF2000218  ADDW	R2, R0, #24
; tmpLongPtr start address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 154 :: 		
0x09CC	0x2901    CMP	R1, #1
0x09CE	0xD901    BLS	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start19
;__Lib_PWM_1234589_12_10_11_13_14.c, 155 :: 		
0x09D0	0x1D12    ADDS	R2, R2, #4
; tmpLongPtr end address is: 8 (R2)
0x09D2	0xE7FF    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start16
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start19:
;__Lib_PWM_1234589_12_10_11_13_14.c, 154 :: 		
;__Lib_PWM_1234589_12_10_11_13_14.c, 155 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start16:
;__Lib_PWM_1234589_12_10_11_13_14.c, 157 :: 		
; tmpLongPtr start address is: 8 (R2)
0x09D4	0x084B    LSRS	R3, R1, #1
0x09D6	0xB2DB    UXTB	R3, R3
0x09D8	0x005B    LSLS	R3, R3, #1
0x09DA	0xB21B    SXTH	R3, R3
0x09DC	0x428B    CMP	R3, R1
0x09DE	0xD00A    BEQ	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start17
; channel end address is: 4 (R1)
;__Lib_PWM_1234589_12_10_11_13_14.c, 159 :: 		
0x09E0	0x6814    LDR	R4, [R2, #0]
0x09E2	0xF46F53D8  MVN	R3, #6912
0x09E6	0xEA040303  AND	R3, R4, R3, LSL #0
0x09EA	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 161 :: 		
0x09EC	0x6813    LDR	R3, [R2, #0]
0x09EE	0xF44343C0  ORR	R3, R3, #24576
0x09F2	0x6013    STR	R3, [R2, #0]
; tmpLongPtr end address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 162 :: 		
0x09F4	0xE009    B	L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start18
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start17:
;__Lib_PWM_1234589_12_10_11_13_14.c, 165 :: 		
; tmpLongPtr start address is: 8 (R2)
0x09F6	0x6814    LDR	R4, [R2, #0]
0x09F8	0xF06F031B  MVN	R3, #27
0x09FC	0xEA040303  AND	R3, R4, R3, LSL #0
0x0A00	0x6013    STR	R3, [R2, #0]
;__Lib_PWM_1234589_12_10_11_13_14.c, 167 :: 		
0x0A02	0x6813    LDR	R3, [R2, #0]
0x0A04	0xF0430360  ORR	R3, R3, #96
0x0A08	0x6013    STR	R3, [R2, #0]
; tmpLongPtr end address is: 8 (R2)
;__Lib_PWM_1234589_12_10_11_13_14.c, 168 :: 		
L___Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start18:
;__Lib_PWM_1234589_12_10_11_13_14.c, 171 :: 		
0x0A0A	0x6803    LDR	R3, [R0, #0]
0x0A0C	0xF0430301  ORR	R3, R3, #1
0x0A10	0x6003    STR	R3, [R0, #0]
; PWM_Base end address is: 0 (R0)
;__Lib_PWM_1234589_12_10_11_13_14.c, 172 :: 		
L_end_PWM_TIMx_Start:
0x0A12	0xF8DDE000  LDR	LR, [SP, #0]
0x0A16	0xB003    ADD	SP, SP, #12
0x0A18	0x4770    BX	LR
; end of __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start
_InitTimer10:
;Input Capture Complete 5ch.c, 755 :: 		void InitTimer10(){
0x1990	0xB081    SUB	SP, SP, #4
0x1992	0xF8CDE000  STR	LR, [SP, #0]
;Input Capture Complete 5ch.c, 756 :: 		RCC_APB2ENR.TIM10EN = 1;                       // Enable clock gating for timer 10
0x1996	0x2101    MOVS	R1, #1
0x1998	0xB249    SXTB	R1, R1
0x199A	0x480D    LDR	R0, [PC, #52]
0x199C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 757 :: 		TIM10_CR1.CEN = 0;                              // Disable timer/counter
0x199E	0x2100    MOVS	R1, #0
0x19A0	0xB249    SXTB	R1, R1
0x19A2	0x480C    LDR	R0, [PC, #48]
0x19A4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 758 :: 		TIM10_PSC = 7874;                 // Set timer 10 prescaler
0x19A6	0xF64161C2  MOVW	R1, #7874
0x19AA	0x480B    LDR	R0, [PC, #44]
0x19AC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 759 :: 		TIM10_ARR = 63999;              // Set timer 10 overflow value
0x19AE	0xF64F11FF  MOVW	R1, #63999
0x19B2	0x480A    LDR	R0, [PC, #40]
0x19B4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 760 :: 		NVIC_IntEnable(IVT_INT_TIM1_UP_TIM10); // Enable timer 10 interrupt
0x19B6	0xF2400029  MOVW	R0, #41
0x19BA	0xF7FFFDAB  BL	_NVIC_IntEnable+0
;Input Capture Complete 5ch.c, 761 :: 		TIM10_CR1.CEN = 1;                              // Enable timer/counter
0x19BE	0x2101    MOVS	R1, #1
0x19C0	0xB249    SXTB	R1, R1
0x19C2	0x4804    LDR	R0, [PC, #16]
0x19C4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 762 :: 		}
L_end_InitTimer10:
0x19C6	0xF8DDE000  LDR	LR, [SP, #0]
0x19CA	0xB001    ADD	SP, SP, #4
0x19CC	0x4770    BX	LR
0x19CE	0xBF00    NOP
0x19D0	0x08C44247  	RCC_APB2ENR+0
0x19D4	0x80004228  	TIM10_CR1+0
0x19D8	0x44284001  	TIM10_PSC+0
0x19DC	0x442C4001  	TIM10_ARR+0
; end of _InitTimer10
_strcpy:
;__Lib_CString.c, 133 :: 		
; from start address is: 4 (R1)
; to start address is: 0 (R0)
0x1ABC	0xB081    SUB	SP, SP, #4
0x1ABE	0x9100    STR	R1, [SP, #0]
0x1AC0	0x4601    MOV	R1, R0
0x1AC2	0x9800    LDR	R0, [SP, #0]
; from end address is: 4 (R1)
; to end address is: 0 (R0)
; to start address is: 4 (R1)
; from start address is: 0 (R0)
;__Lib_CString.c, 136 :: 		
; cp start address is: 12 (R3)
0x1AC4	0x460B    MOV	R3, R1
; cp end address is: 12 (R3)
; to end address is: 4 (R1)
;__Lib_CString.c, 137 :: 		
L_strcpy34:
; cp start address is: 20 (R5)
; cp start address is: 12 (R3)
; from start address is: 0 (R0)
; to start address is: 4 (R1)
0x1AC6	0x461C    MOV	R4, R3
0x1AC8	0x1C5A    ADDS	R2, R3, #1
; cp end address is: 12 (R3)
; cp start address is: 20 (R5)
0x1ACA	0x4615    MOV	R5, R2
; cp end address is: 20 (R5)
0x1ACC	0x4603    MOV	R3, R0
0x1ACE	0x1C42    ADDS	R2, R0, #1
0x1AD0	0x4610    MOV	R0, R2
; from end address is: 0 (R0)
0x1AD2	0x781A    LDRB	R2, [R3, #0]
0x1AD4	0x7022    STRB	R2, [R4, #0]
0x1AD6	0x7822    LDRB	R2, [R4, #0]
0x1AD8	0xB10A    CBZ	R2, L_strcpy35
; cp end address is: 20 (R5)
; from end address is: 0 (R0)
;__Lib_CString.c, 138 :: 		
; from start address is: 0 (R0)
; cp start address is: 20 (R5)
; cp end address is: 20 (R5)
; from end address is: 0 (R0)
0x1ADA	0x462B    MOV	R3, R5
0x1ADC	0xE7F3    B	L_strcpy34
L_strcpy35:
;__Lib_CString.c, 139 :: 		
0x1ADE	0x4608    MOV	R0, R1
; to end address is: 4 (R1)
;__Lib_CString.c, 140 :: 		
L_end_strcpy:
0x1AE0	0xB001    ADD	SP, SP, #4
0x1AE2	0x4770    BX	LR
; end of _strcpy
_init_finger:
;Input Capture Complete 5ch.c, 502 :: 		void init_finger(struct finger *fngr)
; fngr start address is: 0 (R0)
0x19E0	0xB081    SUB	SP, SP, #4
0x19E2	0xF8CDE000  STR	LR, [SP, #0]
0x19E6	0x4684    MOV	R12, R0
; fngr end address is: 0 (R0)
; fngr start address is: 48 (R12)
;Input Capture Complete 5ch.c, 504 :: 		fngr->position_actual = 0;
0x19E8	0xF10C0214  ADD	R2, R12, #20
0x19EC	0x2100    MOVS	R1, #0
0x19EE	0x6011    STR	R1, [R2, #0]
;Input Capture Complete 5ch.c, 505 :: 		fngr->direction_desired = CONTRACT;
0x19F0	0xF10C021A  ADD	R2, R12, #26
0x19F4	0x2100    MOVS	R1, #0
0x19F6	0x8011    STRH	R1, [R2, #0]
;Input Capture Complete 5ch.c, 507 :: 		if (strcmp(fngr->name, "fngr_pointer") == 0) {
0x19F8	0x4926    LDR	R1, [PC, #152]
0x19FA	0x4660    MOV	R0, R12
0x19FC	0xF7FFFD22  BL	_strcmp+0
0x1A00	0xB948    CBNZ	R0, L_init_finger28
;Input Capture Complete 5ch.c, 508 :: 		POINTER_DIRECTION = fngr->direction_desired;
0x1A02	0xF10C011A  ADD	R1, R12, #26
; fngr end address is: 48 (R12)
0x1A06	0x880A    LDRH	R2, [R1, #0]
0x1A08	0x4923    LDR	R1, [PC, #140]
0x1A0A	0x600A    STR	R2, [R1, #0]
;Input Capture Complete 5ch.c, 509 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_7);     // Set active ADC channel for Pointer finger   - 3 is not on the resources list but I know it works
0x1A0C	0xF2400080  MOVW	R0, #128
0x1A10	0xF7FFFA66  BL	_ADC_Set_Input_Channel+0
;Input Capture Complete 5ch.c, 510 :: 		}
0x1A14	0xE03A    B	L_init_finger29
L_init_finger28:
;Input Capture Complete 5ch.c, 511 :: 		else if (strcmp(fngr->name, "fngr_middle") == 0) {
; fngr start address is: 48 (R12)
0x1A16	0x4921    LDR	R1, [PC, #132]
0x1A18	0x4660    MOV	R0, R12
0x1A1A	0xF7FFFD13  BL	_strcmp+0
0x1A1E	0xB948    CBNZ	R0, L_init_finger30
;Input Capture Complete 5ch.c, 512 :: 		MIDDLE_DIRECTION = fngr->direction_desired;
0x1A20	0xF10C011A  ADD	R1, R12, #26
; fngr end address is: 48 (R12)
0x1A24	0x880A    LDRH	R2, [R1, #0]
0x1A26	0x491E    LDR	R1, [PC, #120]
0x1A28	0x600A    STR	R2, [R1, #0]
;Input Capture Complete 5ch.c, 513 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_9);     // Set active ADC channel for Pointer finger   - 3 is not on the resources list but I know it works
0x1A2A	0xF2402000  MOVW	R0, #512
0x1A2E	0xF7FFFA57  BL	_ADC_Set_Input_Channel+0
;Input Capture Complete 5ch.c, 514 :: 		}
0x1A32	0xE02B    B	L_init_finger31
L_init_finger30:
;Input Capture Complete 5ch.c, 515 :: 		else if (strcmp(fngr->name, "fngr_ring") == 0) {
; fngr start address is: 48 (R12)
0x1A34	0x491B    LDR	R1, [PC, #108]
0x1A36	0x4660    MOV	R0, R12
0x1A38	0xF7FFFD04  BL	_strcmp+0
0x1A3C	0xB948    CBNZ	R0, L_init_finger32
;Input Capture Complete 5ch.c, 516 :: 		RING_DIRECTION = fngr->direction_desired;
0x1A3E	0xF10C011A  ADD	R1, R12, #26
; fngr end address is: 48 (R12)
0x1A42	0x880A    LDRH	R2, [R1, #0]
0x1A44	0x4918    LDR	R1, [PC, #96]
0x1A46	0x600A    STR	R2, [R1, #0]
;Input Capture Complete 5ch.c, 517 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_11);     // Set active ADC channel for Pointer finger   - 3 is not on the resources list but I know it works
0x1A48	0xF6400000  MOVW	R0, #2048
0x1A4C	0xF7FFFA48  BL	_ADC_Set_Input_Channel+0
;Input Capture Complete 5ch.c, 518 :: 		}
0x1A50	0xE01C    B	L_init_finger33
L_init_finger32:
;Input Capture Complete 5ch.c, 519 :: 		else if (strcmp(fngr->name, "fngr_pinky") == 0) {
; fngr start address is: 48 (R12)
0x1A52	0x4916    LDR	R1, [PC, #88]
0x1A54	0x4660    MOV	R0, R12
0x1A56	0xF7FFFCF5  BL	_strcmp+0
0x1A5A	0xB948    CBNZ	R0, L_init_finger34
;Input Capture Complete 5ch.c, 520 :: 		PINKY_DIRECTION = fngr->direction_desired;
0x1A5C	0xF10C011A  ADD	R1, R12, #26
; fngr end address is: 48 (R12)
0x1A60	0x880A    LDRH	R2, [R1, #0]
0x1A62	0x4913    LDR	R1, [PC, #76]
0x1A64	0x600A    STR	R2, [R1, #0]
;Input Capture Complete 5ch.c, 521 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_13);     // Set active ADC channel for Pointer finger   - 3 is not on the resources list but I know it works
0x1A66	0xF2420000  MOVW	R0, #8192
0x1A6A	0xF7FFFA39  BL	_ADC_Set_Input_Channel+0
;Input Capture Complete 5ch.c, 523 :: 		}
0x1A6E	0xE00D    B	L_init_finger35
L_init_finger34:
;Input Capture Complete 5ch.c, 524 :: 		else if (strcmp(fngr->name, "fngr_thumb") == 0) {
; fngr start address is: 48 (R12)
0x1A70	0x4910    LDR	R1, [PC, #64]
0x1A72	0x4660    MOV	R0, R12
0x1A74	0xF7FFFCE6  BL	_strcmp+0
0x1A78	0xB940    CBNZ	R0, L_init_finger36
;Input Capture Complete 5ch.c, 525 :: 		THUMB_DIRECTION = fngr->direction_desired;
0x1A7A	0xF10C011A  ADD	R1, R12, #26
; fngr end address is: 48 (R12)
0x1A7E	0x880A    LDRH	R2, [R1, #0]
0x1A80	0x490D    LDR	R1, [PC, #52]
0x1A82	0x600A    STR	R2, [R1, #0]
;Input Capture Complete 5ch.c, 526 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_3);     // Set active ADC channel for Pointer finger   - 3 is not on the resources list but I know it works
0x1A84	0xF2400008  MOVW	R0, #8
0x1A88	0xF7FFFA2A  BL	_ADC_Set_Input_Channel+0
;Input Capture Complete 5ch.c, 527 :: 		}
L_init_finger36:
L_init_finger35:
L_init_finger33:
L_init_finger31:
L_init_finger29:
;Input Capture Complete 5ch.c, 528 :: 		}
L_end_init_finger:
0x1A8C	0xF8DDE000  LDR	LR, [SP, #0]
0x1A90	0xB001    ADD	SP, SP, #4
0x1A92	0x4770    BX	LR
0x1A94	0x00002000  	?lstr9_Input_32Capture_32Complete_325ch+0
0x1A98	0x02A84242  	GPIOE_ODR+0
0x1A9C	0x000D2000  	?lstr10_Input_32Capture_32Complete_325ch+0
0x1AA0	0x82A84240  	GPIOB_ODR+0
0x1AA4	0x00192000  	?lstr11_Input_32Capture_32Complete_325ch+0
0x1AA8	0x82B44240  	GPIOB_ODR+0
0x1AAC	0x00232000  	?lstr12_Input_32Capture_32Complete_325ch+0
0x1AB0	0x82A04241  	GPIOD_ODR+0
0x1AB4	0x002E2000  	?lstr13_Input_32Capture_32Complete_325ch+0
0x1AB8	0x02B04241  	GPIOC_ODR+0
; end of _init_finger
_strcmp:
;__Lib_CString.c, 122 :: 		
; s2 start address is: 4 (R1)
; s1 start address is: 0 (R0)
0x1444	0xB081    SUB	SP, SP, #4
; s2 end address is: 4 (R1)
; s1 end address is: 0 (R0)
; s1 start address is: 0 (R0)
; s2 start address is: 4 (R1)
0x1446	0x9100    STR	R1, [SP, #0]
; s1 end address is: 0 (R0)
; s2 end address is: 4 (R1)
0x1448	0x4601    MOV	R1, R0
0x144A	0x9800    LDR	R0, [SP, #0]
;__Lib_CString.c, 124 :: 		
L_strcmp30:
; s2 start address is: 0 (R0)
; s1 start address is: 4 (R1)
0x144C	0x780A    LDRB	R2, [R1, #0]
0x144E	0xB132    CBZ	R2, L__strcmp89
0x1450	0x780B    LDRB	R3, [R1, #0]
0x1452	0x7802    LDRB	R2, [R0, #0]
0x1454	0x4293    CMP	R3, R2
0x1456	0xD102    BNE	L__strcmp88
L__strcmp87:
;__Lib_CString.c, 125 :: 		
0x1458	0x1C49    ADDS	R1, R1, #1
0x145A	0x1C40    ADDS	R0, R0, #1
0x145C	0xE7F6    B	L_strcmp30
;__Lib_CString.c, 124 :: 		
L__strcmp89:
L__strcmp88:
;__Lib_CString.c, 127 :: 		
0x145E	0x780B    LDRB	R3, [R1, #0]
; s1 end address is: 4 (R1)
0x1460	0x7802    LDRB	R2, [R0, #0]
; s2 end address is: 0 (R0)
0x1462	0x1A9A    SUB	R2, R3, R2
0x1464	0xB210    SXTH	R0, R2
;__Lib_CString.c, 128 :: 		
L_end_strcmp:
0x1466	0xB001    ADD	SP, SP, #4
0x1468	0x4770    BX	LR
; end of _strcmp
_ADC_Set_Input_Channel:
;__Lib_ADC_123_32F20x_16ch.c, 44 :: 		
; input_mask start address is: 0 (R0)
0x0EE0	0xB081    SUB	SP, SP, #4
0x0EE2	0xF8CDE000  STR	LR, [SP, #0]
0x0EE6	0xFA1FFB80  UXTH	R11, R0
; input_mask end address is: 0 (R0)
; input_mask start address is: 44 (R11)
;__Lib_ADC_123_32F20x_16ch.c, 45 :: 		
0x0EEA	0xF3CB0100  UBFX	R1, R11, #0, #1
0x0EEE	0xB121    CBZ	R1, L_ADC_Set_Input_Channel0
;__Lib_ADC_123_32F20x_16ch.c, 46 :: 		
0x0EF0	0xF2400101  MOVW	R1, #1
0x0EF4	0x4853    LDR	R0, [PC, #332]
0x0EF6	0xF7FFFD3D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel0:
;__Lib_ADC_123_32F20x_16ch.c, 47 :: 		
0x0EFA	0xF3CB0140  UBFX	R1, R11, #1, #1
0x0EFE	0xB121    CBZ	R1, L_ADC_Set_Input_Channel1
;__Lib_ADC_123_32F20x_16ch.c, 48 :: 		
0x0F00	0xF2400102  MOVW	R1, #2
0x0F04	0x484F    LDR	R0, [PC, #316]
0x0F06	0xF7FFFD35  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel1:
;__Lib_ADC_123_32F20x_16ch.c, 49 :: 		
0x0F0A	0xF3CB0180  UBFX	R1, R11, #2, #1
0x0F0E	0xB121    CBZ	R1, L_ADC_Set_Input_Channel2
;__Lib_ADC_123_32F20x_16ch.c, 50 :: 		
0x0F10	0xF2400104  MOVW	R1, #4
0x0F14	0x484B    LDR	R0, [PC, #300]
0x0F16	0xF7FFFD2D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel2:
;__Lib_ADC_123_32F20x_16ch.c, 51 :: 		
0x0F1A	0xF3CB01C0  UBFX	R1, R11, #3, #1
0x0F1E	0xB121    CBZ	R1, L_ADC_Set_Input_Channel3
;__Lib_ADC_123_32F20x_16ch.c, 52 :: 		
0x0F20	0xF2400108  MOVW	R1, #8
0x0F24	0x4847    LDR	R0, [PC, #284]
0x0F26	0xF7FFFD25  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel3:
;__Lib_ADC_123_32F20x_16ch.c, 53 :: 		
0x0F2A	0xF3CB1100  UBFX	R1, R11, #4, #1
0x0F2E	0xB149    CBZ	R1, L_ADC_Set_Input_Channel4
;__Lib_ADC_123_32F20x_16ch.c, 54 :: 		
0x0F30	0xF2400110  MOVW	R1, #16
0x0F34	0x4843    LDR	R0, [PC, #268]
0x0F36	0xF7FFFD1D  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 55 :: 		
0x0F3A	0xF2400140  MOVW	R1, #64
0x0F3E	0x4842    LDR	R0, [PC, #264]
0x0F40	0xF7FFFD18  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 56 :: 		
L_ADC_Set_Input_Channel4:
;__Lib_ADC_123_32F20x_16ch.c, 57 :: 		
0x0F44	0xF3CB1140  UBFX	R1, R11, #5, #1
0x0F48	0xB149    CBZ	R1, L_ADC_Set_Input_Channel5
;__Lib_ADC_123_32F20x_16ch.c, 58 :: 		
0x0F4A	0xF2400120  MOVW	R1, #32
0x0F4E	0x483D    LDR	R0, [PC, #244]
0x0F50	0xF7FFFD10  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 59 :: 		
0x0F54	0xF2400180  MOVW	R1, #128
0x0F58	0x483B    LDR	R0, [PC, #236]
0x0F5A	0xF7FFFD0B  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 60 :: 		
L_ADC_Set_Input_Channel5:
;__Lib_ADC_123_32F20x_16ch.c, 61 :: 		
0x0F5E	0xF3CB1180  UBFX	R1, R11, #6, #1
0x0F62	0xB149    CBZ	R1, L_ADC_Set_Input_Channel6
;__Lib_ADC_123_32F20x_16ch.c, 62 :: 		
0x0F64	0xF2400140  MOVW	R1, #64
0x0F68	0x4836    LDR	R0, [PC, #216]
0x0F6A	0xF7FFFD03  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 63 :: 		
0x0F6E	0xF2401100  MOVW	R1, #256
0x0F72	0x4835    LDR	R0, [PC, #212]
0x0F74	0xF7FFFCFE  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 64 :: 		
L_ADC_Set_Input_Channel6:
;__Lib_ADC_123_32F20x_16ch.c, 65 :: 		
0x0F78	0xF3CB11C0  UBFX	R1, R11, #7, #1
0x0F7C	0xB149    CBZ	R1, L_ADC_Set_Input_Channel7
;__Lib_ADC_123_32F20x_16ch.c, 66 :: 		
0x0F7E	0xF2400180  MOVW	R1, #128
0x0F82	0x4830    LDR	R0, [PC, #192]
0x0F84	0xF7FFFCF6  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 67 :: 		
0x0F88	0xF2402100  MOVW	R1, #512
0x0F8C	0x482E    LDR	R0, [PC, #184]
0x0F8E	0xF7FFFCF1  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 68 :: 		
L_ADC_Set_Input_Channel7:
;__Lib_ADC_123_32F20x_16ch.c, 69 :: 		
0x0F92	0xF3CB2100  UBFX	R1, R11, #8, #1
0x0F96	0xB149    CBZ	R1, L_ADC_Set_Input_Channel8
;__Lib_ADC_123_32F20x_16ch.c, 70 :: 		
0x0F98	0xF2400101  MOVW	R1, #1
0x0F9C	0x482B    LDR	R0, [PC, #172]
0x0F9E	0xF7FFFCE9  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 71 :: 		
0x0FA2	0xF2404100  MOVW	R1, #1024
0x0FA6	0x4828    LDR	R0, [PC, #160]
0x0FA8	0xF7FFFCE4  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 72 :: 		
L_ADC_Set_Input_Channel8:
;__Lib_ADC_123_32F20x_16ch.c, 73 :: 		
0x0FAC	0xF3CB2140  UBFX	R1, R11, #9, #1
0x0FB0	0xB149    CBZ	R1, L_ADC_Set_Input_Channel9
;__Lib_ADC_123_32F20x_16ch.c, 74 :: 		
0x0FB2	0xF2400102  MOVW	R1, #2
0x0FB6	0x4825    LDR	R0, [PC, #148]
0x0FB8	0xF7FFFCDC  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 75 :: 		
0x0FBC	0xF2400108  MOVW	R1, #8
0x0FC0	0x4821    LDR	R0, [PC, #132]
0x0FC2	0xF7FFFCD7  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 76 :: 		
L_ADC_Set_Input_Channel9:
;__Lib_ADC_123_32F20x_16ch.c, 77 :: 		
0x0FC6	0xF3CB2180  UBFX	R1, R11, #10, #1
0x0FCA	0xB121    CBZ	R1, L_ADC_Set_Input_Channel10
;__Lib_ADC_123_32F20x_16ch.c, 78 :: 		
0x0FCC	0xF2400101  MOVW	R1, #1
0x0FD0	0x481F    LDR	R0, [PC, #124]
0x0FD2	0xF7FFFCCF  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel10:
;__Lib_ADC_123_32F20x_16ch.c, 79 :: 		
0x0FD6	0xF3CB21C0  UBFX	R1, R11, #11, #1
0x0FDA	0xB121    CBZ	R1, L_ADC_Set_Input_Channel11
;__Lib_ADC_123_32F20x_16ch.c, 80 :: 		
0x0FDC	0xF2400102  MOVW	R1, #2
0x0FE0	0x481B    LDR	R0, [PC, #108]
0x0FE2	0xF7FFFCC7  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel11:
;__Lib_ADC_123_32F20x_16ch.c, 81 :: 		
0x0FE6	0xF3CB3100  UBFX	R1, R11, #12, #1
0x0FEA	0xB121    CBZ	R1, L_ADC_Set_Input_Channel12
;__Lib_ADC_123_32F20x_16ch.c, 82 :: 		
0x0FEC	0xF2400104  MOVW	R1, #4
0x0FF0	0x4817    LDR	R0, [PC, #92]
0x0FF2	0xF7FFFCBF  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel12:
;__Lib_ADC_123_32F20x_16ch.c, 83 :: 		
0x0FF6	0xF3CB3140  UBFX	R1, R11, #13, #1
0x0FFA	0xB121    CBZ	R1, L_ADC_Set_Input_Channel13
;__Lib_ADC_123_32F20x_16ch.c, 84 :: 		
0x0FFC	0xF2400108  MOVW	R1, #8
0x1000	0x4813    LDR	R0, [PC, #76]
0x1002	0xF7FFFCB7  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel13:
;__Lib_ADC_123_32F20x_16ch.c, 85 :: 		
0x1006	0xF3CB3180  UBFX	R1, R11, #14, #1
0x100A	0xB149    CBZ	R1, L_ADC_Set_Input_Channel14
;__Lib_ADC_123_32F20x_16ch.c, 86 :: 		
0x100C	0xF2400110  MOVW	R1, #16
0x1010	0x480F    LDR	R0, [PC, #60]
0x1012	0xF7FFFCAF  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 87 :: 		
0x1016	0xF2400110  MOVW	R1, #16
0x101A	0x480B    LDR	R0, [PC, #44]
0x101C	0xF7FFFCAA  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 88 :: 		
L_ADC_Set_Input_Channel14:
;__Lib_ADC_123_32F20x_16ch.c, 89 :: 		
0x1020	0xF3CB31C0  UBFX	R1, R11, #15, #1
; input_mask end address is: 44 (R11)
0x1024	0xB149    CBZ	R1, L_ADC_Set_Input_Channel15
;__Lib_ADC_123_32F20x_16ch.c, 90 :: 		
0x1026	0xF2400120  MOVW	R1, #32
0x102A	0x4809    LDR	R0, [PC, #36]
0x102C	0xF7FFFCA2  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 91 :: 		
0x1030	0xF2400120  MOVW	R1, #32
0x1034	0x4804    LDR	R0, [PC, #16]
0x1036	0xF7FFFC9D  BL	_GPIO_Analog_Input+0
;__Lib_ADC_123_32F20x_16ch.c, 92 :: 		
L_ADC_Set_Input_Channel15:
;__Lib_ADC_123_32F20x_16ch.c, 93 :: 		
L_end_ADC_Set_Input_Channel:
0x103A	0xF8DDE000  LDR	LR, [SP, #0]
0x103E	0xB001    ADD	SP, SP, #4
0x1040	0x4770    BX	LR
0x1042	0xBF00    NOP
0x1044	0x00004002  	GPIOA_BASE+0
0x1048	0x14004002  	GPIOF_BASE+0
0x104C	0x04004002  	GPIOB_BASE+0
0x1050	0x08004002  	GPIOC_BASE+0
; end of _ADC_Set_Input_Channel
_GPIO_Analog_Input:
;__Lib_GPIO_32F4xx.c, 241 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0974	0xB081    SUB	SP, SP, #4
0x0976	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F4xx.c, 242 :: 		
0x097A	0xF04F0201  MOV	R2, #1
0x097E	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x0980	0xF7FFFC56  BL	_GPIO_Config+0
;__Lib_GPIO_32F4xx.c, 243 :: 		
L_end_GPIO_Analog_Input:
0x0984	0xF8DDE000  LDR	LR, [SP, #0]
0x0988	0xB001    ADD	SP, SP, #4
0x098A	0x4770    BX	LR
; end of _GPIO_Analog_Input
_ADC1_Init:
;__Lib_ADC_123_32F20x_16ch.c, 190 :: 		
0x195C	0xB081    SUB	SP, SP, #4
0x195E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_ADC_123_32F20x_16ch.c, 191 :: 		
0x1962	0x4907    LDR	R1, [PC, #28]
0x1964	0x4807    LDR	R0, [PC, #28]
0x1966	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_123_32F20x_16ch.c, 193 :: 		
0x1968	0x2101    MOVS	R1, #1
0x196A	0xB249    SXTB	R1, R1
0x196C	0x4806    LDR	R0, [PC, #24]
0x196E	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_123_32F20x_16ch.c, 195 :: 		
0x1970	0x4806    LDR	R0, [PC, #24]
0x1972	0xF7FFFA2B  BL	__Lib_ADC_123_32F20x_16ch_ADCx_Init+0
;__Lib_ADC_123_32F20x_16ch.c, 228 :: 		
L_end_ADC1_Init:
0x1976	0xF8DDE000  LDR	LR, [SP, #0]
0x197A	0xB001    ADD	SP, SP, #4
0x197C	0x4770    BX	LR
0x197E	0xBF00    NOP
0x1980	0x10C10000  	_ADC1_Get_Sample+0
0x1984	0x03B42000  	_ADC_Get_Sample_Ptr+0
0x1988	0x08A04247  	RCC_APB2ENRbits+0
0x198C	0x20004001  	ADC1_SR+0
; end of _ADC1_Init
__Lib_ADC_123_32F20x_16ch_ADCx_Init:
;__Lib_ADC_123_32F20x_16ch.c, 95 :: 		
; base start address is: 0 (R0)
0x0DCC	0xB086    SUB	SP, SP, #24
0x0DCE	0xF8CDE000  STR	LR, [SP, #0]
0x0DD2	0x4604    MOV	R4, R0
; base end address is: 0 (R0)
; base start address is: 16 (R4)
;__Lib_ADC_123_32F20x_16ch.c, 103 :: 		
0x0DD4	0xA901    ADD	R1, SP, #4
0x0DD6	0x4608    MOV	R0, R1
0x0DD8	0xF7FFFC3A  BL	_RCC_GetClocksFrequency+0
;__Lib_ADC_123_32F20x_16ch.c, 105 :: 		
0x0DDC	0x9A04    LDR	R2, [SP, #16]
0x0DDE	0x4939    LDR	R1, [PC, #228]
0x0DE0	0x428A    CMP	R2, R1
0x0DE2	0xD906    BLS	L___Lib_ADC_123_32F20x_16ch_ADCx_Init16
;__Lib_ADC_123_32F20x_16ch.c, 107 :: 		
0x0DE4	0x2201    MOVS	R2, #1
0x0DE6	0xB252    SXTB	R2, R2
0x0DE8	0x4937    LDR	R1, [PC, #220]
0x0DEA	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 108 :: 		
0x0DEC	0x4937    LDR	R1, [PC, #220]
0x0DEE	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 109 :: 		
0x0DF0	0xE01F    B	L___Lib_ADC_123_32F20x_16ch_ADCx_Init17
L___Lib_ADC_123_32F20x_16ch_ADCx_Init16:
0x0DF2	0x9A04    LDR	R2, [SP, #16]
0x0DF4	0x4936    LDR	R1, [PC, #216]
0x0DF6	0x428A    CMP	R2, R1
0x0DF8	0xD908    BLS	L___Lib_ADC_123_32F20x_16ch_ADCx_Init18
;__Lib_ADC_123_32F20x_16ch.c, 111 :: 		
0x0DFA	0x2200    MOVS	R2, #0
0x0DFC	0xB252    SXTB	R2, R2
0x0DFE	0x4932    LDR	R1, [PC, #200]
0x0E00	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 112 :: 		
0x0E02	0x2201    MOVS	R2, #1
0x0E04	0xB252    SXTB	R2, R2
0x0E06	0x4931    LDR	R1, [PC, #196]
0x0E08	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 113 :: 		
0x0E0A	0xE012    B	L___Lib_ADC_123_32F20x_16ch_ADCx_Init19
L___Lib_ADC_123_32F20x_16ch_ADCx_Init18:
0x0E0C	0x9A04    LDR	R2, [SP, #16]
0x0E0E	0x4931    LDR	R1, [PC, #196]
0x0E10	0x428A    CMP	R2, R1
0x0E12	0xD908    BLS	L___Lib_ADC_123_32F20x_16ch_ADCx_Init20
;__Lib_ADC_123_32F20x_16ch.c, 115 :: 		
0x0E14	0x2201    MOVS	R2, #1
0x0E16	0xB252    SXTB	R2, R2
0x0E18	0x492B    LDR	R1, [PC, #172]
0x0E1A	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 116 :: 		
0x0E1C	0x2200    MOVS	R2, #0
0x0E1E	0xB252    SXTB	R2, R2
0x0E20	0x492A    LDR	R1, [PC, #168]
0x0E22	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 117 :: 		
0x0E24	0xE005    B	L___Lib_ADC_123_32F20x_16ch_ADCx_Init21
L___Lib_ADC_123_32F20x_16ch_ADCx_Init20:
;__Lib_ADC_123_32F20x_16ch.c, 119 :: 		
0x0E26	0x2200    MOVS	R2, #0
0x0E28	0xB252    SXTB	R2, R2
0x0E2A	0x4927    LDR	R1, [PC, #156]
0x0E2C	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 120 :: 		
0x0E2E	0x4927    LDR	R1, [PC, #156]
0x0E30	0x600A    STR	R2, [R1, #0]
;__Lib_ADC_123_32F20x_16ch.c, 121 :: 		
L___Lib_ADC_123_32F20x_16ch_ADCx_Init21:
L___Lib_ADC_123_32F20x_16ch_ADCx_Init19:
L___Lib_ADC_123_32F20x_16ch_ADCx_Init17:
;__Lib_ADC_123_32F20x_16ch.c, 124 :: 		
0x0E32	0x1D23    ADDS	R3, R4, #4
0x0E34	0x681A    LDR	R2, [R3, #0]
0x0E36	0x4928    LDR	R1, [PC, #160]
0x0E38	0xEA020101  AND	R1, R2, R1, LSL #0
0x0E3C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 126 :: 		
0x0E3E	0xF2040308  ADDW	R3, R4, #8
0x0E42	0x681A    LDR	R2, [R3, #0]
0x0E44	0x4925    LDR	R1, [PC, #148]
0x0E46	0xEA020101  AND	R1, R2, R1, LSL #0
0x0E4A	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 134 :: 		
0x0E4C	0x1D23    ADDS	R3, R4, #4
0x0E4E	0x2200    MOVS	R2, #0
0x0E50	0x6819    LDR	R1, [R3, #0]
0x0E52	0xF3622108  BFI	R1, R2, #8, #1
0x0E56	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 137 :: 		
0x0E58	0xF2040308  ADDW	R3, R4, #8
0x0E5C	0x2200    MOVS	R2, #0
0x0E5E	0x6819    LDR	R1, [R3, #0]
0x0E60	0xF3620141  BFI	R1, R2, #1, #1
0x0E64	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 139 :: 		
0x0E66	0xF2040308  ADDW	R3, R4, #8
0x0E6A	0x2200    MOVS	R2, #0
0x0E6C	0x6819    LDR	R1, [R3, #0]
0x0E6E	0xF36221CB  BFI	R1, R2, #11, #1
0x0E72	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 147 :: 		
0x0E74	0xF204032C  ADDW	R3, R4, #44
0x0E78	0x2200    MOVS	R2, #0
0x0E7A	0x6819    LDR	R1, [R3, #0]
0x0E7C	0xF3625114  BFI	R1, R2, #20, #1
0x0E80	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 148 :: 		
0x0E82	0xF204032C  ADDW	R3, R4, #44
0x0E86	0x2200    MOVS	R2, #0
0x0E88	0x6819    LDR	R1, [R3, #0]
0x0E8A	0xF3625155  BFI	R1, R2, #21, #1
0x0E8E	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 149 :: 		
0x0E90	0xF204032C  ADDW	R3, R4, #44
0x0E94	0x2200    MOVS	R2, #0
0x0E96	0x6819    LDR	R1, [R3, #0]
0x0E98	0xF3625196  BFI	R1, R2, #22, #1
0x0E9C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 150 :: 		
0x0E9E	0xF204032C  ADDW	R3, R4, #44
0x0EA2	0x2200    MOVS	R2, #0
0x0EA4	0x6819    LDR	R1, [R3, #0]
0x0EA6	0xF36251D7  BFI	R1, R2, #23, #1
0x0EAA	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 154 :: 		
0x0EAC	0xF2040308  ADDW	R3, R4, #8
; base end address is: 16 (R4)
0x0EB0	0x2201    MOVS	R2, #1
0x0EB2	0x6819    LDR	R1, [R3, #0]
0x0EB4	0xF3620100  BFI	R1, R2, #0, #1
0x0EB8	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_123_32F20x_16ch.c, 165 :: 		
L_end_ADCx_Init:
0x0EBA	0xF8DDE000  LDR	LR, [SP, #0]
0x0EBE	0xB006    ADD	SP, SP, #24
0x0EC0	0x4770    BX	LR
0x0EC2	0xBF00    NOP
0x0EC4	0x95000ABA  	#180000000
0x0EC8	0x60C04224  	ADC_CCR+0
0x0ECC	0x60C44224  	ADC_CCR+0
0x0ED0	0x0E000727  	#120000000
0x0ED4	0x87000393  	#60000000
0x0ED8	0xFEFFFFF0  	#-983297
0x0EDC	0xF7FDFFF1  	#-919555
; end of __Lib_ADC_123_32F20x_16ch_ADCx_Init
_UART1_Write_Text:
;__Lib_UART_123_45_6.c, 78 :: 		
; uart_text start address is: 0 (R0)
0x1AE4	0xB081    SUB	SP, SP, #4
0x1AE6	0xF8CDE000  STR	LR, [SP, #0]
; uart_text end address is: 0 (R0)
; uart_text start address is: 0 (R0)
;__Lib_UART_123_45_6.c, 79 :: 		
0x1AEA	0x4601    MOV	R1, R0
; uart_text end address is: 0 (R0)
0x1AEC	0x4803    LDR	R0, [PC, #12]
0x1AEE	0xF7FFF953  BL	__Lib_UART_123_45_6_UARTx_Write_Text+0
;__Lib_UART_123_45_6.c, 80 :: 		
L_end_UART1_Write_Text:
0x1AF2	0xF8DDE000  LDR	LR, [SP, #0]
0x1AF6	0xB001    ADD	SP, SP, #4
0x1AF8	0x4770    BX	LR
0x1AFA	0xBF00    NOP
0x1AFC	0x10004001  	USART1_SR+0
; end of _UART1_Write_Text
__Lib_UART_123_45_6_UARTx_Write_Text:
;__Lib_UART_123_45_6.c, 67 :: 		
; uart_text start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x0D98	0xB081    SUB	SP, SP, #4
0x0D9A	0xF8CDE000  STR	LR, [SP, #0]
; uart_text end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; uart_text start address is: 4 (R1)
;__Lib_UART_123_45_6.c, 68 :: 		
; counter start address is: 24 (R6)
0x0D9E	0x2600    MOVS	R6, #0
;__Lib_UART_123_45_6.c, 70 :: 		
0x0DA0	0x780A    LDRB	R2, [R1, #0]
; data_ start address is: 12 (R3)
0x0DA2	0xB2D3    UXTB	R3, R2
; UART_Base end address is: 0 (R0)
; uart_text end address is: 4 (R1)
; data_ end address is: 12 (R3)
; counter end address is: 24 (R6)
0x0DA4	0x4605    MOV	R5, R0
0x0DA6	0xB2D8    UXTB	R0, R3
0x0DA8	0x460C    MOV	R4, R1
;__Lib_UART_123_45_6.c, 71 :: 		
L___Lib_UART_123_45_6_UARTx_Write_Text2:
; data_ start address is: 0 (R0)
; UART_Base start address is: 20 (R5)
; uart_text start address is: 16 (R4)
; counter start address is: 24 (R6)
; uart_text start address is: 16 (R4)
; uart_text end address is: 16 (R4)
; UART_Base start address is: 20 (R5)
; UART_Base end address is: 20 (R5)
0x0DAA	0xB150    CBZ	R0, L___Lib_UART_123_45_6_UARTx_Write_Text3
; uart_text end address is: 16 (R4)
; UART_Base end address is: 20 (R5)
;__Lib_UART_123_45_6.c, 72 :: 		
; UART_Base start address is: 20 (R5)
; uart_text start address is: 16 (R4)
0x0DAC	0xB2C1    UXTB	R1, R0
; data_ end address is: 0 (R0)
0x0DAE	0x4628    MOV	R0, R5
0x0DB0	0xF7FFFB56  BL	__Lib_UART_123_45_6_UARTx_Write+0
;__Lib_UART_123_45_6.c, 73 :: 		
0x0DB4	0x1C72    ADDS	R2, R6, #1
0x0DB6	0xB2D2    UXTB	R2, R2
0x0DB8	0xB2D6    UXTB	R6, R2
;__Lib_UART_123_45_6.c, 74 :: 		
0x0DBA	0x18A2    ADDS	R2, R4, R2
0x0DBC	0x7812    LDRB	R2, [R2, #0]
; data_ start address is: 0 (R0)
0x0DBE	0xB2D0    UXTB	R0, R2
;__Lib_UART_123_45_6.c, 75 :: 		
; uart_text end address is: 16 (R4)
; UART_Base end address is: 20 (R5)
; counter end address is: 24 (R6)
; data_ end address is: 0 (R0)
0x0DC0	0xE7F3    B	L___Lib_UART_123_45_6_UARTx_Write_Text2
L___Lib_UART_123_45_6_UARTx_Write_Text3:
;__Lib_UART_123_45_6.c, 76 :: 		
L_end_UARTx_Write_Text:
0x0DC2	0xF8DDE000  LDR	LR, [SP, #0]
0x0DC6	0xB001    ADD	SP, SP, #4
0x0DC8	0x4770    BX	LR
; end of __Lib_UART_123_45_6_UARTx_Write_Text
_init_timer11:
;Input Capture Complete 5ch.c, 623 :: 		void init_timer11() {
0x1D3C	0xB081    SUB	SP, SP, #4
0x1D3E	0xF8CDE000  STR	LR, [SP, #0]
;Input Capture Complete 5ch.c, 625 :: 		RCC_APB2ENR.TIM11EN = 1;                                                    // Enable clock for timer 11
0x1D42	0x2101    MOVS	R1, #1
0x1D44	0xB249    SXTB	R1, R1
0x1D46	0x480E    LDR	R0, [PC, #56]
0x1D48	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 626 :: 		TIM11_CR1.CEN = 0;                                                          // Disable timer/counter
0x1D4A	0x2100    MOVS	R1, #0
0x1D4C	0xB249    SXTB	R1, R1
0x1D4E	0x480D    LDR	R0, [PC, #52]
0x1D50	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 627 :: 		TIM11_PSC = SAMPLE_TIM_PSC;                                                 // Set timer 11 prescaler
0x1D52	0x480D    LDR	R0, [PC, #52]
0x1D54	0x8801    LDRH	R1, [R0, #0]
0x1D56	0x480D    LDR	R0, [PC, #52]
0x1D58	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 628 :: 		TIM11_ARR = SAMPLE_TIM_RELOAD;                                              // Set timer 11 overflow value
0x1D5A	0x480D    LDR	R0, [PC, #52]
0x1D5C	0x8801    LDRH	R1, [R0, #0]
0x1D5E	0x480D    LDR	R0, [PC, #52]
0x1D60	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 629 :: 		NVIC_IntEnable(IVT_INT_TIM1_TRG_COM_TIM11);                                 // Enable timer 11 interrupt
0x1D62	0xF240002A  MOVW	R0, #42
0x1D66	0xF7FFFBD5  BL	_NVIC_IntEnable+0
;Input Capture Complete 5ch.c, 630 :: 		TIM11_DIER.UIE = 1;                                                         // Timer 11 update interrupt enable
0x1D6A	0x2101    MOVS	R1, #1
0x1D6C	0xB249    SXTB	R1, R1
0x1D6E	0x480A    LDR	R0, [PC, #40]
0x1D70	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 631 :: 		TIM11_CR1.CEN = 1;                                                          // Enable timer/counter
0x1D72	0x4804    LDR	R0, [PC, #16]
0x1D74	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 632 :: 		}
L_end_init_timer11:
0x1D76	0xF8DDE000  LDR	LR, [SP, #0]
0x1D7A	0xB001    ADD	SP, SP, #4
0x1D7C	0x4770    BX	LR
0x1D7E	0xBF00    NOP
0x1D80	0x08C84247  	RCC_APB2ENR+0
0x1D84	0x00004229  	TIM11_CR1+0
0x1D88	0x003A2000  	_SAMPLE_TIM_PSC+0
0x1D8C	0x48284001  	TIM11_PSC+0
0x1D90	0x003C2000  	_SAMPLE_TIM_RELOAD+0
0x1D94	0x482C4001  	TIM11_ARR+0
0x1D98	0x01804229  	TIM11_DIER+0
; end of _init_timer11
_init_input_capture:
;Input Capture Complete 5ch.c, 541 :: 		void init_input_capture() {
0x1D9C	0xB086    SUB	SP, SP, #24
0x1D9E	0xF8CDE000  STR	LR, [SP, #0]
;Input Capture Complete 5ch.c, 545 :: 		RCC_APB1ENR.TIM3EN = 1;                                                     // Enable clock gating for timer module 3
0x1DA2	0x2101    MOVS	R1, #1
0x1DA4	0xB249    SXTB	R1, R1
0x1DA6	0x486C    LDR	R0, [PC, #432]
0x1DA8	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 546 :: 		TIM3_CR1.CEN = 0;                                                           // Disable timer/counter
0x1DAA	0x2100    MOVS	R1, #0
0x1DAC	0xB249    SXTB	R1, R1
0x1DAE	0x486B    LDR	R0, [PC, #428]
0x1DB0	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 547 :: 		TIM3_CR2.TI1S = 0;                                                          // TIM3_CH1 connected to TI1 Input (1 would be Ch1, 2, 3 XOR to TI1)
0x1DB2	0x486B    LDR	R0, [PC, #428]
0x1DB4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 548 :: 		TIM3_PSC = ENCODER_TIM_PSC;                                                 // Set timer 3 prescaler
0x1DB6	0x486B    LDR	R0, [PC, #428]
0x1DB8	0x9005    STR	R0, [SP, #20]
0x1DBA	0x8801    LDRH	R1, [R0, #0]
0x1DBC	0x486A    LDR	R0, [PC, #424]
0x1DBE	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 549 :: 		TIM3_ARR = ENCODER_TIM_RELOAD;                                              // Set timer 3 Auto Reload value
0x1DC0	0x486A    LDR	R0, [PC, #424]
0x1DC2	0x9003    STR	R0, [SP, #12]
0x1DC4	0x6801    LDR	R1, [R0, #0]
0x1DC6	0x486A    LDR	R0, [PC, #424]
0x1DC8	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 550 :: 		TIM3_CR1 |= 0;                                                              // Set counter direction as upcounting (DIR bit)
0x1DCA	0x486A    LDR	R0, [PC, #424]
0x1DCC	0x6801    LDR	R1, [R0, #0]
0x1DCE	0x4869    LDR	R0, [PC, #420]
0x1DD0	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 554 :: 		GPIO_Config(&GPIOC_BASE, _GPIO_PINMASK_6, _GPIO_CFG_MODE_ALT_FUNCTION | _GPIO_CFG_AF_TIM3 | _GPIO_CFG_PULL_DOWN);
0x1DD2	0x4A69    LDR	R2, [PC, #420]
0x1DD4	0xF2400140  MOVW	R1, #64
0x1DD8	0x4868    LDR	R0, [PC, #416]
0x1DDA	0xF7FEFA29  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 555 :: 		TIM3_CCMR1_Input |= 0x01;                                                   // Set capture channel 1 as input on TI1 (CC1S = 01)
0x1DDE	0x4868    LDR	R0, [PC, #416]
0x1DE0	0x6800    LDR	R0, [R0, #0]
0x1DE2	0xF0400101  ORR	R1, R0, #1
0x1DE6	0x4866    LDR	R0, [PC, #408]
0x1DE8	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 556 :: 		TIM3_CCER.CC1P = 0;                                                         // Set capture on rising edge event
0x1DEA	0x2100    MOVS	R1, #0
0x1DEC	0xB249    SXTB	R1, R1
0x1DEE	0x4865    LDR	R0, [PC, #404]
0x1DF0	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 557 :: 		TIM3_CCER.CC1NP = 0;                                                        // ^^ Continuation of above
0x1DF2	0x4865    LDR	R0, [PC, #404]
0x1DF4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 558 :: 		TIM3_CCER.CC1E = 1;                                                         // Enable capture on channel 1
0x1DF6	0x2101    MOVS	R1, #1
0x1DF8	0xB249    SXTB	R1, R1
0x1DFA	0x4864    LDR	R0, [PC, #400]
0x1DFC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 559 :: 		TIM3_DIER.CC1IE = 1;                                                        // Enable interrupt on capture channel 1
0x1DFE	0x4864    LDR	R0, [PC, #400]
0x1E00	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 563 :: 		GPIO_Config(&GPIOC_BASE, _GPIO_PINMASK_7, _GPIO_CFG_MODE_ALT_FUNCTION | _GPIO_CFG_AF_TIM3 | _GPIO_CFG_PULL_DOWN);
0x1E02	0x4A5D    LDR	R2, [PC, #372]
0x1E04	0xF2400180  MOVW	R1, #128
0x1E08	0x485C    LDR	R0, [PC, #368]
0x1E0A	0xF7FEFA11  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 564 :: 		TIM3_CCMR1_Input |= 0x100;                                                  // Set capture channel 2 as input on TI2 (CC2S = 01)
0x1E0E	0x485C    LDR	R0, [PC, #368]
0x1E10	0x6800    LDR	R0, [R0, #0]
0x1E12	0xF4407180  ORR	R1, R0, #256
0x1E16	0x485A    LDR	R0, [PC, #360]
0x1E18	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 565 :: 		TIM3_CCER.CC2P = 0;                                                         // Set capture on rising edge event
0x1E1A	0x2100    MOVS	R1, #0
0x1E1C	0xB249    SXTB	R1, R1
0x1E1E	0x485D    LDR	R0, [PC, #372]
0x1E20	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 566 :: 		TIM3_CCER.CC2NP = 0;                                                        // ^^ Continuation of above
0x1E22	0x485D    LDR	R0, [PC, #372]
0x1E24	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 567 :: 		TIM3_CCER.CC2E = 1;                                                         // Enable capture on channel 2
0x1E26	0x2101    MOVS	R1, #1
0x1E28	0xB249    SXTB	R1, R1
0x1E2A	0x485C    LDR	R0, [PC, #368]
0x1E2C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 568 :: 		TIM3_DIER.CC2IE = 1;                                                        // Enable interrupt on capture channel 2
0x1E2E	0x485C    LDR	R0, [PC, #368]
0x1E30	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 572 :: 		GPIO_Config(&GPIOC_BASE, _GPIO_PINMASK_8, _GPIO_CFG_MODE_ALT_FUNCTION | _GPIO_CFG_AF_TIM3 | _GPIO_CFG_PULL_DOWN);
0x1E32	0x4A51    LDR	R2, [PC, #324]
0x1E34	0xF2401100  MOVW	R1, #256
0x1E38	0x4850    LDR	R0, [PC, #320]
0x1E3A	0xF7FEF9F9  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 573 :: 		TIM3_CCMR2_Input |= 0x01;                                                   // Set capture channel 3 as input on TI3 (CC3S = 01)
0x1E3E	0x4859    LDR	R0, [PC, #356]
0x1E40	0x6800    LDR	R0, [R0, #0]
0x1E42	0xF0400101  ORR	R1, R0, #1
0x1E46	0x4857    LDR	R0, [PC, #348]
0x1E48	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 574 :: 		TIM3_CCER.CC3P = 0;                                                         // Set capture on rising edge event
0x1E4A	0x2100    MOVS	R1, #0
0x1E4C	0xB249    SXTB	R1, R1
0x1E4E	0x4856    LDR	R0, [PC, #344]
0x1E50	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 575 :: 		TIM3_CCER.CC3NP = 0;                                                         // ^^ Continuation of above
0x1E52	0x4856    LDR	R0, [PC, #344]
0x1E54	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 576 :: 		TIM3_CCER.CC3E = 1;                                                         // Enable capture on channel 3
0x1E56	0x2101    MOVS	R1, #1
0x1E58	0xB249    SXTB	R1, R1
0x1E5A	0x4855    LDR	R0, [PC, #340]
0x1E5C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 577 :: 		TIM3_DIER.CC3IE = 1;                                                        // Enable interrupt on capture channel 3
0x1E5E	0x4855    LDR	R0, [PC, #340]
0x1E60	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 581 :: 		GPIO_Config(&GPIOC_BASE, _GPIO_PINMASK_4, _GPIO_CFG_MODE_ALT_FUNCTION | _GPIO_CFG_AF_TIM3 | _GPIO_CFG_PULL_DOWN);
0x1E62	0x4A45    LDR	R2, [PC, #276]
0x1E64	0xF2400110  MOVW	R1, #16
0x1E68	0x4844    LDR	R0, [PC, #272]
0x1E6A	0xF7FEF9E1  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 582 :: 		TIM3_CCMR2_Input |= 0x100;                                                  // Set capture channel 4 as input on TI4 (CC4S = 01)
0x1E6E	0x484D    LDR	R0, [PC, #308]
0x1E70	0x6800    LDR	R0, [R0, #0]
0x1E72	0xF4407180  ORR	R1, R0, #256
0x1E76	0x484B    LDR	R0, [PC, #300]
0x1E78	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 583 :: 		TIM3_CCER.CC3P = 0;                                                         // Set capture on rising edge event
0x1E7A	0x2200    MOVS	R2, #0
0x1E7C	0xB252    SXTB	R2, R2
0x1E7E	0x484A    LDR	R0, [PC, #296]
0x1E80	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 584 :: 		TIM3_CCER.CC3NP = 0;                                                        // ^^ Continuation of above
0x1E82	0x484A    LDR	R0, [PC, #296]
0x1E84	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 585 :: 		TIM3_CCER.CC4E = 1;                                                         // Enable capture on channel 4
0x1E86	0x2101    MOVS	R1, #1
0x1E88	0xB249    SXTB	R1, R1
0x1E8A	0x484B    LDR	R0, [PC, #300]
0x1E8C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 586 :: 		TIM3_DIER.CC4IE = 1;                                                        // Enable interrupt on capture channel 4
0x1E8E	0x484B    LDR	R0, [PC, #300]
0x1E90	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 590 :: 		RCC_APB1ENR.TIM2EN = 1;                                                     // Enable clock gating for timer module 5
0x1E92	0x484B    LDR	R0, [PC, #300]
0x1E94	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 591 :: 		TIM2_CR1.CEN = 0;                                                           // Disable timer/counter
0x1E96	0x484B    LDR	R0, [PC, #300]
0x1E98	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 592 :: 		TIM2_CR2.TI1S = 0;                                                          // TIM3_CH1 connected to TI1 Input (1 would be Ch1, 2, 3 XOR to TI1)
0x1E9A	0x484B    LDR	R0, [PC, #300]
0x1E9C	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 593 :: 		TIM2_PSC = ENCODER_TIM_PSC;                                                 // Set timer 3 prescaler
0x1E9E	0x9805    LDR	R0, [SP, #20]
0x1EA0	0x8801    LDRH	R1, [R0, #0]
0x1EA2	0x484A    LDR	R0, [PC, #296]
0x1EA4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 594 :: 		TIM2_ARR = ENCODER_TIM_RELOAD;                                              // Set timer 3 Auto Reload value
0x1EA6	0x9803    LDR	R0, [SP, #12]
0x1EA8	0x6801    LDR	R1, [R0, #0]
0x1EAA	0x4849    LDR	R0, [PC, #292]
0x1EAC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 595 :: 		TIM2_CR1 |= 0;                                                              // Set counter direction as upcounting (DIR bit)
0x1EAE	0x4849    LDR	R0, [PC, #292]
0x1EB0	0x6801    LDR	R1, [R0, #0]
0x1EB2	0x4848    LDR	R0, [PC, #288]
0x1EB4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 599 :: 		GPIO_Config(&GPIOA_BASE, _GPIO_PINMASK_5, _GPIO_CFG_MODE_ALT_FUNCTION | _GPIO_CFG_AF_TIM2 | _GPIO_CFG_PULL_DOWN);
0x1EB6	0x4A48    LDR	R2, [PC, #288]
0x1EB8	0xF2400120  MOVW	R1, #32
0x1EBC	0x4847    LDR	R0, [PC, #284]
0x1EBE	0xF7FEF9B7  BL	_GPIO_Config+0
;Input Capture Complete 5ch.c, 600 :: 		TIM2_CCMR1_Input |= 0x01;                                                   // Set capture channel 1 as input on TI1 (CC1S = 01)
0x1EC2	0x4847    LDR	R0, [PC, #284]
0x1EC4	0x6800    LDR	R0, [R0, #0]
0x1EC6	0xF0400101  ORR	R1, R0, #1
0x1ECA	0x4845    LDR	R0, [PC, #276]
0x1ECC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 601 :: 		TIM2_CCER.CC1P = 0;                                                         // Set capture on rising edge event
0x1ECE	0x2100    MOVS	R1, #0
0x1ED0	0xB249    SXTB	R1, R1
0x1ED2	0x4844    LDR	R0, [PC, #272]
0x1ED4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 602 :: 		TIM2_CCER.CC1NP = 0;                                                        // ^^ Continuation of above
0x1ED6	0x4844    LDR	R0, [PC, #272]
0x1ED8	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 603 :: 		TIM2_CCER.CC1E = 1;                                                         // Enable capture on channel 1
0x1EDA	0x2101    MOVS	R1, #1
0x1EDC	0xB249    SXTB	R1, R1
0x1EDE	0x4843    LDR	R0, [PC, #268]
0x1EE0	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 604 :: 		TIM2_DIER.CC1IE = 1;                                                        // Enable interrupt on capture channel 1
0x1EE2	0x4843    LDR	R0, [PC, #268]
0x1EE4	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 608 :: 		TIM3_DIER.UIE = 1;                                                          // Enable overflow interrupt Timer 3
0x1EE6	0x4843    LDR	R0, [PC, #268]
0x1EE8	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 609 :: 		TIM2_DIER.UIE = 1;                                                          // Enable overflow interrupt for Timer 2
0x1EEA	0x4843    LDR	R0, [PC, #268]
0x1EEC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 610 :: 		NVIC_IntEnable(IVT_INT_TIM3);                                               // Enable timer 3 ISR
0x1EEE	0xF240002D  MOVW	R0, #45
0x1EF2	0xF7FFFB0F  BL	_NVIC_IntEnable+0
;Input Capture Complete 5ch.c, 611 :: 		NVIC_IntEnable(IVT_INT_TIM2);                                               // Enable timer 2 ISR
0x1EF6	0xF240002C  MOVW	R0, #44
0x1EFA	0xF7FFFB0B  BL	_NVIC_IntEnable+0
;Input Capture Complete 5ch.c, 612 :: 		TIM3_CR1.CEN = 1;                                                           // Enable timer 3
0x1EFE	0x2101    MOVS	R1, #1
0x1F00	0xB249    SXTB	R1, R1
0x1F02	0x4816    LDR	R0, [PC, #88]
0x1F04	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 613 :: 		TIM2_CR1.CEN = 1;                                                           // Enable Timer 2
0x1F06	0x482F    LDR	R0, [PC, #188]
0x1F08	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 617 :: 		encoder_timer_period_ms = (long double) 1000.0 / (MCU_FREQUENCY / (ENCODER_TIM_PSC + 1));
0x1F0A	0x9805    LDR	R0, [SP, #20]
0x1F0C	0x8800    LDRH	R0, [R0, #0]
0x1F0E	0x1C41    ADDS	R1, R0, #1
0x1F10	0xB289    UXTH	R1, R1
0x1F12	0x483A    LDR	R0, [PC, #232]
0x1F14	0x6800    LDR	R0, [R0, #0]
0x1F16	0xFBB0F0F1  UDIV	R0, R0, R1
0x1F1A	0xF7FEFF29  BL	__UnsignedIntegralToLongDouble+0
0x1F1E	0xE9CD0103  STRD	R0, R1, [SP, #12]
0x1F22	0xF04F0000  MOV	R0, #0
0x1F26	0x4936    LDR	R1, [PC, #216]
0x1F28	0xEE000A10  VMOV	S0, R0
0x1F2C	0xEE001A90  VMOV	S1, R1
0x1F30	0xE9CD2301  STRD	R2, R3, [SP, #4]
0x1F34	0xE9DD2303  LDRD	R2, R3, [SP, #12]
0x1F38	0xEE100A10  VMOV	R0, S0
0x1F3C	0xEE101A90  VMOV	R1, S1
0x1F40	0xF7FFF956  BL	__Div_DP+0
0x1F44	0xE9DD2301  LDRD	R2, R3, [SP, #4]
0x1F48	0x4A2E    LDR	R2, [PC, #184]
0x1F4A	0xE9C20100  STRD	R0, R1, [R2, #0]
;Input Capture Complete 5ch.c, 618 :: 		}
L_end_init_input_capture:
0x1F4E	0xF8DDE000  LDR	LR, [SP, #0]
0x1F52	0xB006    ADD	SP, SP, #24
0x1F54	0x4770    BX	LR
0x1F56	0xBF00    NOP
0x1F58	0x08044247  	RCC_APB1ENR+0
0x1F5C	0x80004200  	TIM3_CR1+0
0x1F60	0x809C4200  	TIM3_CR2+0
0x1F64	0x003E2000  	_ENCODER_TIM_PSC+0
0x1F68	0x04284000  	TIM3_PSC+0
0x1F6C	0x01282000  	_ENCODER_TIM_RELOAD+0
0x1F70	0x042C4000  	TIM3_ARR+0
0x1F74	0x04004000  	TIM3_CR1+0
0x1F78	0x01080020  	#2097416
0x1F7C	0x08004002  	GPIOC_BASE+0
0x1F80	0x04184000  	TIM3_CCMR1_Input+0
0x1F84	0x84044200  	TIM3_CCER+0
0x1F88	0x840C4200  	TIM3_CCER+0
0x1F8C	0x84004200  	TIM3_CCER+0
0x1F90	0x81844200  	TIM3_DIER+0
0x1F94	0x84144200  	TIM3_CCER+0
0x1F98	0x841C4200  	TIM3_CCER+0
0x1F9C	0x84104200  	TIM3_CCER+0
0x1FA0	0x81884200  	TIM3_DIER+0
0x1FA4	0x041C4000  	TIM3_CCMR2_Input+0
0x1FA8	0x84244200  	TIM3_CCER+0
0x1FAC	0x842C4200  	TIM3_CCER+0
0x1FB0	0x84204200  	TIM3_CCER+0
0x1FB4	0x818C4200  	TIM3_DIER+0
0x1FB8	0x84304200  	TIM3_CCER+0
0x1FBC	0x81904200  	TIM3_DIER+0
0x1FC0	0x08004247  	RCC_APB1ENR+0
0x1FC4	0x00004200  	TIM2_CR1+0
0x1FC8	0x009C4200  	TIM2_CR2+0
0x1FCC	0x00284000  	TIM2_PSC+0
0x1FD0	0x002C4000  	TIM2_ARR+0
0x1FD4	0x00004000  	TIM2_CR1+0
0x1FD8	0x01080010  	#1048840
0x1FDC	0x00004002  	GPIOA_BASE+0
0x1FE0	0x00184000  	TIM2_CCMR1_Input+0
0x1FE4	0x04044200  	TIM2_CCER+0
0x1FE8	0x040C4200  	TIM2_CCER+0
0x1FEC	0x04004200  	TIM2_CCER+0
0x1FF0	0x01844200  	TIM2_DIER+0
0x1FF4	0x81804200  	TIM3_DIER+0
0x1FF8	0x01804200  	TIM2_DIER+0
0x1FFC	0x012C2000  	_MCU_FREQUENCY+0
0x2000	0x4000408F  	#1083129856
0x2004	0x02102000  	_encoder_timer_period_ms+0
; end of _init_input_capture
__UnsignedIntegralToLongDouble:
;__Lib_MathDouble.c, 295 :: 		
0x0D70	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 297 :: 		
0x0D72	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 298 :: 		
0x0D74	0xBF04    ITT	EQ
;__Lib_MathDouble.c, 299 :: 		
0x0D76	0xF04F0100  MOVEQ	R1, #0
;__Lib_MathDouble.c, 301 :: 		
0x0D7A	0xE00A    BEQ	__me_lab_end
;__Lib_MathDouble.c, 303 :: 		
0x0D7C	0x0001    MOVS	R1, R0
;__Lib_MathDouble.c, 304 :: 		
0x0D7E	0x211F    MOVS	R1, #31
;__Lib_MathDouble.c, 305 :: 		
0x0D80	0xF5116180  ADDS	R1, R1, #1024
;__Lib_MathDouble.c, 307 :: 		
__me_loop:
0x0D84	0x1E49    SUBS	R1, R1, #1
;__Lib_MathDouble.c, 308 :: 		
0x0D86	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 311 :: 		
0x0D88	0xD3FC    BCC	__me_loop
;__Lib_MathDouble.c, 313 :: 		
0x0D8A	0x0509    LSLS	R1, R1, #20
;__Lib_MathDouble.c, 314 :: 		
0x0D8C	0xEA413110  ORR	R1, R1, R0, LSR #12
;__Lib_MathDouble.c, 315 :: 		
0x0D90	0x0500    LSLS	R0, R0, #20
;__Lib_MathDouble.c, 316 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 319 :: 		
L_end__UnsignedIntegralToLongDouble:
0x0D92	0xB001    ADD	SP, SP, #4
0x0D94	0x4770    BX	LR
; end of __UnsignedIntegralToLongDouble
__Div_DP:
;__Lib_MathDouble.c, 1385 :: 		
0x11F0	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 1387 :: 		
0x11F2	0xE92D41FC  PUSH	(R2, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 1389 :: 		
0x11F6	0xEA910803  EORS	R8, R1, R3, LSL #0
;__Lib_MathDouble.c, 1390 :: 		
0x11FA	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 1391 :: 		
0x11FC	0xF04F4800  MOVMI	R8, #-2147483648
;__Lib_MathDouble.c, 1392 :: 		
0x1200	0xF04F0800  MOVPL	R8, #0
;__Lib_MathDouble.c, 1394 :: 		
0x1204	0xEA4F3503  LSL	R5, R3, #12
;__Lib_MathDouble.c, 1395 :: 		
0x1208	0xEA4F3515  LSR	R5, R5, #12
;__Lib_MathDouble.c, 1396 :: 		
0x120C	0x0056    LSLS	R6, R2, #1
;__Lib_MathDouble.c, 1397 :: 		
0x120E	0x416D    ADCS	R5, R5
;__Lib_MathDouble.c, 1398 :: 		
0x1210	0xEA4F0743  LSL	R7, R3, #1
;__Lib_MathDouble.c, 1399 :: 		
0x1214	0xEA5F5757  LSRS	R7, R7, #21
;__Lib_MathDouble.c, 1402 :: 		
0x1218	0xBF1C    ITT	NE
;__Lib_MathDouble.c, 1403 :: 		
0x121A	0xF4451500  ORRNE	R5, R5, #2097152
;__Lib_MathDouble.c, 1404 :: 		
0x121E	0xE008    BNE	__me_jump
;__Lib_MathDouble.c, 1405 :: 		
0x1220	0xF2400100  MOVW	R1, #0
;__Lib_MathDouble.c, 1406 :: 		
0x1224	0xF6C771F0  MOVT	R1, #32752
;__Lib_MathDouble.c, 1407 :: 		
0x1228	0xEA410108  ORR	R1, R1, R8, LSL #0
;__Lib_MathDouble.c, 1408 :: 		
0x122C	0xF04F0000  MOV	R0, #0
;__Lib_MathDouble.c, 1410 :: 		
0x1230	0xE07F    B	__me_lab_end
;__Lib_MathDouble.c, 1412 :: 		
__me_jump:
;__Lib_MathDouble.c, 1413 :: 		
0x1232	0xF44F6EE0  MOV	LR, #1792
;__Lib_MathDouble.c, 1414 :: 		
0x1236	0xF11E0EFF  ADDS	LR, LR, #255
;__Lib_MathDouble.c, 1415 :: 		
0x123A	0x4577    CMP	R7, LR
;__Lib_MathDouble.c, 1416 :: 		
0x123C	0xD070    BEQ	__me_ovfl
;__Lib_MathDouble.c, 1418 :: 		
0x123E	0xEA4F3301  LSL	R3, R1, #12
;__Lib_MathDouble.c, 1419 :: 		
0x1242	0xEA4F3313  LSR	R3, R3, #12
;__Lib_MathDouble.c, 1420 :: 		
0x1246	0x0042    LSLS	R2, R0, #1
;__Lib_MathDouble.c, 1421 :: 		
0x1248	0x415B    ADCS	R3, R3
;__Lib_MathDouble.c, 1422 :: 		
0x124A	0xEA4F0441  LSL	R4, R1, #1
;__Lib_MathDouble.c, 1423 :: 		
0x124E	0x0D64    LSRS	R4, R4, #21
;__Lib_MathDouble.c, 1424 :: 		
0x1250	0xBF11    ITEEE	NE
;__Lib_MathDouble.c, 1425 :: 		
0x1252	0xF4431300  ORRNE	R3, R3, #2097152
;__Lib_MathDouble.c, 1426 :: 		
0x1256	0xF04F0100  MOVEQ	R1, #0
;__Lib_MathDouble.c, 1427 :: 		
0x125A	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 1429 :: 		
0x125E	0xE068    BEQ	__me_lab_end
;__Lib_MathDouble.c, 1431 :: 		
0x1260	0x4574    CMP	R4, LR
;__Lib_MathDouble.c, 1432 :: 		
0x1262	0xD05D    BEQ	__me_ovfl
;__Lib_MathDouble.c, 1434 :: 		
0x1264	0x1BE4    SUBS	R4, R4, R7
;__Lib_MathDouble.c, 1437 :: 		
0x1266	0x2100    MOVS	R1, #0
;__Lib_MathDouble.c, 1438 :: 		
0x1268	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 1439 :: 		
0x126A	0xF05F0E36  MOVS	LR, #54
;__Lib_MathDouble.c, 1441 :: 		
__me_fdivb:
0x126E	0x42AB    CMP	R3, R5
;__Lib_MathDouble.c, 1442 :: 		
0x1270	0xD100    BNE	__me_lab1
;__Lib_MathDouble.c, 1443 :: 		
0x1272	0x42B2    CMP	R2, R6
;__Lib_MathDouble.c, 1444 :: 		
__me_lab1:
0x1274	0xD305    BCC	__me_lab2
;__Lib_MathDouble.c, 1445 :: 		
0x1276	0x4140    ADCS	R0, R0
;__Lib_MathDouble.c, 1446 :: 		
0x1278	0x4149    ADCS	R1, R1
;__Lib_MathDouble.c, 1447 :: 		
0x127A	0x1B92    SUBS	R2, R2, R6
;__Lib_MathDouble.c, 1448 :: 		
0x127C	0xEB630305  SBC	R3, R3, R5, LSL #0
;__Lib_MathDouble.c, 1449 :: 		
0x1280	0xE001    B	__me_lab3
;__Lib_MathDouble.c, 1450 :: 		
__me_lab2:
0x1282	0x4140    ADCS	R0, R0
;__Lib_MathDouble.c, 1451 :: 		
0x1284	0x4149    ADCS	R1, R1
;__Lib_MathDouble.c, 1452 :: 		
__me_lab3:
0x1286	0xF1BE0E01  SUBS	LR, LR, #1
;__Lib_MathDouble.c, 1453 :: 		
0x128A	0xD005    BEQ	__me_fdive
;__Lib_MathDouble.c, 1454 :: 		
0x128C	0xEA530702  ORRS	R7, R3, R2, LSL #0
;__Lib_MathDouble.c, 1455 :: 		
0x1290	0xD002    BEQ	__me_fdive
;__Lib_MathDouble.c, 1456 :: 		
0x1292	0x0052    LSLS	R2, R2, #1
;__Lib_MathDouble.c, 1457 :: 		
0x1294	0x415B    ADCS	R3, R3
;__Lib_MathDouble.c, 1458 :: 		
0x1296	0xE7EA    B	__me_fdivb
;__Lib_MathDouble.c, 1460 :: 		
__me_fdive:
0x1298	0xF1BE0F20  CMP	LR, #32
;__Lib_MathDouble.c, 1461 :: 		
0x129C	0xD209    BCS	__me_low
;__Lib_MathDouble.c, 1462 :: 		
0x129E	0xF1BE0F16  CMP	LR, #22
;__Lib_MathDouble.c, 1463 :: 		
0x12A2	0xD30C    BCC	__me_high
;__Lib_MathDouble.c, 1465 :: 		
__me_mid:
0x12A4	0xF1CE0720  RSB	R7, LR, #32
;__Lib_MathDouble.c, 1466 :: 		
0x12A8	0xFA20F107  LSR	R1, R0, R7
;__Lib_MathDouble.c, 1467 :: 		
0x12AC	0xFA00F00E  LSL	R0, R0, LR
;__Lib_MathDouble.c, 1468 :: 		
0x12B0	0xE00F    B	__me_cont
;__Lib_MathDouble.c, 1470 :: 		
__me_low:
0x12B2	0xF1AE0E20  SUB	LR, LR, #32
;__Lib_MathDouble.c, 1471 :: 		
0x12B6	0xFA00F10E  LSL	R1, R0, LR
;__Lib_MathDouble.c, 1472 :: 		
0x12BA	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 1473 :: 		
0x12BC	0xE009    B	__me_cont
;__Lib_MathDouble.c, 1475 :: 		
__me_high:
0x12BE	0xFA01F10E  LSL	R1, R1, LR
;__Lib_MathDouble.c, 1476 :: 		
0x12C2	0xF1CE0720  RSB	R7, LR, #32
;__Lib_MathDouble.c, 1477 :: 		
0x12C6	0xFA20F707  LSR	R7, R0, R7
;__Lib_MathDouble.c, 1478 :: 		
0x12CA	0xEA410107  ORR	R1, R1, R7, LSL #0
;__Lib_MathDouble.c, 1479 :: 		
0x12CE	0xFA00F00E  LSL	R0, R0, LR
;__Lib_MathDouble.c, 1481 :: 		
__me_cont:
0x12D2	0xF4111F00  TST	R1, #2097152
;__Lib_MathDouble.c, 1482 :: 		
0x12D6	0xD102    BNE	__me_lab4
;__Lib_MathDouble.c, 1483 :: 		
0x12D8	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 1484 :: 		
0x12DA	0x4149    ADCS	R1, R1
;__Lib_MathDouble.c, 1485 :: 		
0x12DC	0x1E64    SUBS	R4, R4, #1
;__Lib_MathDouble.c, 1487 :: 		
__me_lab4:
0x12DE	0x1C40    ADDS	R0, R0, #1
;__Lib_MathDouble.c, 1488 :: 		
0x12E0	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1489 :: 		
0x12E4	0xF4110F80  TST	R1, #4194304
;__Lib_MathDouble.c, 1490 :: 		
0x12E8	0xBF1A    ITTE	NE
;__Lib_MathDouble.c, 1491 :: 		
0x12EA	0x1C64    ADDNE	R4, R4, #1
;__Lib_MathDouble.c, 1492 :: 		
0x12EC	0xF4210180  BICNE	R1, R1, #4194304
;__Lib_MathDouble.c, 1493 :: 		
0x12F0	0xF4211100  BICEQ	R1, R1, #2097152
;__Lib_MathDouble.c, 1495 :: 		
0x12F4	0xF44F7740  MOV	R7, #768
;__Lib_MathDouble.c, 1496 :: 		
0x12F8	0x37FF    ADDS	R7, #255
;__Lib_MathDouble.c, 1497 :: 		
0x12FA	0x19E4    ADDS	R4, R4, R7
;__Lib_MathDouble.c, 1498 :: 		
0x12FC	0xBFDE    ITTT	LE
;__Lib_MathDouble.c, 1499 :: 		
0x12FE	0xF04F0100  MOVLE	R1, #0
;__Lib_MathDouble.c, 1500 :: 		
0x1302	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 1502 :: 		
0x1306	0xE014    BLE	__me_lab_end
;__Lib_MathDouble.c, 1504 :: 		
0x1308	0xF5076780  ADD	R7, R7, #1024
;__Lib_MathDouble.c, 1505 :: 		
0x130C	0x42BC    CMP	R4, R7
;__Lib_MathDouble.c, 1506 :: 		
0x130E	0xD207    BCS	__me_ovfl
;__Lib_MathDouble.c, 1508 :: 		
0x1310	0x0849    LSRS	R1, R1, #1
;__Lib_MathDouble.c, 1509 :: 		
0x1312	0xEA4F0030  RRX	R0, R0
;__Lib_MathDouble.c, 1510 :: 		
0x1316	0xEA415104  ORR	R1, R1, R4, LSL #20
;__Lib_MathDouble.c, 1511 :: 		
0x131A	0xEA410108  ORR	R1, R1, R8, LSL #0
;__Lib_MathDouble.c, 1514 :: 		
0x131E	0xE008    B	__me_lab_end
;__Lib_MathDouble.c, 1516 :: 		
__me_ovfl:
0x1320	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 1517 :: 		
0x1322	0x21FF    MOVS	R1, #255
;__Lib_MathDouble.c, 1518 :: 		
0x1324	0xEA4F01C1  LSL	R1, R1, #3
;__Lib_MathDouble.c, 1519 :: 		
0x1328	0x1DC9    ADDS	R1, R1, #7
;__Lib_MathDouble.c, 1520 :: 		
0x132A	0xEA4F5101  LSL	R1, R1, #20
;__Lib_MathDouble.c, 1521 :: 		
0x132E	0xEA410108  ORR	R1, R1, R8, LSL #0
;__Lib_MathDouble.c, 1522 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 1523 :: 		
0x1332	0xE8BD41FC  POP	(R2, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 1525 :: 		
L_end__Div_DP:
0x1336	0xB001    ADD	SP, SP, #4
0x1338	0x4770    BX	LR
; end of __Div_DP
_sample_finger:
;Input Capture Complete 5ch.c, 639 :: 		void sample_finger( struct finger *fngr) {
; fngr start address is: 0 (R0)
0x1B00	0xB083    SUB	SP, SP, #12
0x1B02	0xF8CDE000  STR	LR, [SP, #0]
0x1B06	0x4681    MOV	R9, R0
; fngr end address is: 0 (R0)
; fngr start address is: 36 (R9)
;Input Capture Complete 5ch.c, 642 :: 		fngr->enc_overflow_delta = (unsigned long) fngr->enc_overflow_end - fngr->enc_overflow_start;
0x1B08	0xF1090334  ADD	R3, R9, #52
0x1B0C	0xF1090130  ADD	R1, R9, #48
0x1B10	0x680A    LDR	R2, [R1, #0]
0x1B12	0xF109012C  ADD	R1, R9, #44
0x1B16	0x6809    LDR	R1, [R1, #0]
0x1B18	0x1A51    SUB	R1, R2, R1
0x1B1A	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 645 :: 		fngr->enc_overflow_ticks = (unsigned long) fngr->enc_overflow_delta * (ENCODER_TIM_RELOAD - 3);
0x1B1C	0xF1090338  ADD	R3, R9, #56
0x1B20	0xF1090134  ADD	R1, R9, #52
0x1B24	0x680A    LDR	R2, [R1, #0]
0x1B26	0x496A    LDR	R1, [PC, #424]
0x1B28	0x6809    LDR	R1, [R1, #0]
0x1B2A	0x1EC9    SUBS	R1, R1, #3
0x1B2C	0x4351    MULS	R1, R2, R1
0x1B2E	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 648 :: 		fngr->enc_delta_ticks = (unsigned long) fngr->enc_end_time - fngr->enc_start_time;
0x1B30	0xF1090328  ADD	R3, R9, #40
0x1B34	0xF1090124  ADD	R1, R9, #36
0x1B38	0x680A    LDR	R2, [R1, #0]
0x1B3A	0xF1090120  ADD	R1, R9, #32
0x1B3E	0x6809    LDR	R1, [R1, #0]
0x1B40	0x1A51    SUB	R1, R2, R1
0x1B42	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 651 :: 		fngr->enc_total_ticks = (unsigned long) fngr->enc_overflow_ticks + fngr->enc_delta_ticks;
0x1B44	0xF109033C  ADD	R3, R9, #60
0x1B48	0xF1090138  ADD	R1, R9, #56
0x1B4C	0x680A    LDR	R2, [R1, #0]
0x1B4E	0xF1090128  ADD	R1, R9, #40
0x1B52	0x6809    LDR	R1, [R1, #0]
0x1B54	0x1851    ADDS	R1, R2, R1
0x1B56	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 654 :: 		fngr->input_sig_period = (long double) fngr->enc_total_ticks * encoder_timer_period_ms;
0x1B58	0xF1090144  ADD	R1, R9, #68
0x1B5C	0x9101    STR	R1, [SP, #4]
0x1B5E	0xF109013C  ADD	R1, R9, #60
0x1B62	0x6809    LDR	R1, [R1, #0]
0x1B64	0x4608    MOV	R0, R1
0x1B66	0xF7FFF903  BL	__UnsignedIntegralToLongDouble+0
0x1B6A	0x4A5A    LDR	R2, [PC, #360]
0x1B6C	0xED120B00  VLDR.64	D0, [R2, #0]
0x1B70	0xEE102A10  VMOV	R2, S0
0x1B74	0xEE103A90  VMOV	R3, S1
0x1B78	0xF7FFFBE0  BL	__Mul_DP+0
0x1B7C	0x9A01    LDR	R2, [SP, #4]
0x1B7E	0xE9C20100  STRD	R0, R1, [R2, #0]
;Input Capture Complete 5ch.c, 657 :: 		fngr->input_sig_frequency = (unsigned long) 1000.0 / fngr->input_sig_period;
0x1B82	0xF1090140  ADD	R1, R9, #64
0x1B86	0x9102    STR	R1, [SP, #8]
0x1B88	0xF1090144  ADD	R1, R9, #68
0x1B8C	0x9101    STR	R1, [SP, #4]
0x1B8E	0xF44F717A  MOV	R1, #1000
0x1B92	0xEE001A10  VMOV	S0, R1
0x1B96	0xEE100A10  VMOV	R0, S0
0x1B9A	0xF7FFF8E9  BL	__UnsignedIntegralToLongDouble+0
0x1B9E	0x9A01    LDR	R2, [SP, #4]
0x1BA0	0xE9D22300  LDRD	R2, R3, [R2, #0]
0x1BA4	0xF7FFFB24  BL	__Div_DP+0
0x1BA8	0xF7FFFAD0  BL	__LongDoubleToUnsignedIntegral+0
0x1BAC	0x9902    LDR	R1, [SP, #8]
0x1BAE	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 658 :: 		if (fngr->input_sig_frequency > 20000.0)                                    // NEW: Handles startup error
0x1BB0	0xF1090140  ADD	R1, R9, #64
0x1BB4	0x6809    LDR	R1, [R1, #0]
0x1BB6	0xEE001A90  VMOV	S1, R1
0x1BBA	0xEEF80A60  VCVT.F32.U32	S1, S1
0x1BBE	0x4946    LDR	R1, [PC, #280]
0x1BC0	0xEE001A10  VMOV	S0, R1
0x1BC4	0xEEF40AC0  VCMPE.F32	S1, S0
0x1BC8	0xEEF1FA10  VMRS	APSR_nzcv, FPSCR
0x1BCC	0xDD03    BLE	L_sample_finger39
;Input Capture Complete 5ch.c, 659 :: 		fngr->input_sig_frequency = 0;
0x1BCE	0xF1090240  ADD	R2, R9, #64
0x1BD2	0x2100    MOVS	R1, #0
0x1BD4	0x6011    STR	R1, [R2, #0]
L_sample_finger39:
;Input Capture Complete 5ch.c, 662 :: 		if (fngr->enc_chan_b == 1) {                                                // Clockwise
0x1BD6	0xF109011C  ADD	R1, R9, #28
0x1BDA	0x8809    LDRH	R1, [R1, #0]
0x1BDC	0x2901    CMP	R1, #1
0x1BDE	0xD110    BNE	L_sample_finger40
;Input Capture Complete 5ch.c, 663 :: 		fngr->direction_actual = CONTRACT;
0x1BE0	0xF1090218  ADD	R2, R9, #24
0x1BE4	0x2100    MOVS	R1, #0
0x1BE6	0x8011    STRH	R1, [R2, #0]
;Input Capture Complete 5ch.c, 664 :: 		fngr->position_actual += (fngr->position_temp / NORMALIZATION_CONSTANT);                       // Calculate new position
0x1BE8	0xF1090314  ADD	R3, R9, #20
0x1BEC	0xF1090110  ADD	R1, R9, #16
0x1BF0	0x680A    LDR	R2, [R1, #0]
0x1BF2	0x493A    LDR	R1, [PC, #232]
0x1BF4	0x8809    LDRH	R1, [R1, #0]
0x1BF6	0xFB92F2F1  SDIV	R2, R2, R1
0x1BFA	0x6819    LDR	R1, [R3, #0]
0x1BFC	0x1889    ADDS	R1, R1, R2
0x1BFE	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 665 :: 		}
0x1C00	0xE018    B	L_sample_finger41
L_sample_finger40:
;Input Capture Complete 5ch.c, 667 :: 		else if (fngr->enc_chan_b == 0) {                                           // Counter Clockwise
0x1C02	0xF109011C  ADD	R1, R9, #28
0x1C06	0x8809    LDRH	R1, [R1, #0]
0x1C08	0xB981    CBNZ	R1, L_sample_finger42
;Input Capture Complete 5ch.c, 668 :: 		fngr->direction_actual = EXTEND;
0x1C0A	0xF1090218  ADD	R2, R9, #24
0x1C0E	0x2101    MOVS	R1, #1
0x1C10	0x8011    STRH	R1, [R2, #0]
;Input Capture Complete 5ch.c, 669 :: 		fngr->position_actual -= (fngr->position_temp / NORMALIZATION_CONSTANT);                       // Calculate new position
0x1C12	0xF1090314  ADD	R3, R9, #20
0x1C16	0xF1090110  ADD	R1, R9, #16
0x1C1A	0x680A    LDR	R2, [R1, #0]
0x1C1C	0x492F    LDR	R1, [PC, #188]
0x1C1E	0x8809    LDRH	R1, [R1, #0]
0x1C20	0xFB92F2F1  SDIV	R2, R2, R1
0x1C24	0x6819    LDR	R1, [R3, #0]
0x1C26	0x1A89    SUB	R1, R1, R2
0x1C28	0x6019    STR	R1, [R3, #0]
;Input Capture Complete 5ch.c, 670 :: 		}
0x1C2A	0xE003    B	L_sample_finger43
L_sample_finger42:
;Input Capture Complete 5ch.c, 673 :: 		fngr->direction_actual = 7;
0x1C2C	0xF1090218  ADD	R2, R9, #24
0x1C30	0x2107    MOVS	R1, #7
0x1C32	0x8011    STRH	R1, [R2, #0]
;Input Capture Complete 5ch.c, 674 :: 		}
L_sample_finger43:
L_sample_finger41:
;Input Capture Complete 5ch.c, 687 :: 		fngr->position_temp = 0;
0x1C34	0xF1090210  ADD	R2, R9, #16
0x1C38	0x2100    MOVS	R1, #0
0x1C3A	0x6011    STR	R1, [R2, #0]
;Input Capture Complete 5ch.c, 694 :: 		if(strcmp(fngr->name, "fngr_pointer") == 0)   {
0x1C3C	0x4928    LDR	R1, [PC, #160]
0x1C3E	0x4648    MOV	R0, R9
0x1C40	0xF7FFFC00  BL	_strcmp+0
0x1C44	0xB940    CBNZ	R0, L_sample_finger44
;Input Capture Complete 5ch.c, 695 :: 		fngr->tip_force = ADC1_Get_Sample(CHANNEL_ADC_POINTER_TIP_FORCE);
0x1C46	0xF109014C  ADD	R1, R9, #76
; fngr end address is: 36 (R9)
0x1C4A	0x9101    STR	R1, [SP, #4]
0x1C4C	0x2007    MOVS	R0, #7
0x1C4E	0xF7FFFA37  BL	_ADC1_Get_Sample+0
0x1C52	0x9901    LDR	R1, [SP, #4]
0x1C54	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 696 :: 		}
0x1C56	0xE036    B	L_sample_finger45
L_sample_finger44:
;Input Capture Complete 5ch.c, 697 :: 		else if (strcmp(fngr->name, "fngr_middle") == 0) {
; fngr start address is: 36 (R9)
0x1C58	0x4922    LDR	R1, [PC, #136]
0x1C5A	0x4648    MOV	R0, R9
0x1C5C	0xF7FFFBF2  BL	_strcmp+0
0x1C60	0xB940    CBNZ	R0, L_sample_finger46
;Input Capture Complete 5ch.c, 698 :: 		fngr->tip_force = ADC1_Get_Sample(CHANNEL_ADC_MIDDLE_TIP_FORCE);
0x1C62	0xF109014C  ADD	R1, R9, #76
; fngr end address is: 36 (R9)
0x1C66	0x9101    STR	R1, [SP, #4]
0x1C68	0x2009    MOVS	R0, #9
0x1C6A	0xF7FFFA29  BL	_ADC1_Get_Sample+0
0x1C6E	0x9901    LDR	R1, [SP, #4]
0x1C70	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 699 :: 		}
0x1C72	0xE028    B	L_sample_finger47
L_sample_finger46:
;Input Capture Complete 5ch.c, 700 :: 		else if (strcmp(fngr->name, "fngr_ring") == 0) {
; fngr start address is: 36 (R9)
0x1C74	0x491C    LDR	R1, [PC, #112]
0x1C76	0x4648    MOV	R0, R9
0x1C78	0xF7FFFBE4  BL	_strcmp+0
0x1C7C	0xB940    CBNZ	R0, L_sample_finger48
;Input Capture Complete 5ch.c, 701 :: 		fngr->tip_force = ADC1_Get_Sample(CHANNEL_ADC_RING_TIP_FORCE);
0x1C7E	0xF109014C  ADD	R1, R9, #76
; fngr end address is: 36 (R9)
0x1C82	0x9101    STR	R1, [SP, #4]
0x1C84	0x200B    MOVS	R0, #11
0x1C86	0xF7FFFA1B  BL	_ADC1_Get_Sample+0
0x1C8A	0x9901    LDR	R1, [SP, #4]
0x1C8C	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 702 :: 		}
0x1C8E	0xE01A    B	L_sample_finger49
L_sample_finger48:
;Input Capture Complete 5ch.c, 703 :: 		else if (strcmp(fngr->name, "fngr_pinky") == 0) {
; fngr start address is: 36 (R9)
0x1C90	0x4916    LDR	R1, [PC, #88]
0x1C92	0x4648    MOV	R0, R9
0x1C94	0xF7FFFBD6  BL	_strcmp+0
0x1C98	0xB940    CBNZ	R0, L_sample_finger50
;Input Capture Complete 5ch.c, 704 :: 		fngr->tip_force = ADC1_Get_Sample(CHANNEL_ADC_PINKY_TIP_FORCE);
0x1C9A	0xF109014C  ADD	R1, R9, #76
; fngr end address is: 36 (R9)
0x1C9E	0x9101    STR	R1, [SP, #4]
0x1CA0	0x200D    MOVS	R0, #13
0x1CA2	0xF7FFFA0D  BL	_ADC1_Get_Sample+0
0x1CA6	0x9901    LDR	R1, [SP, #4]
0x1CA8	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 705 :: 		}
0x1CAA	0xE00C    B	L_sample_finger51
L_sample_finger50:
;Input Capture Complete 5ch.c, 706 :: 		else if (strcmp(fngr->name, "fngr_thumb") == 0) {
; fngr start address is: 36 (R9)
0x1CAC	0x4910    LDR	R1, [PC, #64]
0x1CAE	0x4648    MOV	R0, R9
0x1CB0	0xF7FFFBC8  BL	_strcmp+0
0x1CB4	0xB938    CBNZ	R0, L_sample_finger52
;Input Capture Complete 5ch.c, 707 :: 		fngr->tip_force = ADC1_Get_Sample(CHANNEL_ADC_THUMB_TIP_FORCE);
0x1CB6	0xF109014C  ADD	R1, R9, #76
; fngr end address is: 36 (R9)
0x1CBA	0x9101    STR	R1, [SP, #4]
0x1CBC	0x2003    MOVS	R0, #3
0x1CBE	0xF7FFF9FF  BL	_ADC1_Get_Sample+0
0x1CC2	0x9901    LDR	R1, [SP, #4]
0x1CC4	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 708 :: 		}
L_sample_finger52:
L_sample_finger51:
L_sample_finger49:
L_sample_finger47:
L_sample_finger45:
;Input Capture Complete 5ch.c, 709 :: 		}
L_end_sample_finger:
0x1CC6	0xF8DDE000  LDR	LR, [SP, #0]
0x1CCA	0xB003    ADD	SP, SP, #12
0x1CCC	0x4770    BX	LR
0x1CCE	0xBF00    NOP
0x1CD0	0x01282000  	_ENCODER_TIM_RELOAD+0
0x1CD4	0x02102000  	_encoder_timer_period_ms+0
0x1CD8	0x4000469C  	#1184645120
0x1CDC	0x01222000  	_NORMALIZATION_CONSTANT+0
0x1CE0	0x01302000  	?lstr15_Input_32Capture_32Complete_325ch+0
0x1CE4	0x013D2000  	?lstr16_Input_32Capture_32Complete_325ch+0
0x1CE8	0x01492000  	?lstr17_Input_32Capture_32Complete_325ch+0
0x1CEC	0x01532000  	?lstr18_Input_32Capture_32Complete_325ch+0
0x1CF0	0x015E2000  	?lstr19_Input_32Capture_32Complete_325ch+0
; end of _sample_finger
__Mul_DP:
;__Lib_MathDouble.c, 1275 :: 		
0x133C	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 1277 :: 		
0x133E	0xE92D41FC  PUSH	(R2, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 1279 :: 		
0x1342	0xEA910803  EORS	R8, R1, R3, LSL #0
;__Lib_MathDouble.c, 1280 :: 		
0x1346	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 1281 :: 		
0x1348	0xF04F4800  MOVMI	R8, #-2147483648
;__Lib_MathDouble.c, 1282 :: 		
0x134C	0xF04F0800  MOVPL	R8, #0
;__Lib_MathDouble.c, 1284 :: 		
0x1350	0xEA4F25C3  LSL	R5, R3, #11
;__Lib_MathDouble.c, 1285 :: 		
0x1354	0xEA455552  ORR	R5, R5, R2, LSR #21
;__Lib_MathDouble.c, 1286 :: 		
0x1358	0xEA4F26C2  LSL	R6, R2, #11
;__Lib_MathDouble.c, 1287 :: 		
0x135C	0xEA4F0743  LSL	R7, R3, #1
;__Lib_MathDouble.c, 1288 :: 		
0x1360	0x0D7F    LSRS	R7, R7, #21
;__Lib_MathDouble.c, 1289 :: 		
0x1362	0xBF11    ITEEE	NE
;__Lib_MathDouble.c, 1290 :: 		
0x1364	0xF0454500  ORRNE	R5, R5, #-2147483648
;__Lib_MathDouble.c, 1291 :: 		
0x1368	0xF04F0100  MOVEQ	R1, #0
;__Lib_MathDouble.c, 1292 :: 		
0x136C	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 1294 :: 		
0x1370	0xE063    BEQ	__me_lab_end
;__Lib_MathDouble.c, 1296 :: 		
0x1372	0xF45F6EE0  MOVS	LR, #1792
;__Lib_MathDouble.c, 1297 :: 		
0x1376	0xF11E0EFF  ADDS	LR, LR, #255
;__Lib_MathDouble.c, 1298 :: 		
0x137A	0x4577    CMP	R7, LR
;__Lib_MathDouble.c, 1299 :: 		
0x137C	0xD056    BEQ	__me_ovfl
;__Lib_MathDouble.c, 1301 :: 		
0x137E	0xEA4F23C1  LSL	R3, R1, #11
;__Lib_MathDouble.c, 1302 :: 		
0x1382	0xEA435350  ORR	R3, R3, R0, LSR #21
;__Lib_MathDouble.c, 1303 :: 		
0x1386	0xEA4F22C0  LSL	R2, R0, #11
;__Lib_MathDouble.c, 1304 :: 		
0x138A	0xEA4F0441  LSL	R4, R1, #1
;__Lib_MathDouble.c, 1305 :: 		
0x138E	0x0D64    LSRS	R4, R4, #21
;__Lib_MathDouble.c, 1306 :: 		
0x1390	0xBF11    ITEEE	NE
;__Lib_MathDouble.c, 1307 :: 		
0x1392	0xF0434300  ORRNE	R3, R3, #-2147483648
;__Lib_MathDouble.c, 1308 :: 		
0x1396	0xF04F0100  MOVEQ	R1, #0
;__Lib_MathDouble.c, 1309 :: 		
0x139A	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 1311 :: 		
0x139E	0xE04C    BEQ	__me_lab_end
;__Lib_MathDouble.c, 1313 :: 		
0x13A0	0x4574    CMP	R4, LR
;__Lib_MathDouble.c, 1314 :: 		
0x13A2	0xD043    BEQ	__me_ovfl
;__Lib_MathDouble.c, 1316 :: 		
0x13A4	0x19E4    ADDS	R4, R4, R7
;__Lib_MathDouble.c, 1319 :: 		
0x13A6	0xFBA30105  UMULL	R0, R1, R3, R5
;__Lib_MathDouble.c, 1320 :: 		
0x13AA	0xFBA3E706  UMULL	LR, R7, R3, R6
;__Lib_MathDouble.c, 1321 :: 		
0x13AE	0xFBA26306  UMULL	R6, R3, R2, R6
;__Lib_MathDouble.c, 1322 :: 		
0x13B2	0xEB1E0E03  ADDS	LR, LR, R3, LSL #0
;__Lib_MathDouble.c, 1323 :: 		
0x13B6	0xF1570700  ADCS	R7, R7, #0
;__Lib_MathDouble.c, 1324 :: 		
0x13BA	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1325 :: 		
0x13BE	0xFBA26305  UMULL	R6, R3, R2, R5
;__Lib_MathDouble.c, 1326 :: 		
0x13C2	0xEB1E0E06  ADDS	LR, LR, R6, LSL #0
;__Lib_MathDouble.c, 1327 :: 		
0x13C6	0xF1570700  ADCS	R7, R7, #0
;__Lib_MathDouble.c, 1328 :: 		
0x13CA	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1329 :: 		
0x13CE	0x18FF    ADDS	R7, R7, R3
;__Lib_MathDouble.c, 1330 :: 		
0x13D0	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1331 :: 		
0x13D4	0x19C0    ADDS	R0, R0, R7
;__Lib_MathDouble.c, 1332 :: 		
0x13D6	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1334 :: 		
0x13DA	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 1335 :: 		
0x13DC	0xF44F6E80  MOVMI	LR, #1024
;__Lib_MathDouble.c, 1336 :: 		
0x13E0	0xF44F7E00  MOVPL	LR, #512
;__Lib_MathDouble.c, 1338 :: 		
0x13E4	0xEB10000E  ADDS	R0, R0, LR, LSL #0
;__Lib_MathDouble.c, 1339 :: 		
0x13E8	0xF1510100  ADCS	R1, R1, #0
;__Lib_MathDouble.c, 1341 :: 		
0x13EC	0xBF48    IT	MI
;__Lib_MathDouble.c, 1342 :: 		
0x13EE	0x1C64    ADDMI	R4, R4, #1
;__Lib_MathDouble.c, 1343 :: 		
0x13F0	0xD401    BMI	__me_lab1
;__Lib_MathDouble.c, 1344 :: 		
0x13F2	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 1345 :: 		
0x13F4	0x4149    ADCS	R1, R1
;__Lib_MathDouble.c, 1347 :: 		
__me_lab1:
0x13F6	0xF45F7740  MOVS	R7, #768
;__Lib_MathDouble.c, 1348 :: 		
0x13FA	0x37FF    ADDS	R7, #255
;__Lib_MathDouble.c, 1349 :: 		
0x13FC	0x1BE4    SUBS	R4, R4, R7
;__Lib_MathDouble.c, 1350 :: 		
0x13FE	0xBFDE    ITTT	LE
;__Lib_MathDouble.c, 1351 :: 		
0x1400	0xF04F0100  MOVLE	R1, #0
;__Lib_MathDouble.c, 1352 :: 		
0x1404	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 1354 :: 		
0x1408	0xE017    BLE	__me_lab_end
;__Lib_MathDouble.c, 1356 :: 		
0x140A	0xF5176780  ADDS	R7, R7, #1024
;__Lib_MathDouble.c, 1357 :: 		
0x140E	0x42BC    CMP	R4, R7
;__Lib_MathDouble.c, 1358 :: 		
0x1410	0xD20C    BCS	__me_ovfl
;__Lib_MathDouble.c, 1360 :: 		
0x1412	0xEA4F20D0  LSR	R0, R0, #11
;__Lib_MathDouble.c, 1361 :: 		
0x1416	0xEA405041  ORR	R0, R0, R1, LSL #21
;__Lib_MathDouble.c, 1362 :: 		
0x141A	0xEA4F0141  LSL	R1, R1, #1
;__Lib_MathDouble.c, 1363 :: 		
0x141E	0xEA4F3111  LSR	R1, R1, #12
;__Lib_MathDouble.c, 1364 :: 		
0x1422	0xEA415104  ORR	R1, R1, R4, LSL #20
;__Lib_MathDouble.c, 1365 :: 		
0x1426	0xEA410108  ORR	R1, R1, R8, LSL #0
;__Lib_MathDouble.c, 1368 :: 		
0x142A	0xE006    B	__me_lab_end
;__Lib_MathDouble.c, 1371 :: 		
__me_ovfl:
0x142C	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 1372 :: 		
0x142E	0x21FF    MOVS	R1, #255
;__Lib_MathDouble.c, 1373 :: 		
0x1430	0x00C9    LSLS	R1, R1, #3
;__Lib_MathDouble.c, 1374 :: 		
0x1432	0x1DC9    ADDS	R1, R1, #7
;__Lib_MathDouble.c, 1375 :: 		
0x1434	0x0509    LSLS	R1, R1, #20
;__Lib_MathDouble.c, 1376 :: 		
0x1436	0xEA510108  ORRS	R1, R1, R8, LSL #0
;__Lib_MathDouble.c, 1377 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 1378 :: 		
0x143A	0xE8BD41FC  POP	(R2, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 1380 :: 		
L_end__Mul_DP:
0x143E	0xB001    ADD	SP, SP, #4
0x1440	0x4770    BX	LR
; end of __Mul_DP
__LongDoubleToUnsignedIntegral:
;__Lib_MathDouble.c, 134 :: 		
0x114C	0xB081    SUB	SP, SP, #4
0x114E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_MathDouble.c, 136 :: 		
0x1152	0xB504    PUSH	(R2, R14)
;__Lib_MathDouble.c, 137 :: 		
0x1154	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 138 :: 		
0x1156	0xD502    BPL	__me_pos
;__Lib_MathDouble.c, 142 :: 		
0x1158	0xF7FFFB9E  BL	__LongDoubleToSignedIntegral+0
;__Lib_MathDouble.c, 143 :: 		
0x115C	0xE01C    B	__me_endLab
;__Lib_MathDouble.c, 144 :: 		
__me_pos:
;__Lib_MathDouble.c, 147 :: 		
0x115E	0xEA4F0241  LSL	R2, R1, #1
;__Lib_MathDouble.c, 148 :: 		
0x1162	0xEA4F5252  LSR	R2, R2, #21
;__Lib_MathDouble.c, 150 :: 		
0x1166	0xF5B27240  SUBS	R2, R2, #768
;__Lib_MathDouble.c, 151 :: 		
0x116A	0x3AFF    SUBS	R2, #255
;__Lib_MathDouble.c, 152 :: 		
0x116C	0xBF44    ITT	MI
;__Lib_MathDouble.c, 153 :: 		
0x116E	0xF04F0000  MOVMI	R0, #0
;__Lib_MathDouble.c, 155 :: 		
0x1172	0xE011    BMI	__me_endLab
;__Lib_MathDouble.c, 157 :: 		
0x1174	0xF1D2021F  RSBS	R2, R2, #31
;__Lib_MathDouble.c, 158 :: 		
0x1178	0xD30C    BCC	__me_ovfl
;__Lib_MathDouble.c, 160 :: 		
0x117A	0xEA4F21C1  LSL	R1, R1, #11
;__Lib_MathDouble.c, 161 :: 		
0x117E	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 163 :: 		
0x1182	0x40D1    LSRS	R1, R2
;__Lib_MathDouble.c, 164 :: 		
0x1184	0x2A0B    CMP	R2, #11
;__Lib_MathDouble.c, 165 :: 		
0x1186	0xBF3E    ITTT	CC
;__Lib_MathDouble.c, 166 :: 		
0x1188	0x3215    ADDCC	R2, #21
;__Lib_MathDouble.c, 167 :: 		
0x118A	0xFA20F202  LSRCC	R2, R0, R2
;__Lib_MathDouble.c, 168 :: 		
0x118E	0x4311    ORRCC	R1, R2
;__Lib_MathDouble.c, 170 :: 		
0x1190	0x4608    MOV	R0, R1
;__Lib_MathDouble.c, 173 :: 		
0x1192	0xE001    B	__me_endLab
;__Lib_MathDouble.c, 175 :: 		
__me_ovfl:
0x1194	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 176 :: 		
0x1196	0x1E40    SUBS	R0, R0, #1
;__Lib_MathDouble.c, 178 :: 		
__me_endLab:
;__Lib_MathDouble.c, 179 :: 		
0x1198	0xE8BD4004  POP	(R2, R14)
;__Lib_MathDouble.c, 181 :: 		
L_end__LongDoubleToUnsignedIntegral:
0x119C	0xF8DDE000  LDR	LR, [SP, #0]
0x11A0	0xB001    ADD	SP, SP, #4
0x11A2	0x4770    BX	LR
; end of __LongDoubleToUnsignedIntegral
__LongDoubleToSignedIntegral:
;__Lib_MathDouble.c, 87 :: 		
0x0898	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 89 :: 		
0x089A	0xB50C    PUSH	(R2, R3, R14)
;__Lib_MathDouble.c, 91 :: 		
0x089C	0xEA4F0341  LSL	R3, R1, #1
;__Lib_MathDouble.c, 92 :: 		
0x08A0	0xEA4F5353  LSR	R3, R3, #21
;__Lib_MathDouble.c, 94 :: 		
0x08A4	0xF5B37340  SUBS	R3, R3, #768
;__Lib_MathDouble.c, 95 :: 		
0x08A8	0x3BFF    SUBS	R3, #255
;__Lib_MathDouble.c, 96 :: 		
0x08AA	0xBF44    ITT	MI
;__Lib_MathDouble.c, 97 :: 		
0x08AC	0xF04F0000  MOVMI	R0, #0
;__Lib_MathDouble.c, 99 :: 		
0x08B0	0xE017    BMI	__me_lab_end
;__Lib_MathDouble.c, 101 :: 		
0x08B2	0xF1D3031F  RSBS	R3, R3, #31
;__Lib_MathDouble.c, 102 :: 		
0x08B6	0xD90F    BLS	__me_ovfl
;__Lib_MathDouble.c, 104 :: 		
0x08B8	0xEA4F22C1  LSL	R2, R1, #11
;__Lib_MathDouble.c, 105 :: 		
0x08BC	0xF0424200  ORR	R2, R2, #-2147483648
;__Lib_MathDouble.c, 107 :: 		
0x08C0	0xFA22F203  LSR	R2, R2, R3
;__Lib_MathDouble.c, 108 :: 		
0x08C4	0x2B0B    CMP	R3, #11
;__Lib_MathDouble.c, 109 :: 		
0x08C6	0xBF3E    ITTT	CC
;__Lib_MathDouble.c, 110 :: 		
0x08C8	0x3315    ADDCC	R3, #21
;__Lib_MathDouble.c, 111 :: 		
0x08CA	0x40D8    LSRCC	R0, R3
;__Lib_MathDouble.c, 112 :: 		
0x08CC	0x4302    ORRCC	R2, R0
;__Lib_MathDouble.c, 114 :: 		
0x08CE	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 115 :: 		
0x08D0	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 116 :: 		
0x08D2	0x4250    RSBMI	R0, R2, #0
;__Lib_MathDouble.c, 117 :: 		
0x08D4	0x4610    MOVPL	R0, R2
;__Lib_MathDouble.c, 120 :: 		
0x08D6	0xE004    B	__me_lab_end
;__Lib_MathDouble.c, 122 :: 		
__me_ovfl:
0x08D8	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 123 :: 		
0x08DA	0xF04F4000  MOV	R0, #-2147483648
;__Lib_MathDouble.c, 124 :: 		
0x08DE	0xBF58    IT	PL
;__Lib_MathDouble.c, 125 :: 		
0x08E0	0x1E40    SUBPL	R0, R0, #1
;__Lib_MathDouble.c, 126 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 127 :: 		
0x08E2	0xE8BD400C  POP	(R2, R3, R14)
;__Lib_MathDouble.c, 129 :: 		
L_end__LongDoubleToSignedIntegral:
0x08E6	0xB001    ADD	SP, SP, #4
0x08E8	0x4770    BX	LR
; end of __LongDoubleToSignedIntegral
_ADC1_Get_Sample:
;__Lib_ADC_123_32F20x_16ch.c, 180 :: 		
; channel start address is: 0 (R0)
0x10C0	0xB081    SUB	SP, SP, #4
0x10C2	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 0 (R0)
; channel start address is: 0 (R0)
;__Lib_ADC_123_32F20x_16ch.c, 181 :: 		
0x10C6	0xB281    UXTH	R1, R0
; channel end address is: 0 (R0)
0x10C8	0x4803    LDR	R0, [PC, #12]
0x10CA	0xF7FFFC0F  BL	__Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample+0
;__Lib_ADC_123_32F20x_16ch.c, 188 :: 		
L_end_ADC1_Get_Sample:
0x10CE	0xF8DDE000  LDR	LR, [SP, #0]
0x10D2	0xB001    ADD	SP, SP, #4
0x10D4	0x4770    BX	LR
0x10D6	0xBF00    NOP
0x10D8	0x20004001  	ADC1_SR+0
; end of _ADC1_Get_Sample
__Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample:
;__Lib_ADC_123_32F20x_16ch.c, 167 :: 		
; channel start address is: 4 (R1)
; base start address is: 0 (R0)
0x08EC	0xB081    SUB	SP, SP, #4
0x08EE	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; channel start address is: 4 (R1)
;__Lib_ADC_123_32F20x_16ch.c, 168 :: 		
0x08F2	0xF2000434  ADDW	R4, R0, #52
0x08F6	0x090A    LSRS	R2, R1, #4
0x08F8	0xB292    UXTH	R2, R2
0x08FA	0xB293    UXTH	R3, R2
0x08FC	0x6822    LDR	R2, [R4, #0]
0x08FE	0xF3631204  BFI	R2, R3, #4, #1
0x0902	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 169 :: 		
0x0904	0xF2000434  ADDW	R4, R0, #52
0x0908	0x08CA    LSRS	R2, R1, #3
0x090A	0xB292    UXTH	R2, R2
0x090C	0xB293    UXTH	R3, R2
0x090E	0x6822    LDR	R2, [R4, #0]
0x0910	0xF36302C3  BFI	R2, R3, #3, #1
0x0914	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 170 :: 		
0x0916	0xF2000434  ADDW	R4, R0, #52
0x091A	0x088A    LSRS	R2, R1, #2
0x091C	0xB292    UXTH	R2, R2
0x091E	0xB293    UXTH	R3, R2
0x0920	0x6822    LDR	R2, [R4, #0]
0x0922	0xF3630282  BFI	R2, R3, #2, #1
0x0926	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 171 :: 		
0x0928	0xF2000434  ADDW	R4, R0, #52
0x092C	0x084A    LSRS	R2, R1, #1
0x092E	0xB292    UXTH	R2, R2
0x0930	0xB293    UXTH	R3, R2
0x0932	0x6822    LDR	R2, [R4, #0]
0x0934	0xF3630241  BFI	R2, R3, #1, #1
0x0938	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 172 :: 		
0x093A	0xF2000434  ADDW	R4, R0, #52
0x093E	0xB28B    UXTH	R3, R1
; channel end address is: 4 (R1)
0x0940	0x6822    LDR	R2, [R4, #0]
0x0942	0xF3630200  BFI	R2, R3, #0, #1
0x0946	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 173 :: 		
0x0948	0xF2000408  ADDW	R4, R0, #8
0x094C	0x2301    MOVS	R3, #1
0x094E	0x6822    LDR	R2, [R4, #0]
0x0950	0xF363729E  BFI	R2, R3, #30, #1
0x0954	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_123_32F20x_16ch.c, 174 :: 		
0x0956	0xF7FFFE43  BL	_Delay_1us+0
; base end address is: 0 (R0)
;__Lib_ADC_123_32F20x_16ch.c, 175 :: 		
L___Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample22:
; base start address is: 0 (R0)
0x095A	0x6803    LDR	R3, [R0, #0]
0x095C	0xF3C30240  UBFX	R2, R3, #1, #1
0x0960	0xB902    CBNZ	R2, L___Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample23
0x0962	0xE7FA    B	L___Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample22
L___Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample23:
;__Lib_ADC_123_32F20x_16ch.c, 176 :: 		
0x0964	0xF200024C  ADDW	R2, R0, #76
; base end address is: 0 (R0)
0x0968	0x6812    LDR	R2, [R2, #0]
0x096A	0xB290    UXTH	R0, R2
;__Lib_ADC_123_32F20x_16ch.c, 177 :: 		
L_end_ADCx_Get_Sample:
0x096C	0xF8DDE000  LDR	LR, [SP, #0]
0x0970	0xB001    ADD	SP, SP, #4
0x0972	0x4770    BX	LR
; end of __Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample
_Delay_1us:
;__Lib_Delays.c, 13 :: 		void Delay_1us() {
0x05E0	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 14 :: 		Delay_us(1);
0x05E2	0xF2400736  MOVW	R7, #54
0x05E6	0xF2C00700  MOVT	R7, #0
L_Delay_1us0:
0x05EA	0x1E7F    SUBS	R7, R7, #1
0x05EC	0xD1FD    BNE	L_Delay_1us0
0x05EE	0xBF00    NOP
0x05F0	0xBF00    NOP
0x05F2	0xBF00    NOP
0x05F4	0xBF00    NOP
0x05F6	0xBF00    NOP
;__Lib_Delays.c, 15 :: 		}
L_end_Delay_1us:
0x05F8	0xB001    ADD	SP, SP, #4
0x05FA	0x4770    BX	LR
; end of _Delay_1us
_Pcontrol_force:
;Input Capture Complete 5ch.c, 328 :: 		unsigned int Pcontrol_force(struct finger *fngr, unsigned int SP, unsigned int MPV)
; MPV start address is: 8 (R2)
; SP start address is: 4 (R1)
; fngr start address is: 0 (R0)
0x17E8	0xB081    SUB	SP, SP, #4
0x17EA	0xF8CDE000  STR	LR, [SP, #0]
0x17EE	0x4605    MOV	R5, R0
0x17F0	0xB28E    UXTH	R6, R1
0x17F2	0xB297    UXTH	R7, R2
; MPV end address is: 8 (R2)
; SP end address is: 4 (R1)
; fngr end address is: 0 (R0)
; fngr start address is: 20 (R5)
; SP start address is: 24 (R6)
; MPV start address is: 28 (R7)
;Input Capture Complete 5ch.c, 332 :: 		if((SP-MPV) < 0)                // moved past SP
0x17F4	0x1BF3    SUB	R3, R6, R7
0x17F6	0xB29B    UXTH	R3, R3
0x17F8	0x2B00    CMP	R3, #0
0x17FA	0xD204    BCS	L_Pcontrol_force15
;Input Capture Complete 5ch.c, 333 :: 		fngr->direction_desired = EXTEND;              // Move back
0x17FC	0xF205041A  ADDW	R4, R5, #26
0x1800	0x2301    MOVS	R3, #1
0x1802	0x8023    STRH	R3, [R4, #0]
0x1804	0xE003    B	L_Pcontrol_force16
L_Pcontrol_force15:
;Input Capture Complete 5ch.c, 335 :: 		fngr->direction_desired = CONTRACT;         // Keep going
0x1806	0xF205041A  ADDW	R4, R5, #26
0x180A	0x2300    MOVS	R3, #0
0x180C	0x8023    STRH	R3, [R4, #0]
L_Pcontrol_force16:
;Input Capture Complete 5ch.c, 337 :: 		if(strcmp(fngr->name, "fngr_pointer") == 0)     {
0x180E	0x4B15    LDR	R3, [PC, #84]
0x1810	0x4619    MOV	R1, R3
0x1812	0x4628    MOV	R0, R5
0x1814	0xF7FFFE16  BL	_strcmp+0
0x1818	0xB920    CBNZ	R0, L_Pcontrol_force17
;Input Capture Complete 5ch.c, 338 :: 		POINTER_DIRECTION = fngr->direction_desired;
0x181A	0xF205031A  ADDW	R3, R5, #26
; fngr end address is: 20 (R5)
0x181E	0x881C    LDRH	R4, [R3, #0]
0x1820	0x4B11    LDR	R3, [PC, #68]
0x1822	0x601C    STR	R4, [R3, #0]
;Input Capture Complete 5ch.c, 339 :: 		}
L_Pcontrol_force17:
;Input Capture Complete 5ch.c, 341 :: 		duty_cycle = FORCE_K*abs(SP-MPV);    // proportional control
0x1824	0x1BF3    SUB	R3, R6, R7
; SP end address is: 24 (R6)
; MPV end address is: 28 (R7)
0x1826	0xB218    SXTH	R0, R3
0x1828	0xF7FFFA9A  BL	_abs+0
0x182C	0xEE000A90  VMOV	S1, R0
0x1830	0xEEF80AE0  VCVT.F32.S32	S1, S1
0x1834	0x4B0D    LDR	R3, [PC, #52]
0x1836	0xED130A00  VLDR.32	S0, [R3, #0]
0x183A	0xEE200A20  VMUL.F32	S0, S0, S1
0x183E	0xEEBC0A40  VCVT.U32.F32	S0, S0
0x1842	0xEE103A10  VMOV	R3, S0
0x1846	0xB29B    UXTH	R3, R3
; duty_cycle start address is: 0 (R0)
0x1848	0xB298    UXTH	R0, R3
;Input Capture Complete 5ch.c, 343 :: 		if(duty_cycle > 100)
0x184A	0x2B64    CMP	R3, #100
0x184C	0xD901    BLS	L_Pcontrol_force18
;Input Capture Complete 5ch.c, 344 :: 		duty_cycle = 100;       // cap duty cycle
0x184E	0x2064    MOVS	R0, #100
0x1850	0xE003    B	L_Pcontrol_force19
L_Pcontrol_force18:
;Input Capture Complete 5ch.c, 345 :: 		else if(duty_cycle < 20)
0x1852	0x2814    CMP	R0, #20
0x1854	0xD201    BCS	L__Pcontrol_force59
;Input Capture Complete 5ch.c, 346 :: 		duty_cycle = 20;       // boost duty cycle
0x1856	0x2014    MOVS	R0, #20
; duty_cycle end address is: 0 (R0)
0x1858	0xE7FF    B	L_Pcontrol_force20
L__Pcontrol_force59:
;Input Capture Complete 5ch.c, 345 :: 		else if(duty_cycle < 20)
;Input Capture Complete 5ch.c, 346 :: 		duty_cycle = 20;       // boost duty cycle
L_Pcontrol_force20:
; duty_cycle start address is: 0 (R0)
; duty_cycle end address is: 0 (R0)
L_Pcontrol_force19:
;Input Capture Complete 5ch.c, 348 :: 		return duty_cycle;
; duty_cycle start address is: 0 (R0)
; duty_cycle end address is: 0 (R0)
;Input Capture Complete 5ch.c, 349 :: 		}
L_end_Pcontrol_force:
0x185A	0xF8DDE000  LDR	LR, [SP, #0]
0x185E	0xB001    ADD	SP, SP, #4
0x1860	0x4770    BX	LR
0x1862	0xBF00    NOP
0x1864	0x01152000  	?lstr8_Input_32Capture_32Complete_325ch+0
0x1868	0x02A84242  	GPIOE_ODR+0
0x186C	0x01242000  	_FORCE_K+0
; end of _Pcontrol_force
_abs:
;__Lib_CStdlib.c, 37 :: 		
; a start address is: 0 (R0)
0x0D60	0xB081    SUB	SP, SP, #4
; a end address is: 0 (R0)
; a start address is: 0 (R0)
;__Lib_CStdlib.c, 38 :: 		
0x0D62	0x2800    CMP	R0, #0
0x0D64	0xDA02    BGE	L_abs0
;__Lib_CStdlib.c, 39 :: 		
0x0D66	0x4241    RSBS	R1, R0, #0
; a end address is: 0 (R0)
0x0D68	0xB208    SXTH	R0, R1
0x0D6A	0xE7FF    B	L_end_abs
L_abs0:
;__Lib_CStdlib.c, 40 :: 		
; a start address is: 0 (R0)
; a end address is: 0 (R0)
;__Lib_CStdlib.c, 41 :: 		
L_end_abs:
0x0D6C	0xB001    ADD	SP, SP, #4
0x0D6E	0x4770    BX	LR
; end of _abs
_move_pointer_finger:
;Input Capture Complete 5ch.c, 353 :: 		void move_pointer_finger(struct finger *fngr, unsigned int duty_cycle)
; duty_cycle start address is: 4 (R1)
0x16B0	0xB081    SUB	SP, SP, #4
0x16B2	0xF8CDE000  STR	LR, [SP, #0]
; duty_cycle end address is: 4 (R1)
; duty_cycle start address is: 4 (R1)
;Input Capture Complete 5ch.c, 356 :: 		PWM_TIM1_Set_Duty(duty_cycle*(PWM_PERIOD_TIM1/100), _PWM_NON_INVERTED, POINTER_PWM);       // set new duty cycle
0x16B6	0x4A08    LDR	R2, [PC, #32]
0x16B8	0x8813    LDRH	R3, [R2, #0]
0x16BA	0x2264    MOVS	R2, #100
0x16BC	0xFBB3F2F2  UDIV	R2, R3, R2
0x16C0	0xB292    UXTH	R2, R2
0x16C2	0x434A    MULS	R2, R1, R2
; duty_cycle end address is: 4 (R1)
0x16C4	0x2100    MOVS	R1, #0
0x16C6	0xB290    UXTH	R0, R2
0x16C8	0x2200    MOVS	R2, #0
0x16CA	0xF7FFFEDD  BL	_PWM_TIM1_Set_Duty+0
;Input Capture Complete 5ch.c, 359 :: 		}
L_end_move_pointer_finger:
0x16CE	0xF8DDE000  LDR	LR, [SP, #0]
0x16D2	0xB001    ADD	SP, SP, #4
0x16D4	0x4770    BX	LR
0x16D6	0xBF00    NOP
0x16D8	0x01FC2000  	_PWM_PERIOD_TIM1+0
; end of _move_pointer_finger
_print_finger_info:
;Input Capture Complete 5ch.c, 713 :: 		void print_finger_info( struct finger *fngr) {
; fngr start address is: 0 (R0)
0x16DC	0xB089    SUB	SP, SP, #36
0x16DE	0xF8CDE000  STR	LR, [SP, #0]
0x16E2	0x4680    MOV	R8, R0
; fngr end address is: 0 (R0)
; fngr start address is: 32 (R8)
;Input Capture Complete 5ch.c, 720 :: 		UART1_Write_Text("\n\rFinger Name: ");                                      //Print name of current finger to terminal
0x16E4	0x4932    LDR	R1, [PC, #200]
0x16E6	0x4608    MOV	R0, R1
0x16E8	0xF000F9FC  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 721 :: 		UART1_Write_Text(fngr->name);
0x16EC	0x4640    MOV	R0, R8
0x16EE	0xF000F9F9  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 722 :: 		UART1_Write_Text("\n\r");
0x16F2	0x4930    LDR	R1, [PC, #192]
0x16F4	0x4608    MOV	R0, R1
0x16F6	0xF000F9F5  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 724 :: 		LongWordToStr(fngr->input_sig_frequency, frequency_text);                   // Print input capture signal frequency to terminal
0x16FA	0xAA01    ADD	R2, SP, #4
0x16FC	0xF1080140  ADD	R1, R8, #64
0x1700	0x6809    LDR	R1, [R1, #0]
0x1702	0x4608    MOV	R0, R1
0x1704	0x4611    MOV	R1, R2
0x1706	0xF7FFFD4D  BL	_LongWordToStr+0
;Input Capture Complete 5ch.c, 725 :: 		UART1_Write_Text("Frequency of incoming signal (Hz): ");
0x170A	0x492B    LDR	R1, [PC, #172]
0x170C	0x4608    MOV	R0, R1
0x170E	0xF000F9E9  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 726 :: 		UART1_Write_Text(frequency_text);
0x1712	0xA901    ADD	R1, SP, #4
0x1714	0x4608    MOV	R0, R1
0x1716	0xF000F9E5  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 727 :: 		UART1_Write_Text("\n\r");
0x171A	0x4928    LDR	R1, [PC, #160]
0x171C	0x4608    MOV	R0, R1
0x171E	0xF000F9E1  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 730 :: 		UART1_Write_Text("Direction of movement:             ");
0x1722	0x4927    LDR	R1, [PC, #156]
0x1724	0x4608    MOV	R0, R1
0x1726	0xF000F9DD  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 731 :: 		if(fngr->direction_actual == EXTEND)
0x172A	0xF1080118  ADD	R1, R8, #24
0x172E	0x8809    LDRH	R1, [R1, #0]
0x1730	0x2901    CMP	R1, #1
0x1732	0xD104    BNE	L_print_finger_info53
;Input Capture Complete 5ch.c, 732 :: 		UART1_Write_Text("EXTEND ");
0x1734	0x4923    LDR	R1, [PC, #140]
0x1736	0x4608    MOV	R0, R1
0x1738	0xF000F9D4  BL	_UART1_Write_Text+0
0x173C	0xE003    B	L_print_finger_info54
L_print_finger_info53:
;Input Capture Complete 5ch.c, 734 :: 		UART1_Write_Text("CONTRACT ");
0x173E	0x4922    LDR	R1, [PC, #136]
0x1740	0x4608    MOV	R0, R1
0x1742	0xF000F9CF  BL	_UART1_Write_Text+0
L_print_finger_info54:
;Input Capture Complete 5ch.c, 736 :: 		UART1_Write_Text("\n\r");
0x1746	0x4921    LDR	R1, [PC, #132]
0x1748	0x4608    MOV	R0, R1
0x174A	0xF000F9CB  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 738 :: 		LongToStr(fngr->position_actual, position_text);                            // Print total number of input events (position) to terminal
0x174E	0xF10D0213  ADD	R2, SP, #19
0x1752	0xF1080114  ADD	R1, R8, #20
0x1756	0x6809    LDR	R1, [R1, #0]
0x1758	0x4608    MOV	R0, R1
0x175A	0x4611    MOV	R1, R2
0x175C	0xF7FFFC7A  BL	_LongToStr+0
;Input Capture Complete 5ch.c, 739 :: 		UART1_Write_Text("Position of finger:                ");
0x1760	0x491B    LDR	R1, [PC, #108]
0x1762	0x4608    MOV	R0, R1
0x1764	0xF000F9BE  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 740 :: 		UART1_Write_Text(position_text);
0x1768	0xF10D0113  ADD	R1, SP, #19
0x176C	0x4608    MOV	R0, R1
0x176E	0xF000F9B9  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 741 :: 		UART1_Write_Text("\n\n\n\r");
0x1772	0x4918    LDR	R1, [PC, #96]
0x1774	0x4608    MOV	R0, R1
0x1776	0xF000F9B5  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 743 :: 		IntToStr(fngr->tip_force, toStr);                            // Print Flexiforce value (16-bit unsigned) to terminal
0x177A	0xF108014C  ADD	R1, R8, #76
; fngr end address is: 32 (R8)
0x177E	0xF9B11000  LDRSH	R1, [R1, #0]
0x1782	0xB208    SXTH	R0, R1
0x1784	0x4914    LDR	R1, [PC, #80]
0x1786	0xF7FFFCA9  BL	_IntToStr+0
;Input Capture Complete 5ch.c, 744 :: 		UART1_Write_Text("Force applied to tip of finger:                ");
0x178A	0x4914    LDR	R1, [PC, #80]
0x178C	0x4608    MOV	R0, R1
0x178E	0xF000F9A9  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 745 :: 		UART1_Write_Text(toStr);
0x1792	0x4811    LDR	R0, [PC, #68]
0x1794	0xF000F9A6  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 746 :: 		UART1_Write_Text("\n\n\n\r");
0x1798	0x4911    LDR	R1, [PC, #68]
0x179A	0x4608    MOV	R0, R1
0x179C	0xF000F9A2  BL	_UART1_Write_Text+0
;Input Capture Complete 5ch.c, 748 :: 		terminal_print_count = 0;                                                   // Reset counter for terminal printing
0x17A0	0x2200    MOVS	R2, #0
0x17A2	0x4910    LDR	R1, [PC, #64]
0x17A4	0x800A    STRH	R2, [R1, #0]
;Input Capture Complete 5ch.c, 749 :: 		}
L_end_print_finger_info:
0x17A6	0xF8DDE000  LDR	LR, [SP, #0]
0x17AA	0xB009    ADD	SP, SP, #36
0x17AC	0x4770    BX	LR
0x17AE	0xBF00    NOP
0x17B0	0x00442000  	?lstr20_Input_32Capture_32Complete_325ch+0
0x17B4	0x00542000  	?lstr21_Input_32Capture_32Complete_325ch+0
0x17B8	0x00572000  	?lstr22_Input_32Capture_32Complete_325ch+0
0x17BC	0x007B2000  	?lstr23_Input_32Capture_32Complete_325ch+0
0x17C0	0x007E2000  	?lstr24_Input_32Capture_32Complete_325ch+0
0x17C4	0x00A22000  	?lstr25_Input_32Capture_32Complete_325ch+0
0x17C8	0x00AA2000  	?lstr26_Input_32Capture_32Complete_325ch+0
0x17CC	0x00B42000  	?lstr27_Input_32Capture_32Complete_325ch+0
0x17D0	0x00B72000  	?lstr28_Input_32Capture_32Complete_325ch+0
0x17D4	0x00DB2000  	?lstr29_Input_32Capture_32Complete_325ch+0
0x17D8	0x01FE2000  	_toStr+0
0x17DC	0x00E02000  	?lstr30_Input_32Capture_32Complete_325ch+0
0x17E0	0x01102000  	?lstr31_Input_32Capture_32Complete_325ch+0
0x17E4	0x020E2000  	_terminal_print_count+0
; end of _print_finger_info
_LongWordToStr:
;__Lib_Conversions.c, 274 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x11A4	0xB081    SUB	SP, SP, #4
0x11A6	0x460A    MOV	R2, R1
0x11A8	0x4601    MOV	R1, R0
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 4 (R1)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 277 :: 		
; len start address is: 0 (R0)
0x11AA	0x2000    MOVS	R0, #0
; input end address is: 4 (R1)
; output end address is: 8 (R2)
; len end address is: 0 (R0)
0x11AC	0x460D    MOV	R5, R1
0x11AE	0x4611    MOV	R1, R2
L_LongWordToStr52:
; len start address is: 0 (R0)
; output start address is: 4 (R1)
; input start address is: 20 (R5)
0x11B0	0x280A    CMP	R0, #10
0x11B2	0xD205    BCS	L_LongWordToStr53
;__Lib_Conversions.c, 278 :: 		
0x11B4	0x180B    ADDS	R3, R1, R0
0x11B6	0x2220    MOVS	R2, #32
0x11B8	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 277 :: 		
0x11BA	0x1C40    ADDS	R0, R0, #1
0x11BC	0xB280    UXTH	R0, R0
;__Lib_Conversions.c, 278 :: 		
0x11BE	0xE7F7    B	L_LongWordToStr52
L_LongWordToStr53:
;__Lib_Conversions.c, 279 :: 		
0x11C0	0x180B    ADDS	R3, R1, R0
0x11C2	0x2200    MOVS	R2, #0
0x11C4	0x701A    STRB	R2, [R3, #0]
0x11C6	0x1E40    SUBS	R0, R0, #1
0x11C8	0xB280    UXTH	R0, R0
; output end address is: 4 (R1)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 281 :: 		
L_LongWordToStr55:
;__Lib_Conversions.c, 282 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x11CA	0x180C    ADDS	R4, R1, R0
0x11CC	0x230A    MOVS	R3, #10
0x11CE	0xFBB5F2F3  UDIV	R2, R5, R3
0x11D2	0xFB035212  MLS	R2, R3, R2, R5
0x11D6	0x3230    ADDS	R2, #48
0x11D8	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 283 :: 		
0x11DA	0x220A    MOVS	R2, #10
0x11DC	0xFBB5F2F2  UDIV	R2, R5, R2
0x11E0	0x4615    MOV	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 284 :: 		
0x11E2	0xB902    CBNZ	R2, L_LongWordToStr57
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 285 :: 		
0x11E4	0xE002    B	L_LongWordToStr56
L_LongWordToStr57:
;__Lib_Conversions.c, 286 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x11E6	0x1E40    SUBS	R0, R0, #1
0x11E8	0xB280    UXTH	R0, R0
;__Lib_Conversions.c, 287 :: 		
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
0x11EA	0xE7EE    B	L_LongWordToStr55
L_LongWordToStr56:
;__Lib_Conversions.c, 288 :: 		
L_end_LongWordToStr:
0x11EC	0xB001    ADD	SP, SP, #4
0x11EE	0x4770    BX	LR
; end of _LongWordToStr
_LongToStr:
;__Lib_Conversions.c, 305 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x1054	0xB081    SUB	SP, SP, #4
0x1056	0xF8CDE000  STR	LR, [SP, #0]
0x105A	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 311 :: 		
; negative start address is: 4 (R1)
0x105C	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 312 :: 		
; inword start address is: 12 (R3)
0x105E	0x4603    MOV	R3, R0
;__Lib_Conversions.c, 313 :: 		
0x1060	0x2800    CMP	R0, #0
0x1062	0xDA04    BGE	L__LongToStr166
; inword end address is: 12 (R3)
;__Lib_Conversions.c, 314 :: 		
0x1064	0x2101    MOVS	R1, #1
;__Lib_Conversions.c, 315 :: 		
0x1066	0x4240    RSBS	R0, R0, #0
; input end address is: 0 (R0)
; inword start address is: 0 (R0)
0x1068	0x4600    MOV	R0, R0
; negative end address is: 4 (R1)
; inword end address is: 0 (R0)
0x106A	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 316 :: 		
0x106C	0xE001    B	L_LongToStr63
L__LongToStr166:
;__Lib_Conversions.c, 313 :: 		
0x106E	0x4618    MOV	R0, R3
0x1070	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 316 :: 		
L_LongToStr63:
;__Lib_Conversions.c, 317 :: 		
; inword start address is: 0 (R0)
; negative start address is: 28 (R7)
0x1072	0x4631    MOV	R1, R6
; inword end address is: 0 (R0)
0x1074	0xF000F896  BL	_LongWordToStr+0
;__Lib_Conversions.c, 319 :: 		
; i start address is: 4 (R1)
0x1078	0x210B    MOVS	R1, #11
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x107A	0x4634    MOV	R4, R6
0x107C	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 320 :: 		
L_LongToStr64:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x107E	0x2900    CMP	R1, #0
0x1080	0xD908    BLS	L_LongToStr65
;__Lib_Conversions.c, 321 :: 		
0x1082	0x1863    ADDS	R3, R4, R1
0x1084	0x1E4A    SUBS	R2, R1, #1
0x1086	0xB292    UXTH	R2, R2
0x1088	0x18A2    ADDS	R2, R4, R2
0x108A	0x7812    LDRB	R2, [R2, #0]
0x108C	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 322 :: 		
0x108E	0x1E49    SUBS	R1, R1, #1
0x1090	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 323 :: 		
; i end address is: 4 (R1)
0x1092	0xE7F4    B	L_LongToStr64
L_LongToStr65:
;__Lib_Conversions.c, 324 :: 		
0x1094	0x2220    MOVS	R2, #32
0x1096	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 325 :: 		
0x1098	0xB170    CBZ	R0, L_LongToStr66
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 326 :: 		
; i start address is: 0 (R0)
0x109A	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x109C	0xB281    UXTH	R1, R0
0x109E	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 327 :: 		
L_LongToStr67:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x10A0	0x1842    ADDS	R2, R0, R1
0x10A2	0x7812    LDRB	R2, [R2, #0]
0x10A4	0x2A20    CMP	R2, #32
0x10A6	0xD102    BNE	L_LongToStr68
0x10A8	0x1C49    ADDS	R1, R1, #1
0x10AA	0xB289    UXTH	R1, R1
0x10AC	0xE7F8    B	L_LongToStr67
L_LongToStr68:
;__Lib_Conversions.c, 328 :: 		
0x10AE	0x1E4A    SUBS	R2, R1, #1
0x10B0	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 329 :: 		
0x10B2	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x10B4	0x222D    MOVS	R2, #45
0x10B6	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 330 :: 		
L_LongToStr66:
;__Lib_Conversions.c, 331 :: 		
L_end_LongToStr:
0x10B8	0xF8DDE000  LDR	LR, [SP, #0]
0x10BC	0xB001    ADD	SP, SP, #4
0x10BE	0x4770    BX	LR
; end of _LongToStr
_IntToStr:
;__Lib_Conversions.c, 211 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x10DC	0xB081    SUB	SP, SP, #4
0x10DE	0xF8CDE000  STR	LR, [SP, #0]
0x10E2	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 217 :: 		
; negative start address is: 4 (R1)
0x10E4	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 218 :: 		
; inword start address is: 12 (R3)
0x10E6	0xB283    UXTH	R3, R0
;__Lib_Conversions.c, 219 :: 		
0x10E8	0x2800    CMP	R0, #0
0x10EA	0xDA05    BGE	L__IntToStr165
; inword end address is: 12 (R3)
;__Lib_Conversions.c, 220 :: 		
0x10EC	0x2101    MOVS	R1, #1
;__Lib_Conversions.c, 221 :: 		
0x10EE	0x4240    RSBS	R0, R0, #0
0x10F0	0xB280    UXTH	R0, R0
; input end address is: 0 (R0)
; inword start address is: 0 (R0)
0x10F2	0xB280    UXTH	R0, R0
; negative end address is: 4 (R1)
; inword end address is: 0 (R0)
0x10F4	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
0x10F6	0xE001    B	L_IntToStr37
L__IntToStr165:
;__Lib_Conversions.c, 219 :: 		
0x10F8	0xB298    UXTH	R0, R3
0x10FA	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
L_IntToStr37:
;__Lib_Conversions.c, 223 :: 		
; inword start address is: 0 (R0)
; negative start address is: 28 (R7)
0x10FC	0x4631    MOV	R1, R6
; inword end address is: 0 (R0)
0x10FE	0xF7FFFCB1  BL	_WordToStr+0
;__Lib_Conversions.c, 225 :: 		
; i start address is: 4 (R1)
0x1102	0x2106    MOVS	R1, #6
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x1104	0x4634    MOV	R4, R6
0x1106	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 226 :: 		
L_IntToStr38:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x1108	0x2900    CMP	R1, #0
0x110A	0xD908    BLS	L_IntToStr39
;__Lib_Conversions.c, 227 :: 		
0x110C	0x1863    ADDS	R3, R4, R1
0x110E	0x1E4A    SUBS	R2, R1, #1
0x1110	0xB292    UXTH	R2, R2
0x1112	0x18A2    ADDS	R2, R4, R2
0x1114	0x7812    LDRB	R2, [R2, #0]
0x1116	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 228 :: 		
0x1118	0x1E49    SUBS	R1, R1, #1
0x111A	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 229 :: 		
; i end address is: 4 (R1)
0x111C	0xE7F4    B	L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c, 230 :: 		
0x111E	0x2220    MOVS	R2, #32
0x1120	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 231 :: 		
0x1122	0xB170    CBZ	R0, L_IntToStr40
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 232 :: 		
; i start address is: 0 (R0)
0x1124	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x1126	0xB281    UXTH	R1, R0
0x1128	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 233 :: 		
L_IntToStr41:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x112A	0x1842    ADDS	R2, R0, R1
0x112C	0x7812    LDRB	R2, [R2, #0]
0x112E	0x2A20    CMP	R2, #32
0x1130	0xD102    BNE	L_IntToStr42
0x1132	0x1C49    ADDS	R1, R1, #1
0x1134	0xB289    UXTH	R1, R1
0x1136	0xE7F8    B	L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c, 234 :: 		
0x1138	0x1E4A    SUBS	R2, R1, #1
0x113A	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 235 :: 		
0x113C	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x113E	0x222D    MOVS	R2, #45
0x1140	0x701A    STRB	R2, [R3, #0]
L_IntToStr40:
;__Lib_Conversions.c, 236 :: 		
L_end_IntToStr:
0x1142	0xF8DDE000  LDR	LR, [SP, #0]
0x1146	0xB001    ADD	SP, SP, #4
0x1148	0x4770    BX	LR
; end of _IntToStr
_WordToStr:
;__Lib_Conversions.c, 114 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x0A64	0xB081    SUB	SP, SP, #4
0x0A66	0x460A    MOV	R2, R1
0x0A68	0xB281    UXTH	R1, R0
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 4 (R1)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 119 :: 		
; len start address is: 0 (R0)
0x0A6A	0x2000    MOVS	R0, #0
; input end address is: 4 (R1)
; output end address is: 8 (R2)
; len end address is: 0 (R0)
0x0A6C	0xB28D    UXTH	R5, R1
0x0A6E	0x4611    MOV	R1, R2
L_WordToStr11:
; len start address is: 0 (R0)
; output start address is: 4 (R1)
; input start address is: 20 (R5)
0x0A70	0x2805    CMP	R0, #5
0x0A72	0xD205    BCS	L_WordToStr12
;__Lib_Conversions.c, 120 :: 		
0x0A74	0x180B    ADDS	R3, R1, R0
0x0A76	0x2220    MOVS	R2, #32
0x0A78	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 119 :: 		
0x0A7A	0x1C40    ADDS	R0, R0, #1
0x0A7C	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 120 :: 		
0x0A7E	0xE7F7    B	L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c, 121 :: 		
0x0A80	0x180B    ADDS	R3, R1, R0
0x0A82	0x2200    MOVS	R2, #0
0x0A84	0x701A    STRB	R2, [R3, #0]
0x0A86	0x1E40    SUBS	R0, R0, #1
0x0A88	0xB2C0    UXTB	R0, R0
; output end address is: 4 (R1)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 123 :: 		
L_WordToStr14:
;__Lib_Conversions.c, 124 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0A8A	0x180C    ADDS	R4, R1, R0
0x0A8C	0x230A    MOVS	R3, #10
0x0A8E	0xFBB5F2F3  UDIV	R2, R5, R3
0x0A92	0xFB035212  MLS	R2, R3, R2, R5
0x0A96	0xB292    UXTH	R2, R2
0x0A98	0x3230    ADDS	R2, #48
0x0A9A	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 125 :: 		
0x0A9C	0x220A    MOVS	R2, #10
0x0A9E	0xFBB5F2F2  UDIV	R2, R5, R2
0x0AA2	0xB292    UXTH	R2, R2
0x0AA4	0xB295    UXTH	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 126 :: 		
0x0AA6	0xB902    CBNZ	R2, L_WordToStr16
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 127 :: 		
0x0AA8	0xE002    B	L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c, 128 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0AAA	0x1E40    SUBS	R0, R0, #1
0x0AAC	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 129 :: 		
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
0x0AAE	0xE7EC    B	L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c, 130 :: 		
L_end_WordToStr:
0x0AB0	0xB001    ADD	SP, SP, #4
0x0AB2	0x4770    BX	LR
; end of _WordToStr
__Lib_System_4XX_InitialSetUpRCCRCC2:
;__Lib_System_4XX.c, 452 :: 		
0x2358	0xB082    SUB	SP, SP, #8
0x235A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_4XX.c, 455 :: 		
; ulRCC_CR start address is: 8 (R2)
0x235E	0x4A92    LDR	R2, [PC, #584]
;__Lib_System_4XX.c, 456 :: 		
; ulRCC_PLLCFGR start address is: 12 (R3)
0x2360	0x4B92    LDR	R3, [PC, #584]
;__Lib_System_4XX.c, 457 :: 		
; ulRCC_CFGR start address is: 16 (R4)
0x2362	0x4C93    LDR	R4, [PC, #588]
;__Lib_System_4XX.c, 458 :: 		
; ulVOLTAGE_RANGE start address is: 0 (R0)
0x2364	0x4893    LDR	R0, [PC, #588]
;__Lib_System_4XX.c, 459 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2366	0x4994    LDR	R1, [PC, #592]
;__Lib_System_4XX.c, 461 :: 		
0x2368	0x2803    CMP	R0, #3
0x236A	0xF040803C  BNE	L___Lib_System_4XX_InitialSetUpRCCRCC231
; ulVOLTAGE_RANGE end address is: 0 (R0)
;__Lib_System_4XX.c, 462 :: 		
0x236E	0x4893    LDR	R0, [PC, #588]
0x2370	0x4281    CMP	R1, R0
0x2372	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC232
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 463 :: 		
0x2374	0x4892    LDR	R0, [PC, #584]
0x2376	0x6800    LDR	R0, [R0, #0]
0x2378	0xF0400105  ORR	R1, R0, #5
0x237C	0x4890    LDR	R0, [PC, #576]
0x237E	0x6001    STR	R1, [R0, #0]
0x2380	0xE030    B	L___Lib_System_4XX_InitialSetUpRCCRCC233
L___Lib_System_4XX_InitialSetUpRCCRCC232:
;__Lib_System_4XX.c, 464 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2382	0x4890    LDR	R0, [PC, #576]
0x2384	0x4281    CMP	R1, R0
0x2386	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC234
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 465 :: 		
0x2388	0x488D    LDR	R0, [PC, #564]
0x238A	0x6800    LDR	R0, [R0, #0]
0x238C	0xF0400104  ORR	R1, R0, #4
0x2390	0x488B    LDR	R0, [PC, #556]
0x2392	0x6001    STR	R1, [R0, #0]
0x2394	0xE026    B	L___Lib_System_4XX_InitialSetUpRCCRCC235
L___Lib_System_4XX_InitialSetUpRCCRCC234:
;__Lib_System_4XX.c, 466 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2396	0x488C    LDR	R0, [PC, #560]
0x2398	0x4281    CMP	R1, R0
0x239A	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC236
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 467 :: 		
0x239C	0x4888    LDR	R0, [PC, #544]
0x239E	0x6800    LDR	R0, [R0, #0]
0x23A0	0xF0400103  ORR	R1, R0, #3
0x23A4	0x4886    LDR	R0, [PC, #536]
0x23A6	0x6001    STR	R1, [R0, #0]
0x23A8	0xE01C    B	L___Lib_System_4XX_InitialSetUpRCCRCC237
L___Lib_System_4XX_InitialSetUpRCCRCC236:
;__Lib_System_4XX.c, 468 :: 		
; Fosc_kHz start address is: 4 (R1)
0x23AA	0xF64E2060  MOVW	R0, #60000
0x23AE	0x4281    CMP	R1, R0
0x23B0	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC238
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 469 :: 		
0x23B2	0x4883    LDR	R0, [PC, #524]
0x23B4	0x6800    LDR	R0, [R0, #0]
0x23B6	0xF0400102  ORR	R1, R0, #2
0x23BA	0x4881    LDR	R0, [PC, #516]
0x23BC	0x6001    STR	R1, [R0, #0]
0x23BE	0xE011    B	L___Lib_System_4XX_InitialSetUpRCCRCC239
L___Lib_System_4XX_InitialSetUpRCCRCC238:
;__Lib_System_4XX.c, 470 :: 		
; Fosc_kHz start address is: 4 (R1)
0x23C0	0xF2475030  MOVW	R0, #30000
0x23C4	0x4281    CMP	R1, R0
0x23C6	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC240
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 471 :: 		
0x23C8	0x487D    LDR	R0, [PC, #500]
0x23CA	0x6800    LDR	R0, [R0, #0]
0x23CC	0xF0400101  ORR	R1, R0, #1
0x23D0	0x487B    LDR	R0, [PC, #492]
0x23D2	0x6001    STR	R1, [R0, #0]
0x23D4	0xE006    B	L___Lib_System_4XX_InitialSetUpRCCRCC241
L___Lib_System_4XX_InitialSetUpRCCRCC240:
;__Lib_System_4XX.c, 473 :: 		
0x23D6	0x487A    LDR	R0, [PC, #488]
0x23D8	0x6801    LDR	R1, [R0, #0]
0x23DA	0xF06F0007  MVN	R0, #7
0x23DE	0x4001    ANDS	R1, R0
0x23E0	0x4877    LDR	R0, [PC, #476]
0x23E2	0x6001    STR	R1, [R0, #0]
L___Lib_System_4XX_InitialSetUpRCCRCC241:
L___Lib_System_4XX_InitialSetUpRCCRCC239:
L___Lib_System_4XX_InitialSetUpRCCRCC237:
L___Lib_System_4XX_InitialSetUpRCCRCC235:
L___Lib_System_4XX_InitialSetUpRCCRCC233:
;__Lib_System_4XX.c, 474 :: 		
0x23E4	0xE10C    B	L___Lib_System_4XX_InitialSetUpRCCRCC242
L___Lib_System_4XX_InitialSetUpRCCRCC231:
;__Lib_System_4XX.c, 475 :: 		
; Fosc_kHz start address is: 4 (R1)
; ulVOLTAGE_RANGE start address is: 0 (R0)
0x23E6	0x2802    CMP	R0, #2
0x23E8	0xF0408046  BNE	L___Lib_System_4XX_InitialSetUpRCCRCC243
; ulVOLTAGE_RANGE end address is: 0 (R0)
;__Lib_System_4XX.c, 476 :: 		
0x23EC	0x4877    LDR	R0, [PC, #476]
0x23EE	0x4281    CMP	R1, R0
0x23F0	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC244
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 477 :: 		
0x23F2	0x4873    LDR	R0, [PC, #460]
0x23F4	0x6800    LDR	R0, [R0, #0]
0x23F6	0xF0400106  ORR	R1, R0, #6
0x23FA	0x4871    LDR	R0, [PC, #452]
0x23FC	0x6001    STR	R1, [R0, #0]
0x23FE	0xE03A    B	L___Lib_System_4XX_InitialSetUpRCCRCC245
L___Lib_System_4XX_InitialSetUpRCCRCC244:
;__Lib_System_4XX.c, 478 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2400	0x4870    LDR	R0, [PC, #448]
0x2402	0x4281    CMP	R1, R0
0x2404	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC246
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 479 :: 		
0x2406	0x486E    LDR	R0, [PC, #440]
0x2408	0x6800    LDR	R0, [R0, #0]
0x240A	0xF0400105  ORR	R1, R0, #5
0x240E	0x486C    LDR	R0, [PC, #432]
0x2410	0x6001    STR	R1, [R0, #0]
0x2412	0xE030    B	L___Lib_System_4XX_InitialSetUpRCCRCC247
L___Lib_System_4XX_InitialSetUpRCCRCC246:
;__Lib_System_4XX.c, 480 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2414	0x486E    LDR	R0, [PC, #440]
0x2416	0x4281    CMP	R1, R0
0x2418	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC248
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 481 :: 		
0x241A	0x4869    LDR	R0, [PC, #420]
0x241C	0x6800    LDR	R0, [R0, #0]
0x241E	0xF0400104  ORR	R1, R0, #4
0x2422	0x4867    LDR	R0, [PC, #412]
0x2424	0x6001    STR	R1, [R0, #0]
0x2426	0xE026    B	L___Lib_System_4XX_InitialSetUpRCCRCC249
L___Lib_System_4XX_InitialSetUpRCCRCC248:
;__Lib_System_4XX.c, 482 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2428	0x486A    LDR	R0, [PC, #424]
0x242A	0x4281    CMP	R1, R0
0x242C	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC250
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 483 :: 		
0x242E	0x4864    LDR	R0, [PC, #400]
0x2430	0x6800    LDR	R0, [R0, #0]
0x2432	0xF0400103  ORR	R1, R0, #3
0x2436	0x4862    LDR	R0, [PC, #392]
0x2438	0x6001    STR	R1, [R0, #0]
0x243A	0xE01C    B	L___Lib_System_4XX_InitialSetUpRCCRCC251
L___Lib_System_4XX_InitialSetUpRCCRCC250:
;__Lib_System_4XX.c, 484 :: 		
; Fosc_kHz start address is: 4 (R1)
0x243C	0xF64B3080  MOVW	R0, #48000
0x2440	0x4281    CMP	R1, R0
0x2442	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC252
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 485 :: 		
0x2444	0x485E    LDR	R0, [PC, #376]
0x2446	0x6800    LDR	R0, [R0, #0]
0x2448	0xF0400102  ORR	R1, R0, #2
0x244C	0x485C    LDR	R0, [PC, #368]
0x244E	0x6001    STR	R1, [R0, #0]
0x2450	0xE011    B	L___Lib_System_4XX_InitialSetUpRCCRCC253
L___Lib_System_4XX_InitialSetUpRCCRCC252:
;__Lib_System_4XX.c, 486 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2452	0xF64550C0  MOVW	R0, #24000
0x2456	0x4281    CMP	R1, R0
0x2458	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC254
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 487 :: 		
0x245A	0x4859    LDR	R0, [PC, #356]
0x245C	0x6800    LDR	R0, [R0, #0]
0x245E	0xF0400101  ORR	R1, R0, #1
0x2462	0x4857    LDR	R0, [PC, #348]
0x2464	0x6001    STR	R1, [R0, #0]
0x2466	0xE006    B	L___Lib_System_4XX_InitialSetUpRCCRCC255
L___Lib_System_4XX_InitialSetUpRCCRCC254:
;__Lib_System_4XX.c, 489 :: 		
0x2468	0x4855    LDR	R0, [PC, #340]
0x246A	0x6801    LDR	R1, [R0, #0]
0x246C	0xF06F0007  MVN	R0, #7
0x2470	0x4001    ANDS	R1, R0
0x2472	0x4853    LDR	R0, [PC, #332]
0x2474	0x6001    STR	R1, [R0, #0]
L___Lib_System_4XX_InitialSetUpRCCRCC255:
L___Lib_System_4XX_InitialSetUpRCCRCC253:
L___Lib_System_4XX_InitialSetUpRCCRCC251:
L___Lib_System_4XX_InitialSetUpRCCRCC249:
L___Lib_System_4XX_InitialSetUpRCCRCC247:
L___Lib_System_4XX_InitialSetUpRCCRCC245:
;__Lib_System_4XX.c, 490 :: 		
0x2476	0xE0C3    B	L___Lib_System_4XX_InitialSetUpRCCRCC256
L___Lib_System_4XX_InitialSetUpRCCRCC243:
;__Lib_System_4XX.c, 491 :: 		
; Fosc_kHz start address is: 4 (R1)
; ulVOLTAGE_RANGE start address is: 0 (R0)
0x2478	0x2801    CMP	R0, #1
0x247A	0xF0408051  BNE	L___Lib_System_4XX_InitialSetUpRCCRCC257
; ulVOLTAGE_RANGE end address is: 0 (R0)
;__Lib_System_4XX.c, 492 :: 		
0x247E	0x4851    LDR	R0, [PC, #324]
0x2480	0x4281    CMP	R1, R0
0x2482	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC258
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 493 :: 		
0x2484	0x484E    LDR	R0, [PC, #312]
0x2486	0x6800    LDR	R0, [R0, #0]
0x2488	0xF0400107  ORR	R1, R0, #7
0x248C	0x484C    LDR	R0, [PC, #304]
0x248E	0x6001    STR	R1, [R0, #0]
0x2490	0xE045    B	L___Lib_System_4XX_InitialSetUpRCCRCC259
L___Lib_System_4XX_InitialSetUpRCCRCC258:
;__Lib_System_4XX.c, 494 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2492	0x4851    LDR	R0, [PC, #324]
0x2494	0x4281    CMP	R1, R0
0x2496	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC260
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 495 :: 		
0x2498	0x4849    LDR	R0, [PC, #292]
0x249A	0x6800    LDR	R0, [R0, #0]
0x249C	0xF0400106  ORR	R1, R0, #6
0x24A0	0x4847    LDR	R0, [PC, #284]
0x24A2	0x6001    STR	R1, [R0, #0]
0x24A4	0xE03B    B	L___Lib_System_4XX_InitialSetUpRCCRCC261
L___Lib_System_4XX_InitialSetUpRCCRCC260:
;__Lib_System_4XX.c, 496 :: 		
; Fosc_kHz start address is: 4 (R1)
0x24A6	0x4848    LDR	R0, [PC, #288]
0x24A8	0x4281    CMP	R1, R0
0x24AA	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC262
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 497 :: 		
0x24AC	0x4844    LDR	R0, [PC, #272]
0x24AE	0x6800    LDR	R0, [R0, #0]
0x24B0	0xF0400105  ORR	R1, R0, #5
0x24B4	0x4842    LDR	R0, [PC, #264]
0x24B6	0x6001    STR	R1, [R0, #0]
0x24B8	0xE031    B	L___Lib_System_4XX_InitialSetUpRCCRCC263
L___Lib_System_4XX_InitialSetUpRCCRCC262:
;__Lib_System_4XX.c, 498 :: 		
; Fosc_kHz start address is: 4 (R1)
0x24BA	0x4846    LDR	R0, [PC, #280]
0x24BC	0x4281    CMP	R1, R0
0x24BE	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC264
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 499 :: 		
0x24C0	0x483F    LDR	R0, [PC, #252]
0x24C2	0x6800    LDR	R0, [R0, #0]
0x24C4	0xF0400104  ORR	R1, R0, #4
0x24C8	0x483D    LDR	R0, [PC, #244]
0x24CA	0x6001    STR	R1, [R0, #0]
0x24CC	0xE027    B	L___Lib_System_4XX_InitialSetUpRCCRCC265
L___Lib_System_4XX_InitialSetUpRCCRCC264:
;__Lib_System_4XX.c, 500 :: 		
; Fosc_kHz start address is: 4 (R1)
0x24CE	0xF24D20F0  MOVW	R0, #54000
0x24D2	0x4281    CMP	R1, R0
0x24D4	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC266
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 501 :: 		
0x24D6	0x483A    LDR	R0, [PC, #232]
0x24D8	0x6800    LDR	R0, [R0, #0]
0x24DA	0xF0400103  ORR	R1, R0, #3
0x24DE	0x4838    LDR	R0, [PC, #224]
0x24E0	0x6001    STR	R1, [R0, #0]
0x24E2	0xE01C    B	L___Lib_System_4XX_InitialSetUpRCCRCC267
L___Lib_System_4XX_InitialSetUpRCCRCC266:
;__Lib_System_4XX.c, 502 :: 		
; Fosc_kHz start address is: 4 (R1)
0x24E4	0xF64840A0  MOVW	R0, #36000
0x24E8	0x4281    CMP	R1, R0
0x24EA	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC268
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 503 :: 		
0x24EC	0x4834    LDR	R0, [PC, #208]
0x24EE	0x6800    LDR	R0, [R0, #0]
0x24F0	0xF0400102  ORR	R1, R0, #2
0x24F4	0x4832    LDR	R0, [PC, #200]
0x24F6	0x6001    STR	R1, [R0, #0]
0x24F8	0xE011    B	L___Lib_System_4XX_InitialSetUpRCCRCC269
L___Lib_System_4XX_InitialSetUpRCCRCC268:
;__Lib_System_4XX.c, 504 :: 		
; Fosc_kHz start address is: 4 (R1)
0x24FA	0xF2446050  MOVW	R0, #18000
0x24FE	0x4281    CMP	R1, R0
0x2500	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC270
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 505 :: 		
0x2502	0x482F    LDR	R0, [PC, #188]
0x2504	0x6800    LDR	R0, [R0, #0]
0x2506	0xF0400101  ORR	R1, R0, #1
0x250A	0x482D    LDR	R0, [PC, #180]
0x250C	0x6001    STR	R1, [R0, #0]
0x250E	0xE006    B	L___Lib_System_4XX_InitialSetUpRCCRCC271
L___Lib_System_4XX_InitialSetUpRCCRCC270:
;__Lib_System_4XX.c, 507 :: 		
0x2510	0x482B    LDR	R0, [PC, #172]
0x2512	0x6801    LDR	R1, [R0, #0]
0x2514	0xF06F0007  MVN	R0, #7
0x2518	0x4001    ANDS	R1, R0
0x251A	0x4829    LDR	R0, [PC, #164]
0x251C	0x6001    STR	R1, [R0, #0]
L___Lib_System_4XX_InitialSetUpRCCRCC271:
L___Lib_System_4XX_InitialSetUpRCCRCC269:
L___Lib_System_4XX_InitialSetUpRCCRCC267:
L___Lib_System_4XX_InitialSetUpRCCRCC265:
L___Lib_System_4XX_InitialSetUpRCCRCC263:
L___Lib_System_4XX_InitialSetUpRCCRCC261:
L___Lib_System_4XX_InitialSetUpRCCRCC259:
;__Lib_System_4XX.c, 508 :: 		
0x251E	0xE06F    B	L___Lib_System_4XX_InitialSetUpRCCRCC272
L___Lib_System_4XX_InitialSetUpRCCRCC257:
;__Lib_System_4XX.c, 509 :: 		
; Fosc_kHz start address is: 4 (R1)
; ulVOLTAGE_RANGE start address is: 0 (R0)
0x2520	0x2800    CMP	R0, #0
0x2522	0xF040806D  BNE	L___Lib_System_4XX_InitialSetUpRCCRCC273
; ulVOLTAGE_RANGE end address is: 0 (R0)
;__Lib_System_4XX.c, 510 :: 		
0x2526	0x482D    LDR	R0, [PC, #180]
0x2528	0x4281    CMP	R1, R0
0x252A	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC274
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 511 :: 		
0x252C	0x4824    LDR	R0, [PC, #144]
0x252E	0x6800    LDR	R0, [R0, #0]
0x2530	0xF0400107  ORR	R1, R0, #7
0x2534	0x4822    LDR	R0, [PC, #136]
0x2536	0x6001    STR	R1, [R0, #0]
0x2538	0xE062    B	L___Lib_System_4XX_InitialSetUpRCCRCC275
L___Lib_System_4XX_InitialSetUpRCCRCC274:
;__Lib_System_4XX.c, 512 :: 		
; Fosc_kHz start address is: 4 (R1)
0x253A	0x4825    LDR	R0, [PC, #148]
0x253C	0x4281    CMP	R1, R0
0x253E	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC276
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 513 :: 		
0x2540	0x481F    LDR	R0, [PC, #124]
0x2542	0x6800    LDR	R0, [R0, #0]
0x2544	0xF0400106  ORR	R1, R0, #6
0x2548	0x481D    LDR	R0, [PC, #116]
0x254A	0x6001    STR	R1, [R0, #0]
0x254C	0xE058    B	L___Lib_System_4XX_InitialSetUpRCCRCC277
L___Lib_System_4XX_InitialSetUpRCCRCC276:
;__Lib_System_4XX.c, 514 :: 		
; Fosc_kHz start address is: 4 (R1)
0x254E	0x4824    LDR	R0, [PC, #144]
0x2550	0x4281    CMP	R1, R0
0x2552	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC278
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 515 :: 		
0x2554	0x481A    LDR	R0, [PC, #104]
0x2556	0x6800    LDR	R0, [R0, #0]
0x2558	0xF0400105  ORR	R1, R0, #5
0x255C	0x4818    LDR	R0, [PC, #96]
0x255E	0x6001    STR	R1, [R0, #0]
0x2560	0xE04E    B	L___Lib_System_4XX_InitialSetUpRCCRCC279
L___Lib_System_4XX_InitialSetUpRCCRCC278:
;__Lib_System_4XX.c, 516 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2562	0xF5B14F7A  CMP	R1, #64000
0x2566	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC280
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 517 :: 		
0x2568	0x4815    LDR	R0, [PC, #84]
0x256A	0x6800    LDR	R0, [R0, #0]
0x256C	0xF0400104  ORR	R1, R0, #4
0x2570	0x4813    LDR	R0, [PC, #76]
0x2572	0x6001    STR	R1, [R0, #0]
0x2574	0xE044    B	L___Lib_System_4XX_InitialSetUpRCCRCC281
L___Lib_System_4XX_InitialSetUpRCCRCC280:
;__Lib_System_4XX.c, 518 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2576	0xF64B3080  MOVW	R0, #48000
0x257A	0x4281    CMP	R1, R0
0x257C	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC282
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 519 :: 		
0x257E	0x4810    LDR	R0, [PC, #64]
0x2580	0x6800    LDR	R0, [R0, #0]
0x2582	0xF0400103  ORR	R1, R0, #3
0x2586	0x480E    LDR	R0, [PC, #56]
0x2588	0x6001    STR	R1, [R0, #0]
0x258A	0xE039    B	L___Lib_System_4XX_InitialSetUpRCCRCC283
L___Lib_System_4XX_InitialSetUpRCCRCC282:
;__Lib_System_4XX.c, 520 :: 		
; Fosc_kHz start address is: 4 (R1)
0x258C	0xF5B14FFA  CMP	R1, #32000
0x2590	0xD906    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC284
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 521 :: 		
0x2592	0x480B    LDR	R0, [PC, #44]
0x2594	0x6800    LDR	R0, [R0, #0]
0x2596	0xF0400102  ORR	R1, R0, #2
0x259A	0x4809    LDR	R0, [PC, #36]
0x259C	0x6001    STR	R1, [R0, #0]
0x259E	0xE02F    B	L___Lib_System_4XX_InitialSetUpRCCRCC285
L___Lib_System_4XX_InitialSetUpRCCRCC284:
;__Lib_System_4XX.c, 522 :: 		
; Fosc_kHz start address is: 4 (R1)
0x25A0	0xF5B15F7A  CMP	R1, #16000
0x25A4	0xD925    BLS	L___Lib_System_4XX_InitialSetUpRCCRCC286
0x25A6	0xE01D    B	#58
0x25A8	0x00800101  	#16842880
0x25AC	0x54190440  	#71324697
0x25B0	0x00023D60  	#1029701634
0x25B4	0x00030000  	#3
0x25B8	0x90400002  	#168000
0x25BC	0x49F00002  	#150000
0x25C0	0x3C004002  	FLASH_ACR+0
0x25C4	0xD4C00001  	#120000
0x25C8	0x5F900001  	#90000
0x25CC	0x32800002  	#144000
0x25D0	0x77000001  	#96000
0x25D4	0x19400001  	#72000
0x25D8	0xA5E00001  	#108000
0x25DC	0xB5800001  	#112000
0x25E0	0x38800001  	#80000
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_4XX.c, 523 :: 		
0x25E4	0x482D    LDR	R0, [PC, #180]
0x25E6	0x6800    LDR	R0, [R0, #0]
0x25E8	0xF0400101  ORR	R1, R0, #1
0x25EC	0x482B    LDR	R0, [PC, #172]
0x25EE	0x6001    STR	R1, [R0, #0]
0x25F0	0xE006    B	L___Lib_System_4XX_InitialSetUpRCCRCC287
L___Lib_System_4XX_InitialSetUpRCCRCC286:
;__Lib_System_4XX.c, 525 :: 		
0x25F2	0x482A    LDR	R0, [PC, #168]
0x25F4	0x6801    LDR	R1, [R0, #0]
0x25F6	0xF06F0007  MVN	R0, #7
0x25FA	0x4001    ANDS	R1, R0
0x25FC	0x4827    LDR	R0, [PC, #156]
0x25FE	0x6001    STR	R1, [R0, #0]
L___Lib_System_4XX_InitialSetUpRCCRCC287:
L___Lib_System_4XX_InitialSetUpRCCRCC285:
L___Lib_System_4XX_InitialSetUpRCCRCC283:
L___Lib_System_4XX_InitialSetUpRCCRCC281:
L___Lib_System_4XX_InitialSetUpRCCRCC279:
L___Lib_System_4XX_InitialSetUpRCCRCC277:
L___Lib_System_4XX_InitialSetUpRCCRCC275:
;__Lib_System_4XX.c, 526 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC273:
L___Lib_System_4XX_InitialSetUpRCCRCC272:
L___Lib_System_4XX_InitialSetUpRCCRCC256:
L___Lib_System_4XX_InitialSetUpRCCRCC242:
;__Lib_System_4XX.c, 528 :: 		
0x2600	0x2101    MOVS	R1, #1
0x2602	0xB249    SXTB	R1, R1
0x2604	0x4826    LDR	R0, [PC, #152]
0x2606	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 529 :: 		
0x2608	0x4826    LDR	R0, [PC, #152]
0x260A	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 531 :: 		
0x260C	0xF7FFF80E  BL	__Lib_System_4XX_SystemClockSetDefault+0
;__Lib_System_4XX.c, 533 :: 		
0x2610	0x4825    LDR	R0, [PC, #148]
0x2612	0x6003    STR	R3, [R0, #0]
; ulRCC_PLLCFGR end address is: 12 (R3)
;__Lib_System_4XX.c, 534 :: 		
0x2614	0x4825    LDR	R0, [PC, #148]
0x2616	0x6004    STR	R4, [R0, #0]
;__Lib_System_4XX.c, 535 :: 		
0x2618	0x4825    LDR	R0, [PC, #148]
0x261A	0xEA020100  AND	R1, R2, R0, LSL #0
0x261E	0x4825    LDR	R0, [PC, #148]
0x2620	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 537 :: 		
0x2622	0xF0020001  AND	R0, R2, #1
0x2626	0xB140    CBZ	R0, L___Lib_System_4XX_InitialSetUpRCCRCC299
; ulRCC_CFGR end address is: 16 (R4)
; ulRCC_CR end address is: 8 (R2)
0x2628	0x4621    MOV	R1, R4
;__Lib_System_4XX.c, 538 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC289:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x262A	0x4822    LDR	R0, [PC, #136]
0x262C	0x6800    LDR	R0, [R0, #0]
0x262E	0xF0000002  AND	R0, R0, #2
0x2632	0x2800    CMP	R0, #0
0x2634	0xD100    BNE	L___Lib_System_4XX_InitialSetUpRCCRCC290
;__Lib_System_4XX.c, 539 :: 		
0x2636	0xE7F8    B	L___Lib_System_4XX_InitialSetUpRCCRCC289
L___Lib_System_4XX_InitialSetUpRCCRCC290:
;__Lib_System_4XX.c, 540 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x2638	0xE000    B	L___Lib_System_4XX_InitialSetUpRCCRCC288
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_4XX_InitialSetUpRCCRCC299:
;__Lib_System_4XX.c, 537 :: 		
0x263A	0x4621    MOV	R1, R4
;__Lib_System_4XX.c, 540 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC288:
;__Lib_System_4XX.c, 542 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x263C	0xF4023080  AND	R0, R2, #65536
0x2640	0xB148    CBZ	R0, L___Lib_System_4XX_InitialSetUpRCCRCC2100
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
;__Lib_System_4XX.c, 543 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC292:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 4 (R1)
0x2642	0x481C    LDR	R0, [PC, #112]
0x2644	0x6800    LDR	R0, [R0, #0]
0x2646	0xF4003000  AND	R0, R0, #131072
0x264A	0xB900    CBNZ	R0, L___Lib_System_4XX_InitialSetUpRCCRCC293
;__Lib_System_4XX.c, 544 :: 		
0x264C	0xE7F9    B	L___Lib_System_4XX_InitialSetUpRCCRCC292
L___Lib_System_4XX_InitialSetUpRCCRCC293:
;__Lib_System_4XX.c, 545 :: 		
0x264E	0x9201    STR	R2, [SP, #4]
; ulRCC_CFGR end address is: 4 (R1)
0x2650	0x460A    MOV	R2, R1
0x2652	0x9901    LDR	R1, [SP, #4]
0x2654	0xE002    B	L___Lib_System_4XX_InitialSetUpRCCRCC291
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_4XX_InitialSetUpRCCRCC2100:
;__Lib_System_4XX.c, 542 :: 		
0x2656	0x9101    STR	R1, [SP, #4]
0x2658	0x4611    MOV	R1, R2
0x265A	0x9A01    LDR	R2, [SP, #4]
;__Lib_System_4XX.c, 545 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC291:
;__Lib_System_4XX.c, 547 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x265C	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x2660	0xB170    CBZ	R0, L___Lib_System_4XX_InitialSetUpRCCRCC2101
;__Lib_System_4XX.c, 548 :: 		
0x2662	0x4814    LDR	R0, [PC, #80]
0x2664	0x6800    LDR	R0, [R0, #0]
0x2666	0xF0407180  ORR	R1, R0, #16777216
0x266A	0x4812    LDR	R0, [PC, #72]
0x266C	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x266E	0x4611    MOV	R1, R2
;__Lib_System_4XX.c, 549 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC295:
; ulRCC_CFGR start address is: 4 (R1)
0x2670	0x4810    LDR	R0, [PC, #64]
0x2672	0x6800    LDR	R0, [R0, #0]
0x2674	0xF0007000  AND	R0, R0, #33554432
0x2678	0xB900    CBNZ	R0, L___Lib_System_4XX_InitialSetUpRCCRCC296
;__Lib_System_4XX.c, 550 :: 		
0x267A	0xE7F9    B	L___Lib_System_4XX_InitialSetUpRCCRCC295
L___Lib_System_4XX_InitialSetUpRCCRCC296:
;__Lib_System_4XX.c, 551 :: 		
0x267C	0x460A    MOV	R2, R1
0x267E	0xE7FF    B	L___Lib_System_4XX_InitialSetUpRCCRCC294
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_4XX_InitialSetUpRCCRCC2101:
;__Lib_System_4XX.c, 547 :: 		
;__Lib_System_4XX.c, 551 :: 		
L___Lib_System_4XX_InitialSetUpRCCRCC294:
;__Lib_System_4XX.c, 554 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_4XX_InitialSetUpRCCRCC297:
; ulRCC_CFGR start address is: 8 (R2)
0x2680	0x480A    LDR	R0, [PC, #40]
0x2682	0x6800    LDR	R0, [R0, #0]
0x2684	0xF000010C  AND	R1, R0, #12
0x2688	0x0090    LSLS	R0, R2, #2
0x268A	0xF000000C  AND	R0, R0, #12
0x268E	0x4281    CMP	R1, R0
0x2690	0xD000    BEQ	L___Lib_System_4XX_InitialSetUpRCCRCC298
;__Lib_System_4XX.c, 555 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x2692	0xE7F5    B	L___Lib_System_4XX_InitialSetUpRCCRCC297
L___Lib_System_4XX_InitialSetUpRCCRCC298:
;__Lib_System_4XX.c, 557 :: 		
L_end_InitialSetUpRCCRCC2:
0x2694	0xF8DDE000  LDR	LR, [SP, #0]
0x2698	0xB002    ADD	SP, SP, #8
0x269A	0x4770    BX	LR
0x269C	0x3C004002  	FLASH_ACR+0
0x26A0	0x80204247  	FLASH_ACR+0
0x26A4	0x80244247  	FLASH_ACR+0
0x26A8	0x38044002  	RCC_PLLCFGR+0
0x26AC	0x38084002  	RCC_CFGR+0
0x26B0	0xFFFF000F  	#1048575
0x26B4	0x38004002  	RCC_CR+0
; end of __Lib_System_4XX_InitialSetUpRCCRCC2
__Lib_System_4XX_SystemClockSetDefault:
;__Lib_System_4XX.c, 431 :: 		
0x162C	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 434 :: 		
0x162E	0x480D    LDR	R0, [PC, #52]
0x1630	0x6800    LDR	R0, [R0, #0]
0x1632	0xF0400101  ORR	R1, R0, #1
0x1636	0x480B    LDR	R0, [PC, #44]
0x1638	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 437 :: 		
0x163A	0x2100    MOVS	R1, #0
0x163C	0x480A    LDR	R0, [PC, #40]
0x163E	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 440 :: 		
0x1640	0x4808    LDR	R0, [PC, #32]
0x1642	0x6801    LDR	R1, [R0, #0]
0x1644	0x4809    LDR	R0, [PC, #36]
0x1646	0x4001    ANDS	R1, R0
0x1648	0x4806    LDR	R0, [PC, #24]
0x164A	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 443 :: 		
0x164C	0x4908    LDR	R1, [PC, #32]
0x164E	0x4809    LDR	R0, [PC, #36]
0x1650	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 446 :: 		
0x1652	0x4804    LDR	R0, [PC, #16]
0x1654	0x6801    LDR	R1, [R0, #0]
0x1656	0xF46F2080  MVN	R0, #262144
0x165A	0x4001    ANDS	R1, R0
0x165C	0x4801    LDR	R0, [PC, #4]
0x165E	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 450 :: 		
L_end_SystemClockSetDefault:
0x1660	0xB001    ADD	SP, SP, #4
0x1662	0x4770    BX	LR
0x1664	0x38004002  	RCC_CR+0
0x1668	0x38084002  	RCC_CFGR+0
0x166C	0xFFFFFEF6  	#-17367041
0x1670	0x30102400  	#603992080
0x1674	0x38044002  	RCC_PLLCFGR+0
; end of __Lib_System_4XX_SystemClockSetDefault
__Lib_System_4XX_InitialSetUpFosc:
;__Lib_System_4XX.c, 369 :: 		
0x28F8	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 370 :: 		
0x28FA	0x4904    LDR	R1, [PC, #16]
0x28FC	0x4804    LDR	R0, [PC, #16]
0x28FE	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 371 :: 		
0x2900	0x4904    LDR	R1, [PC, #16]
0x2902	0x4805    LDR	R0, [PC, #20]
0x2904	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 372 :: 		
L_end_InitialSetUpFosc:
0x2906	0xB001    ADD	SP, SP, #4
0x2908	0x4770    BX	LR
0x290A	0xBF00    NOP
0x290C	0x90400002  	#168000
0x2910	0x03B82000  	___System_CLOCK_IN_KHZ+0
0x2914	0x00030000  	#3
0x2918	0x03BC2000  	__VOLTAGE_RANGE+0
; end of __Lib_System_4XX_InitialSetUpFosc
___GenExcept:
;__Lib_System_4XX.c, 314 :: 		
0x2948	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 315 :: 		
L___GenExcept27:
0x294A	0xE7FE    B	L___GenExcept27
;__Lib_System_4XX.c, 316 :: 		
L_end___GenExcept:
0x294C	0xB001    ADD	SP, SP, #4
0x294E	0x4770    BX	LR
; end of ___GenExcept
___EnableFPU:
;__Lib_System_4XX.c, 347 :: 		
0x291C	0xB081    SUB	SP, SP, #4
;__Lib_System_4XX.c, 350 :: 		
0x291E	0xF64E5088  MOVW	R0, #60808
;__Lib_System_4XX.c, 351 :: 		
0x2922	0xF2CE0000  MOVT	R0, #57344
;__Lib_System_4XX.c, 353 :: 		
0x2926	0x6801    LDR	R1, [R0, #0]
;__Lib_System_4XX.c, 355 :: 		
0x2928	0xF4410170  ORR	R1, R1, #15728640
;__Lib_System_4XX.c, 357 :: 		
0x292C	0x6001    STR	R1, [R0, #0]
;__Lib_System_4XX.c, 359 :: 		
0x292E	0xBF00    NOP
;__Lib_System_4XX.c, 360 :: 		
0x2930	0xBF00    NOP
;__Lib_System_4XX.c, 361 :: 		
0x2932	0xBF00    NOP
;__Lib_System_4XX.c, 362 :: 		
0x2934	0xBF00    NOP
;__Lib_System_4XX.c, 364 :: 		
0x2936	0xEEF10A10  VMRS	R0, FPSCR
;__Lib_System_4XX.c, 365 :: 		
0x293A	0xF4400040  ORR	R0, R0, #12582912
;__Lib_System_4XX.c, 366 :: 		
0x293E	0xEEE10A10  VMSR	FPSCR, R0
;__Lib_System_4XX.c, 367 :: 		
L_end___EnableFPU:
0x2942	0xB001    ADD	SP, SP, #4
0x2944	0x4770    BX	LR
; end of ___EnableFPU
0x2C28	0xB500    PUSH	(R14)
0x2C2A	0xF8DFB044  LDR	R11, [PC, #68]
0x2C2E	0xF8DFA044  LDR	R10, [PC, #68]
0x2C32	0xF8DFC044  LDR	R12, [PC, #68]
0x2C36	0xF7FEFCEF  BL	5656
0x2C3A	0xF8DFB040  LDR	R11, [PC, #64]
0x2C3E	0xF8DFA040  LDR	R10, [PC, #64]
0x2C42	0xF8DFC040  LDR	R12, [PC, #64]
0x2C46	0xF7FEFCE7  BL	5656
0x2C4A	0xF8DFB034  LDR	R11, [PC, #52]
0x2C4E	0xF8DFA038  LDR	R10, [PC, #56]
0x2C52	0xF8DFC038  LDR	R12, [PC, #56]
0x2C56	0xF7FEFCDF  BL	5656
0x2C5A	0xF8DFB034  LDR	R11, [PC, #52]
0x2C5E	0xF8DFA034  LDR	R10, [PC, #52]
0x2C62	0xF8DFC034  LDR	R12, [PC, #52]
0x2C66	0xF7FEFCD7  BL	5656
0x2C6A	0xBD00    POP	(R15)
0x2C6C	0x4770    BX	LR
0x2C6E	0xBF00    NOP
0x2C70	0x00002000  	#536870912
0x2C74	0x00392000  	#536870969
0x2C78	0x2BD00000  	#11216
0x2C7C	0x003A2000  	#536870970
0x2C80	0x00402000  	#536870976
0x2C84	0x2C200000  	#11296
0x2C88	0x01E72000  	#536871399
0x2C8C	0x29500000  	#10576
0x2C90	0x01E82000  	#536871400
0x2C94	0x01FC2000  	#536871420
0x2C98	0x2C0C0000  	#11276
0x2CFC	0xB500    PUSH	(R14)
0x2CFE	0xF8DFB010  LDR	R11, [PC, #16]
0x2D02	0xF8DFA010  LDR	R10, [PC, #16]
0x2D06	0xF7FEFC69  BL	5596
0x2D0A	0xBD00    POP	(R15)
0x2D0C	0x4770    BX	LR
0x2D0E	0xBF00    NOP
0x2D10	0x00002000  	#536870912
0x2D14	0x03D82000  	#536871896
_Timer10_interrupt:
;Input Capture Complete 5ch.c, 770 :: 		void Timer10_interrupt() iv IVT_INT_TIM1_UP_TIM10 { // Interrupt handler if 3 s have past
;Input Capture Complete 5ch.c, 772 :: 		EXTI_IMRbits.MR3 = 0;			// mask bit 3 to disable external interrupt on line 3
0x20B4	0x2200    MOVS	R2, #0
0x20B6	0xB252    SXTB	R2, R2
0x20B8	0x4817    LDR	R0, [PC, #92]
0x20BA	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 773 :: 		EXTI_PR.B3 = 1;                            	// Clear Interrupt Flag
0x20BC	0x2101    MOVS	R1, #1
0x20BE	0xB249    SXTB	R1, R1
0x20C0	0x4816    LDR	R0, [PC, #88]
0x20C2	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 774 :: 		TIM10_DIER.UIE = 0;                   	// Disable timer 10 interrupt
0x20C4	0x4816    LDR	R0, [PC, #88]
0x20C6	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 775 :: 		TIM10_SR.UIF = 0;                     	// Clear timer 10 interrupt flag
0x20C8	0x4816    LDR	R0, [PC, #88]
0x20CA	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 776 :: 		EXTI_RTSRbits.TR3 = 1;                      // Enable rising edge trigger
0x20CC	0x4816    LDR	R0, [PC, #88]
0x20CE	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 777 :: 		EXTI_FTSRbits.TR3 = 0;                      // Disable falling edge trigger
0x20D0	0x4816    LDR	R0, [PC, #88]
0x20D2	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 778 :: 		EXTI_IMRbits.MR3 = 1;			// Unmask bit 3 to enable external interrupt on line 3
0x20D4	0x4810    LDR	R0, [PC, #64]
0x20D6	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 779 :: 		EMG_ACTIVE_LED = 0;                         // Clear EMG Override button indicator
0x20D8	0x4815    LDR	R0, [PC, #84]
0x20DA	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 780 :: 		emg_override_status = 0;			// Put the EMG override handler back into dormant state
0x20DC	0x2100    MOVS	R1, #0
0x20DE	0xB209    SXTH	R1, R1
0x20E0	0x4814    LDR	R0, [PC, #80]
0x20E2	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 783 :: 		if (!analogGo) {				// If system is current inactive
0x20E4	0x4814    LDR	R0, [PC, #80]
0x20E6	0xF9B00000  LDRSH	R0, [R0, #0]
0x20EA	0xB960    CBNZ	R0, L_Timer10_interrupt55
;Input Capture Complete 5ch.c, 784 :: 		doShutdown = 0;
0x20EC	0x2100    MOVS	R1, #0
0x20EE	0xB209    SXTH	R1, R1
0x20F0	0x4812    LDR	R0, [PC, #72]
0x20F2	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 785 :: 		analogGo = 1;			// Flag to indicate the system should run
0x20F4	0x2101    MOVS	R1, #1
0x20F6	0xB209    SXTH	R1, R1
0x20F8	0x480F    LDR	R0, [PC, #60]
0x20FA	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 786 :: 		LOW_BATTERY_LED = 1;    	                // Turn on the system state LED to indicate system is now running
0x20FC	0x2101    MOVS	R1, #1
0x20FE	0xB249    SXTB	R1, R1
0x2100	0x480F    LDR	R0, [PC, #60]
0x2102	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 787 :: 		}
0x2104	0xE007    B	L_Timer10_interrupt56
L_Timer10_interrupt55:
;Input Capture Complete 5ch.c, 790 :: 		doShutdown = 1;			        // Send the shutdown command.
0x2106	0x2101    MOVS	R1, #1
0x2108	0xB209    SXTH	R1, R1
0x210A	0x480C    LDR	R0, [PC, #48]
0x210C	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 791 :: 		analogGo = 0;
0x210E	0x2100    MOVS	R1, #0
0x2110	0xB209    SXTH	R1, R1
0x2112	0x4809    LDR	R0, [PC, #36]
0x2114	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 793 :: 		}
L_Timer10_interrupt56:
;Input Capture Complete 5ch.c, 794 :: 		}
L_end_Timer10_interrupt:
0x2116	0x4770    BX	LR
0x2118	0x800C4227  	EXTI_IMRbits+0
0x211C	0x828C4227  	EXTI_PR+0
0x2120	0x81804228  	TIM10_DIER+0
0x2124	0x82004228  	TIM10_SR+0
0x2128	0x810C4227  	EXTI_RTSRbits+0
0x212C	0x818C4227  	EXTI_FTSRbits+0
0x2130	0x82A44240  	GPIOB_ODR+0
0x2134	0x03B22000  	_emg_override_status+0
0x2138	0x01D42000  	_analogGo+0
0x213C	0x01D62000  	_doShutdown+0
0x2140	0x829C4240  	GPIOB_ODR+0
; end of _Timer10_interrupt
_emg_override_ISR:
;Input Capture Complete 5ch.c, 800 :: 		void emg_override_ISR() iv IVT_INT_EXTI3 {
;Input Capture Complete 5ch.c, 802 :: 		EXTI_IMRbits.MR3 = 0;			    // mask bit 3 to Disable external interrupt on line 3
0x2008	0x2100    MOVS	R1, #0
0x200A	0xB249    SXTB	R1, R1
0x200C	0x481E    LDR	R0, [PC, #120]
0x200E	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 803 :: 		EXTI_PR.B3 = 1;                               // Clear Interrupt Flag
0x2010	0x2101    MOVS	R1, #1
0x2012	0xB249    SXTB	R1, R1
0x2014	0x481D    LDR	R0, [PC, #116]
0x2016	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 804 :: 		if(emg_override_status == 0) {                // Current system state is dormant
0x2018	0x481D    LDR	R0, [PC, #116]
0x201A	0xF9B00000  LDRSH	R0, [R0, #0]
0x201E	0xB9A8    CBNZ	R0, L_emg_override_ISR57
;Input Capture Complete 5ch.c, 805 :: 		TIM10_SR.UIF = 0;                       // Clear timer 5 interrupt bit
0x2020	0x2200    MOVS	R2, #0
0x2022	0xB252    SXTB	R2, R2
0x2024	0x481B    LDR	R0, [PC, #108]
0x2026	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 806 :: 		TIM10_CNT = 0x00;                       // Reset timer value to 0
0x2028	0x2100    MOVS	R1, #0
0x202A	0x481B    LDR	R0, [PC, #108]
0x202C	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 807 :: 		emg_override_status = 1;                // Turn on system so it waits for analogGo from Timer 10 interrupt
0x202E	0x2101    MOVS	R1, #1
0x2030	0xB209    SXTH	R1, R1
0x2032	0x4817    LDR	R0, [PC, #92]
0x2034	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 808 :: 		EXTI_RTSRbits.TR3 = 0;                  // Disable rising edge trigger
0x2036	0x4819    LDR	R0, [PC, #100]
0x2038	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 809 :: 		EXTI_FTSRbits.TR3 = 1;                  // Enable falling edge trigger
0x203A	0x2101    MOVS	R1, #1
0x203C	0xB249    SXTB	R1, R1
0x203E	0x4818    LDR	R0, [PC, #96]
0x2040	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 810 :: 		TIM10_DIER.UIE = 1;                     // CC1 Update Interrupt Enable
0x2042	0x4818    LDR	R0, [PC, #96]
0x2044	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 811 :: 		EMG_ACTIVE_LED = 1;                     // Notify button is held
0x2046	0x4818    LDR	R0, [PC, #96]
0x2048	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 813 :: 		}
0x204A	0xE017    B	L_emg_override_ISR58
L_emg_override_ISR57:
;Input Capture Complete 5ch.c, 815 :: 		TIM10_DIER.UIE = 0;                     // Disable timer interrupt
0x204C	0x2200    MOVS	R2, #0
0x204E	0xB252    SXTB	R2, R2
0x2050	0x4814    LDR	R0, [PC, #80]
0x2052	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 816 :: 		emg_override_status = 0;                // Turn off system
0x2054	0x2100    MOVS	R1, #0
0x2056	0xB209    SXTH	R1, R1
0x2058	0x480D    LDR	R0, [PC, #52]
0x205A	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 817 :: 		EXTI_RTSRbits.TR3 = 1;                  // Enable rising edge trigger
0x205C	0x2101    MOVS	R1, #1
0x205E	0xB249    SXTB	R1, R1
0x2060	0x480E    LDR	R0, [PC, #56]
0x2062	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 818 :: 		EXTI_FTSRbits.TR3 = 0;                  // Disable falling edge trigger
0x2064	0x480E    LDR	R0, [PC, #56]
0x2066	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 819 :: 		EMG_ACTIVE_LED = 0;                     // Notify button released
0x2068	0x480F    LDR	R0, [PC, #60]
0x206A	0x6002    STR	R2, [R0, #0]
;Input Capture Complete 5ch.c, 820 :: 		analogGo = 0;
0x206C	0x2100    MOVS	R1, #0
0x206E	0xB209    SXTH	R1, R1
0x2070	0x480E    LDR	R0, [PC, #56]
0x2072	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 821 :: 		doShutdown = 1;
0x2074	0x2101    MOVS	R1, #1
0x2076	0xB209    SXTH	R1, R1
0x2078	0x480D    LDR	R0, [PC, #52]
0x207A	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 822 :: 		}
L_emg_override_ISR58:
;Input Capture Complete 5ch.c, 823 :: 		EXTI_IMRbits.MR3 = 1;			    // Unmask bit 3 to enable external interrupt on line 3
0x207C	0x2101    MOVS	R1, #1
0x207E	0xB249    SXTB	R1, R1
0x2080	0x4801    LDR	R0, [PC, #4]
0x2082	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 824 :: 		}
L_end_emg_override_ISR:
0x2084	0x4770    BX	LR
0x2086	0xBF00    NOP
0x2088	0x800C4227  	EXTI_IMRbits+0
0x208C	0x828C4227  	EXTI_PR+0
0x2090	0x03B22000  	_emg_override_status+0
0x2094	0x82004228  	TIM10_SR+0
0x2098	0x44244001  	TIM10_CNT+0
0x209C	0x810C4227  	EXTI_RTSRbits+0
0x20A0	0x818C4227  	EXTI_FTSRbits+0
0x20A4	0x81804228  	TIM10_DIER+0
0x20A8	0x82A44240  	GPIOB_ODR+0
0x20AC	0x01D42000  	_analogGo+0
0x20B0	0x01D62000  	_doShutdown+0
; end of _emg_override_ISR
_timer11_ISR:
;Input Capture Complete 5ch.c, 439 :: 		void timer11_ISR() iv IVT_INT_TIM1_TRG_COM_TIM11 {
;Input Capture Complete 5ch.c, 441 :: 		TIM11_SR.UIF = 0;                                                           // Clear timer 11 interrupt flag
0x2144	0x2100    MOVS	R1, #0
0x2146	0xB249    SXTB	R1, R1
0x2148	0x4804    LDR	R0, [PC, #16]
0x214A	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 442 :: 		poll_flag = 1;                                                              // Set poll flag for main loop
0x214C	0x2101    MOVS	R1, #1
0x214E	0x4804    LDR	R0, [PC, #16]
0x2150	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 443 :: 		terminal_print_count++;                                                     // Increment the debug print counter
0x2152	0x4904    LDR	R1, [PC, #16]
0x2154	0x8808    LDRH	R0, [R1, #0]
0x2156	0x1C40    ADDS	R0, R0, #1
0x2158	0x8008    STRH	R0, [R1, #0]
;Input Capture Complete 5ch.c, 444 :: 		}
L_end_timer11_ISR:
0x215A	0x4770    BX	LR
0x215C	0x02004229  	TIM11_SR+0
0x2160	0x03AC2000  	_poll_flag+0
0x2164	0x020E2000  	_terminal_print_count+0
; end of _timer11_ISR
_timer2_ISR:
;Input Capture Complete 5ch.c, 365 :: 		void timer2_ISR() iv IVT_INT_TIM2 {
;Input Capture Complete 5ch.c, 368 :: 		if(TIM2_SR.UIF == 1) {
0x22E0	0x4912    LDR	R1, [PC, #72]
0x22E2	0x6808    LDR	R0, [R1, #0]
0x22E4	0xB138    CBZ	R0, L_timer2_ISR21
;Input Capture Complete 5ch.c, 369 :: 		TIM2_SR.UIF = 0;                                                        // Clear timer 2 interrupt bit
0x22E6	0x2100    MOVS	R1, #0
0x22E8	0xB249    SXTB	R1, R1
0x22EA	0x4810    LDR	R0, [PC, #64]
0x22EC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 370 :: 		tim2_overflow_count++;                                                  // Increment timer 2 overflow counter
0x22EE	0x4910    LDR	R1, [PC, #64]
0x22F0	0x6808    LDR	R0, [R1, #0]
0x22F2	0x1C40    ADDS	R0, R0, #1
0x22F4	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 371 :: 		}
L_timer2_ISR21:
;Input Capture Complete 5ch.c, 375 :: 		if (TIM2_SR.CC1IF == 1) {
0x22F6	0x490F    LDR	R1, [PC, #60]
0x22F8	0x6808    LDR	R0, [R1, #0]
0x22FA	0xB1A8    CBZ	R0, L_timer2_ISR22
;Input Capture Complete 5ch.c, 376 :: 		fngr_thumb.enc_start_time = fngr_thumb.enc_end_time;                    // Store previous captured value for next calculation
0x22FC	0x4A0E    LDR	R2, [PC, #56]
0x22FE	0x6811    LDR	R1, [R2, #0]
0x2300	0x480E    LDR	R0, [PC, #56]
0x2302	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 377 :: 		fngr_thumb.enc_end_time = TIM2_CCR1;                                    // Read stored input capture time
0x2304	0x480E    LDR	R0, [PC, #56]
0x2306	0x6800    LDR	R0, [R0, #0]
0x2308	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 378 :: 		fngr_thumb.enc_overflow_start = fngr_thumb.enc_overflow_end;            // Store previous overflow value for next calculation
0x230A	0x4A0E    LDR	R2, [PC, #56]
0x230C	0x6811    LDR	R1, [R2, #0]
0x230E	0x480E    LDR	R0, [PC, #56]
0x2310	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 379 :: 		fngr_thumb.enc_overflow_end = tim2_overflow_count;                      // Store number of timer 2 overflows for thumb
0x2312	0x4807    LDR	R0, [PC, #28]
0x2314	0x6800    LDR	R0, [R0, #0]
0x2316	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 380 :: 		fngr_thumb.enc_chan_b = THUMB_ENCODER_B;                               // Sample the second encoder channel (For direction)
0x2318	0x480C    LDR	R0, [PC, #48]
0x231A	0x6801    LDR	R1, [R0, #0]
0x231C	0x480C    LDR	R0, [PC, #48]
0x231E	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 381 :: 		fngr_thumb.position_temp++;                                             // Increment total input capture event counter
0x2320	0x490C    LDR	R1, [PC, #48]
0x2322	0x6808    LDR	R0, [R1, #0]
0x2324	0x1C40    ADDS	R0, R0, #1
0x2326	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 382 :: 		}
L_timer2_ISR22:
;Input Capture Complete 5ch.c, 383 :: 		}
L_end_timer2_ISR:
0x2328	0x4770    BX	LR
0x232A	0xBF00    NOP
0x232C	0x02004200  	TIM2_SR+0
0x2330	0x03D02000  	_tim2_overflow_count+0
0x2334	0x02044200  	TIM2_SR+0
0x2338	0x037C2000  	_fngr_thumb+36
0x233C	0x03782000  	_fngr_thumb+32
0x2340	0x00344000  	TIM2_CCR1+0
0x2344	0x03882000  	_fngr_thumb+48
0x2348	0x03842000  	_fngr_thumb+44
0x234C	0x022C4241  	GPIOC_IDR+0
0x2350	0x03742000  	_fngr_thumb+28
0x2354	0x03682000  	_fngr_thumb+16
; end of _timer2_ISR
_timer3_ISR:
;Input Capture Complete 5ch.c, 387 :: 		void timer3_ISR() iv IVT_INT_TIM3 {
;Input Capture Complete 5ch.c, 390 :: 		if(TIM3_SR.UIF == 1) {
0x2168	0x4937    LDR	R1, [PC, #220]
0x216A	0x6808    LDR	R0, [R1, #0]
0x216C	0xB138    CBZ	R0, L_timer3_ISR23
;Input Capture Complete 5ch.c, 391 :: 		TIM3_SR.UIF = 0;                                                        // Clear timer 3 interrupt bit
0x216E	0x2100    MOVS	R1, #0
0x2170	0xB249    SXTB	R1, R1
0x2172	0x4835    LDR	R0, [PC, #212]
0x2174	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 392 :: 		tim3_overflow_count++;                                                  // Increment timer 3 overflow counter
0x2176	0x4935    LDR	R1, [PC, #212]
0x2178	0x6808    LDR	R0, [R1, #0]
0x217A	0x1C40    ADDS	R0, R0, #1
0x217C	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 393 :: 		}
L_timer3_ISR23:
;Input Capture Complete 5ch.c, 396 :: 		if (TIM3_SR.CC1IF == 1) {
0x217E	0x4934    LDR	R1, [PC, #208]
0x2180	0x6808    LDR	R0, [R1, #0]
0x2182	0xB1A8    CBZ	R0, L_timer3_ISR24
;Input Capture Complete 5ch.c, 397 :: 		fngr_pointer.enc_start_time = fngr_pointer.enc_end_time;                // Store previous captured value for next calculation
0x2184	0x4A33    LDR	R2, [PC, #204]
0x2186	0x6811    LDR	R1, [R2, #0]
0x2188	0x4833    LDR	R0, [PC, #204]
0x218A	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 398 :: 		fngr_pointer.enc_end_time = TIM3_CCR1;                                  // Read stored input capture time
0x218C	0x4833    LDR	R0, [PC, #204]
0x218E	0x6800    LDR	R0, [R0, #0]
0x2190	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 399 :: 		fngr_pointer.enc_overflow_start = fngr_pointer.enc_overflow_end;        // Store previous overflow value for next calculation
0x2192	0x4A33    LDR	R2, [PC, #204]
0x2194	0x6811    LDR	R1, [R2, #0]
0x2196	0x4833    LDR	R0, [PC, #204]
0x2198	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 400 :: 		fngr_pointer.enc_overflow_end = tim3_overflow_count;                    // Store number of timer 3 overflows for Pointer finger
0x219A	0x482C    LDR	R0, [PC, #176]
0x219C	0x6800    LDR	R0, [R0, #0]
0x219E	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 401 :: 		fngr_pointer.enc_chan_b = POINTER_ENCODER_B;                           // Sample the second encoder channel state (For direction)
0x21A0	0x4831    LDR	R0, [PC, #196]
0x21A2	0x6801    LDR	R1, [R0, #0]
0x21A4	0x4831    LDR	R0, [PC, #196]
0x21A6	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 402 :: 		fngr_pointer.position_temp++;                                           // Increment total input capture event counter
0x21A8	0x4931    LDR	R1, [PC, #196]
0x21AA	0x6808    LDR	R0, [R1, #0]
0x21AC	0x1C40    ADDS	R0, R0, #1
0x21AE	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 403 :: 		}
L_timer3_ISR24:
;Input Capture Complete 5ch.c, 407 :: 		if (TIM3_SR.CC2IF == 1) {
0x21B0	0x4930    LDR	R1, [PC, #192]
0x21B2	0x6808    LDR	R0, [R1, #0]
0x21B4	0xB1A8    CBZ	R0, L_timer3_ISR25
;Input Capture Complete 5ch.c, 408 :: 		fngr_middle.enc_start_time = fngr_middle.enc_end_time;                  // Store previous captured value for next calculation
0x21B6	0x4A30    LDR	R2, [PC, #192]
0x21B8	0x6811    LDR	R1, [R2, #0]
0x21BA	0x4830    LDR	R0, [PC, #192]
0x21BC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 409 :: 		fngr_middle.enc_end_time = TIM3_CCR2;                                   // Read stored input capture time
0x21BE	0x4830    LDR	R0, [PC, #192]
0x21C0	0x6800    LDR	R0, [R0, #0]
0x21C2	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 410 :: 		fngr_middle.enc_overflow_start = fngr_middle.enc_overflow_end;          // Store previous overflow value for next calculation
0x21C4	0x4A2F    LDR	R2, [PC, #188]
0x21C6	0x6811    LDR	R1, [R2, #0]
0x21C8	0x482F    LDR	R0, [PC, #188]
0x21CA	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 411 :: 		fngr_middle.enc_overflow_end = tim3_overflow_count;                     // Store number of timer 3 overflows for Middle finger
0x21CC	0x481F    LDR	R0, [PC, #124]
0x21CE	0x6800    LDR	R0, [R0, #0]
0x21D0	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 412 :: 		fngr_middle.enc_chan_b = MIDDLE_ENCODER_B;                             // Sample the second encoder channel state (For direction)
0x21D2	0x482E    LDR	R0, [PC, #184]
0x21D4	0x6801    LDR	R1, [R0, #0]
0x21D6	0x482E    LDR	R0, [PC, #184]
0x21D8	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 413 :: 		fngr_middle.position_temp++;                                            // Increment total input capture event counter
0x21DA	0x492E    LDR	R1, [PC, #184]
0x21DC	0x6808    LDR	R0, [R1, #0]
0x21DE	0x1C40    ADDS	R0, R0, #1
0x21E0	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 414 :: 		}
L_timer3_ISR25:
;Input Capture Complete 5ch.c, 417 :: 		if (TIM3_SR.CC3IF == 1) {
0x21E2	0x492D    LDR	R1, [PC, #180]
0x21E4	0x6808    LDR	R0, [R1, #0]
0x21E6	0xB1A8    CBZ	R0, L_timer3_ISR26
;Input Capture Complete 5ch.c, 418 :: 		fngr_ring.enc_start_time = fngr_ring.enc_end_time;                      // Store previous captured value for next calculation
0x21E8	0x4A2C    LDR	R2, [PC, #176]
0x21EA	0x6811    LDR	R1, [R2, #0]
0x21EC	0x482C    LDR	R0, [PC, #176]
0x21EE	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 419 :: 		fngr_ring.enc_end_time = TIM3_CCR3;                                     // Read stored input capture time
0x21F0	0x482C    LDR	R0, [PC, #176]
0x21F2	0x6800    LDR	R0, [R0, #0]
0x21F4	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 420 :: 		fngr_ring.enc_overflow_start = fngr_ring.enc_overflow_end;              // Store previous overflow value for next calculation
0x21F6	0x4A2C    LDR	R2, [PC, #176]
0x21F8	0x6811    LDR	R1, [R2, #0]
0x21FA	0x482C    LDR	R0, [PC, #176]
0x21FC	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 421 :: 		fngr_ring.enc_overflow_end = tim3_overflow_count;                       // Store number of timer 3 overflows for Ring finger
0x21FE	0x4813    LDR	R0, [PC, #76]
0x2200	0x6800    LDR	R0, [R0, #0]
0x2202	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 422 :: 		fngr_ring.enc_chan_b = RING_ENCODER_B;                                 // Sample the second encoder channel state (For direction)
0x2204	0x482A    LDR	R0, [PC, #168]
0x2206	0x6801    LDR	R1, [R0, #0]
0x2208	0x482A    LDR	R0, [PC, #168]
0x220A	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 423 :: 		fngr_ring.position_temp++;                                              // Increment total input capture event counter
0x220C	0x492A    LDR	R1, [PC, #168]
0x220E	0x6808    LDR	R0, [R1, #0]
0x2210	0x1C40    ADDS	R0, R0, #1
0x2212	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 424 :: 		}
L_timer3_ISR26:
;Input Capture Complete 5ch.c, 427 :: 		if (TIM3_SR.CC4IF == 1) {
0x2214	0x4929    LDR	R1, [PC, #164]
0x2216	0x6808    LDR	R0, [R1, #0]
0x2218	0xB1A8    CBZ	R0, L_timer3_ISR27
;Input Capture Complete 5ch.c, 428 :: 		fngr_pinky.enc_start_time = fngr_pinky.enc_end_time;                    // Store previous captured value for next calculation
0x221A	0x4A29    LDR	R2, [PC, #164]
0x221C	0x6811    LDR	R1, [R2, #0]
0x221E	0x4829    LDR	R0, [PC, #164]
0x2220	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 429 :: 		fngr_pinky.enc_end_time = TIM3_CCR4;                                    // Read stored input capture time
0x2222	0x4829    LDR	R0, [PC, #164]
0x2224	0x6800    LDR	R0, [R0, #0]
0x2226	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 430 :: 		fngr_pinky.enc_overflow_start = fngr_pinky.enc_overflow_end;            // Store previous overflow value for next calculation
0x2228	0x4A28    LDR	R2, [PC, #160]
0x222A	0x6811    LDR	R1, [R2, #0]
0x222C	0x4828    LDR	R0, [PC, #160]
0x222E	0x6001    STR	R1, [R0, #0]
;Input Capture Complete 5ch.c, 431 :: 		fngr_pinky.enc_overflow_end = tim3_overflow_count;                      // Store number of timer 3 overflows for Pinky
0x2230	0x4806    LDR	R0, [PC, #24]
0x2232	0x6800    LDR	R0, [R0, #0]
0x2234	0x6010    STR	R0, [R2, #0]
;Input Capture Complete 5ch.c, 432 :: 		fngr_pinky.enc_chan_b = PINKY_ENCODER_B;                               // Sample the second encoder channel state (For direction)
0x2236	0x4827    LDR	R0, [PC, #156]
0x2238	0x6801    LDR	R1, [R0, #0]
0x223A	0x4827    LDR	R0, [PC, #156]
0x223C	0x8001    STRH	R1, [R0, #0]
;Input Capture Complete 5ch.c, 433 :: 		fngr_pinky.position_temp++;                                             // Increment total input capture event counter
0x223E	0x4927    LDR	R1, [PC, #156]
0x2240	0x6808    LDR	R0, [R1, #0]
0x2242	0x1C40    ADDS	R0, R0, #1
0x2244	0x6008    STR	R0, [R1, #0]
;Input Capture Complete 5ch.c, 434 :: 		}
L_timer3_ISR27:
;Input Capture Complete 5ch.c, 435 :: 		}
L_end_timer3_ISR:
0x2246	0x4770    BX	LR
0x2248	0x82004200  	TIM3_SR+0
0x224C	0x03D42000  	_tim3_overflow_count+0
0x2250	0x82044200  	TIM3_SR+0
0x2254	0x023C2000  	_fngr_pointer+36
0x2258	0x02382000  	_fngr_pointer+32
0x225C	0x04344000  	TIM3_CCR1+0
0x2260	0x02482000  	_fngr_pointer+48
0x2264	0x02442000  	_fngr_pointer+44
0x2268	0x02304242  	GPIOE_IDR+0
0x226C	0x02342000  	_fngr_pointer+28
0x2270	0x02282000  	_fngr_pointer+16
0x2274	0x82084200  	TIM3_SR+0
0x2278	0x028C2000  	_fngr_middle+36
0x227C	0x02882000  	_fngr_middle+32
0x2280	0x04384000  	TIM3_CCR2+0
0x2284	0x02982000  	_fngr_middle+48
0x2288	0x02942000  	_fngr_middle+44
0x228C	0x022C4240  	GPIOA_IDR+0
0x2290	0x02842000  	_fngr_middle+28
0x2294	0x02782000  	_fngr_middle+16
0x2298	0x820C4200  	TIM3_SR+0
0x229C	0x02DC2000  	_fngr_ring+36
0x22A0	0x02D82000  	_fngr_ring+32
0x22A4	0x043C4000  	TIM3_CCR3+0
0x22A8	0x02E82000  	_fngr_ring+48
0x22AC	0x02E42000  	_fngr_ring+44
0x22B0	0x823C4240  	GPIOB_IDR+0
0x22B4	0x02D42000  	_fngr_ring+28
0x22B8	0x02C82000  	_fngr_ring+16
0x22BC	0x82104200  	TIM3_SR+0
0x22C0	0x032C2000  	_fngr_pinky+36
0x22C4	0x03282000  	_fngr_pinky+32
0x22C8	0x04404000  	TIM3_CCR4+0
0x22CC	0x03382000  	_fngr_pinky+48
0x22D0	0x03342000  	_fngr_pinky+44
0x22D4	0x82244241  	GPIOD_IDR+0
0x22D8	0x03242000  	_fngr_pinky+28
0x22DC	0x03182000  	_fngr_pinky+16
; end of _timer3_ISR
;Input Capture Complete 5ch.c,0 :: ?ICS_PWM_FREQ_HZ [4]
0x2950	0x00002710 ;?ICS_PWM_FREQ_HZ+0
; end of ?ICS_PWM_FREQ_HZ
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr20_Input_32Capture_32Complete_325ch [16]
0x2954	0x69460D0A ;?ICS?lstr20_Input_32Capture_32Complete_325ch+0
0x2958	0x7265676E ;?ICS?lstr20_Input_32Capture_32Complete_325ch+4
0x295C	0x6D614E20 ;?ICS?lstr20_Input_32Capture_32Complete_325ch+8
0x2960	0x00203A65 ;?ICS?lstr20_Input_32Capture_32Complete_325ch+12
; end of ?ICS?lstr20_Input_32Capture_32Complete_325ch
;,0 :: _initBlock_2 [42]
; Containing: ?ICS?lstr21_Input_32Capture_32Complete_325ch [3]
;             ?ICS?lstr22_Input_32Capture_32Complete_325ch [36]
;             ?ICS?lstr23_Input_32Capture_32Complete_325ch [3]
0x2964	0x46000D0A ;_initBlock_2+0 : ?ICS?lstr21_Input_32Capture_32Complete_325ch at 0x2964 : ?ICS?lstr22_Input_32Capture_32Complete_325ch at 0x2967
0x2968	0x75716572 ;_initBlock_2+4
0x296C	0x79636E65 ;_initBlock_2+8
0x2970	0x20666F20 ;_initBlock_2+12
0x2974	0x6F636E69 ;_initBlock_2+16
0x2978	0x676E696D ;_initBlock_2+20
0x297C	0x67697320 ;_initBlock_2+24
0x2980	0x206C616E ;_initBlock_2+28
0x2984	0x297A4828 ;_initBlock_2+32
0x2988	0x0A00203A ;_initBlock_2+36 : ?ICS?lstr23_Input_32Capture_32Complete_325ch at 0x298B
0x298C	0x000D ;_initBlock_2+40
; end of _initBlock_2
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr24_Input_32Capture_32Complete_325ch [36]
0x298E	0x65726944 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+0
0x2992	0x6F697463 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+4
0x2996	0x666F206E ;?ICS?lstr24_Input_32Capture_32Complete_325ch+8
0x299A	0x766F6D20 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+12
0x299E	0x6E656D65 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+16
0x29A2	0x20203A74 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+20
0x29A6	0x20202020 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+24
0x29AA	0x20202020 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+28
0x29AE	0x00202020 ;?ICS?lstr24_Input_32Capture_32Complete_325ch+32
; end of ?ICS?lstr24_Input_32Capture_32Complete_325ch
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr25_Input_32Capture_32Complete_325ch [8]
0x29B2	0x45545845 ;?ICS?lstr25_Input_32Capture_32Complete_325ch+0
0x29B6	0x0020444E ;?ICS?lstr25_Input_32Capture_32Complete_325ch+4
; end of ?ICS?lstr25_Input_32Capture_32Complete_325ch
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr26_Input_32Capture_32Complete_325ch [10]
0x29BA	0x544E4F43 ;?ICS?lstr26_Input_32Capture_32Complete_325ch+0
0x29BE	0x54434152 ;?ICS?lstr26_Input_32Capture_32Complete_325ch+4
0x29C2	0x0020 ;?ICS?lstr26_Input_32Capture_32Complete_325ch+8
; end of ?ICS?lstr26_Input_32Capture_32Complete_325ch
;,0 :: _initBlock_6 [44]
; Containing: ?ICS?lstr27_Input_32Capture_32Complete_325ch [3]
;             ?ICS?lstr28_Input_32Capture_32Complete_325ch [36]
;             ?ICS?lstr29_Input_32Capture_32Complete_325ch [5]
0x29C4	0x50000D0A ;_initBlock_6+0 : ?ICS?lstr27_Input_32Capture_32Complete_325ch at 0x29C4 : ?ICS?lstr28_Input_32Capture_32Complete_325ch at 0x29C7
0x29C8	0x7469736F ;_initBlock_6+4
0x29CC	0x206E6F69 ;_initBlock_6+8
0x29D0	0x6620666F ;_initBlock_6+12
0x29D4	0x65676E69 ;_initBlock_6+16
0x29D8	0x20203A72 ;_initBlock_6+20
0x29DC	0x20202020 ;_initBlock_6+24
0x29E0	0x20202020 ;_initBlock_6+28
0x29E4	0x20202020 ;_initBlock_6+32
0x29E8	0x0A002020 ;_initBlock_6+36 : ?ICS?lstr29_Input_32Capture_32Complete_325ch at 0x29EB
0x29EC	0x000D0A0A ;_initBlock_6+40
; end of _initBlock_6
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr30_Input_32Capture_32Complete_325ch [48]
0x29F0	0x63726F46 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+0
0x29F4	0x70612065 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+4
0x29F8	0x65696C70 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+8
0x29FC	0x6F742064 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+12
0x2A00	0x70697420 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+16
0x2A04	0x20666F20 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+20
0x2A08	0x676E6966 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+24
0x2A0C	0x203A7265 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+28
0x2A10	0x20202020 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+32
0x2A14	0x20202020 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+36
0x2A18	0x20202020 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+40
0x2A1C	0x00202020 ;?ICS?lstr30_Input_32Capture_32Complete_325ch+44
; end of ?ICS?lstr30_Input_32Capture_32Complete_325ch
;,0 :: _initBlock_8 [18]
; Containing: ?ICS?lstr31_Input_32Capture_32Complete_325ch [5]
;             ?ICS?lstr8_Input_32Capture_32Complete_325ch [13]
0x2A20	0x0D0A0A0A ;_initBlock_8+0 : ?ICS?lstr31_Input_32Capture_32Complete_325ch at 0x2A20
0x2A24	0x676E6600 ;_initBlock_8+4 : ?ICS?lstr8_Input_32Capture_32Complete_325ch at 0x2A25
0x2A28	0x6F705F72 ;_initBlock_8+8
0x2A2C	0x65746E69 ;_initBlock_8+12
0x2A30	0x0072 ;_initBlock_8+16
; end of _initBlock_8
;Input Capture Complete 5ch.c,0 :: ?ICS_NORMALIZATION_CONSTANT [2]
0x2A32	0x0001 ;?ICS_NORMALIZATION_CONSTANT+0
; end of ?ICS_NORMALIZATION_CONSTANT
;Input Capture Complete 5ch.c,0 :: ?ICS_FORCE_K [4]
0x2A34	0x41C80000 ;?ICS_FORCE_K+0
; end of ?ICS_FORCE_K
;Input Capture Complete 5ch.c,0 :: ?ICS_ENCODER_TIM_RELOAD [4]
0x2A38	0x0000FFFF ;?ICS_ENCODER_TIM_RELOAD+0
; end of ?ICS_ENCODER_TIM_RELOAD
;Input Capture Complete 5ch.c,0 :: ?ICS_MCU_FREQUENCY [4]
0x2A3C	0x0A037A00 ;?ICS_MCU_FREQUENCY+0
; end of ?ICS_MCU_FREQUENCY
;,0 :: _initBlock_13 [46]
; Containing: ?ICS?lstr15_Input_32Capture_32Complete_325ch [13]
;             ?ICS?lstr16_Input_32Capture_32Complete_325ch [12]
;             ?ICS?lstr17_Input_32Capture_32Complete_325ch [10]
;             ?ICS?lstr18_Input_32Capture_32Complete_325ch [11]
0x2A40	0x72676E66 ;_initBlock_13+0 : ?ICS?lstr15_Input_32Capture_32Complete_325ch at 0x2A40
0x2A44	0x696F705F ;_initBlock_13+4
0x2A48	0x7265746E ;_initBlock_13+8
0x2A4C	0x676E6600 ;_initBlock_13+12 : ?ICS?lstr16_Input_32Capture_32Complete_325ch at 0x2A4D
0x2A50	0x696D5F72 ;_initBlock_13+16
0x2A54	0x656C6464 ;_initBlock_13+20
0x2A58	0x676E6600 ;_initBlock_13+24 : ?ICS?lstr17_Input_32Capture_32Complete_325ch at 0x2A59
0x2A5C	0x69725F72 ;_initBlock_13+28
0x2A60	0x6600676E ;_initBlock_13+32 : ?ICS?lstr18_Input_32Capture_32Complete_325ch at 0x2A63
0x2A64	0x5F72676E ;_initBlock_13+36
0x2A68	0x6B6E6970 ;_initBlock_13+40
0x2A6C	0x0079 ;_initBlock_13+44
; end of _initBlock_13
;,0 :: _initBlock_14 [46]
; Containing: ?ICS?lstr19_Input_32Capture_32Complete_325ch [11]
;             ?ICS?lstr14_Input_32Capture_32Complete_325ch [22]
;             ?ICS?lstr1_Input_32Capture_32Complete_325ch [13]
0x2A6E	0x72676E66 ;_initBlock_14+0 : ?ICS?lstr19_Input_32Capture_32Complete_325ch at 0x2A6E
0x2A72	0x7568745F ;_initBlock_14+4
0x2A76	0x0D00626D ;_initBlock_14+8 : ?ICS?lstr14_Input_32Capture_32Complete_325ch at 0x2A79
0x2A7A	0x54524155 ;_initBlock_14+12
0x2A7E	0x696E4920 ;_initBlock_14+16
0x2A82	0x6F432074 ;_initBlock_14+20
0x2A86	0x656C706D ;_initBlock_14+24
0x2A8A	0x0A0D6574 ;_initBlock_14+28
0x2A8E	0x676E6600 ;_initBlock_14+32 : ?ICS?lstr1_Input_32Capture_32Complete_325ch at 0x2A8F
0x2A92	0x6F705F72 ;_initBlock_14+36
0x2A96	0x65746E69 ;_initBlock_14+40
0x2A9A	0x0072 ;_initBlock_14+44
; end of _initBlock_14
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr2_Input_32Capture_32Complete_325ch [12]
0x2A9C	0x72676E66 ;?ICS?lstr2_Input_32Capture_32Complete_325ch+0
0x2AA0	0x64696D5F ;?ICS?lstr2_Input_32Capture_32Complete_325ch+4
0x2AA4	0x00656C64 ;?ICS?lstr2_Input_32Capture_32Complete_325ch+8
; end of ?ICS?lstr2_Input_32Capture_32Complete_325ch
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr3_Input_32Capture_32Complete_325ch [10]
0x2AA8	0x72676E66 ;?ICS?lstr3_Input_32Capture_32Complete_325ch+0
0x2AAC	0x6E69725F ;?ICS?lstr3_Input_32Capture_32Complete_325ch+4
0x2AB0	0x0067 ;?ICS?lstr3_Input_32Capture_32Complete_325ch+8
; end of ?ICS?lstr3_Input_32Capture_32Complete_325ch
;,0 :: _initBlock_17 [22]
; Containing: ?ICS?lstr4_Input_32Capture_32Complete_325ch [11]
;             ?ICS?lstr5_Input_32Capture_32Complete_325ch [11]
0x2AB2	0x72676E66 ;_initBlock_17+0 : ?ICS?lstr4_Input_32Capture_32Complete_325ch at 0x2AB2
0x2AB6	0x6E69705F ;_initBlock_17+4
0x2ABA	0x6600796B ;_initBlock_17+8 : ?ICS?lstr5_Input_32Capture_32Complete_325ch at 0x2ABD
0x2ABE	0x5F72676E ;_initBlock_17+12
0x2AC2	0x6D756874 ;_initBlock_17+16
0x2AC6	0x0062 ;_initBlock_17+20
; end of _initBlock_17
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr6_Input_32Capture_32Complete_325ch [26]
0x2AC8	0x500D0A0A ;?ICS?lstr6_Input_32Capture_32Complete_325ch+0
0x2ACC	0x72676F72 ;?ICS?lstr6_Input_32Capture_32Complete_325ch+4
0x2AD0	0x48206D61 ;?ICS?lstr6_Input_32Capture_32Complete_325ch+8
0x2AD4	0x53207361 ;?ICS?lstr6_Input_32Capture_32Complete_325ch+12
0x2AD8	0x74726174 ;?ICS?lstr6_Input_32Capture_32Complete_325ch+16
0x2ADC	0x0A216465 ;?ICS?lstr6_Input_32Capture_32Complete_325ch+20
0x2AE0	0x000D ;?ICS?lstr6_Input_32Capture_32Complete_325ch+24
; end of ?ICS?lstr6_Input_32Capture_32Complete_325ch
;Input Capture Complete 5ch.c,0 :: ?ICS_SP_LOW [2]
0x2AE2	0x0258 ;?ICS_SP_LOW+0
; end of ?ICS_SP_LOW
;Input Capture Complete 5ch.c,0 :: ?ICS_analogGo [2]
0x2AE4	0x0000 ;?ICS_analogGo+0
; end of ?ICS_analogGo
;Input Capture Complete 5ch.c,0 :: ?ICS_doShutdown [2]
0x2AE6	0x0000 ;?ICS_doShutdown+0
; end of ?ICS_doShutdown
;Input Capture Complete 5ch.c,0 :: ?ICS_FULLY_CONTRACTED [4]
0x2AE8	0x00000CE4 ;?ICS_FULLY_CONTRACTED+0
; end of ?ICS_FULLY_CONTRACTED
;Input Capture Complete 5ch.c,0 :: ?ICS_TERMINAL_PRINT_THRESH [2]
0x2AEC	0x0064 ;?ICS_TERMINAL_PRINT_THRESH+0
; end of ?ICS_TERMINAL_PRINT_THRESH
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr7_Input_32Capture_32Complete_325ch [9]
0x2AEE	0x0A0A0A0A ;?ICS?lstr7_Input_32Capture_32Complete_325ch+0
0x2AF2	0x0D0A0A0A ;?ICS?lstr7_Input_32Capture_32Complete_325ch+4
0x2AF6	0x00 ;?ICS?lstr7_Input_32Capture_32Complete_325ch+8
; end of ?ICS?lstr7_Input_32Capture_32Complete_325ch
;__Lib_GPIO_32F4xx_Defs.c,789 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x2AF8	0x00000709 ;__GPIO_MODULE_USART1_PA9_10+0
0x2AFC	0x0000070A ;__GPIO_MODULE_USART1_PA9_10+4
0x2B00	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x2B04	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x2B08	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x2B0C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x2B10	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x2B14	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x2B18	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x2B1C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x2B20	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x2B24	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x2B28	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x2B2C	0x00001018 ;__GPIO_MODULE_USART1_PA9_10+52
0x2B30	0x00001018 ;__GPIO_MODULE_USART1_PA9_10+56
0x2B34	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x2B38	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x2B3C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x2B40	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x2B44	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x2B48	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x2B4C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x2B50	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x2B54	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x2B58	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x2B5C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x2B60	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;__Lib_GPIO_32F4xx_Defs.c,448 :: __GPIO_MODULE_TIM1_CH1_PE9 [108]
0x2B64	0x00000149 ;__GPIO_MODULE_TIM1_CH1_PE9+0
0x2B68	0xFFFFFFFF ;__GPIO_MODULE_TIM1_CH1_PE9+4
0x2B6C	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+8
0x2B70	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+12
0x2B74	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+16
0x2B78	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+20
0x2B7C	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+24
0x2B80	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+28
0x2B84	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+32
0x2B88	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+36
0x2B8C	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+40
0x2B90	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+44
0x2B94	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+48
0x2B98	0x00001018 ;__GPIO_MODULE_TIM1_CH1_PE9+52
0x2B9C	0xFFFFFFFF ;__GPIO_MODULE_TIM1_CH1_PE9+56
0x2BA0	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+60
0x2BA4	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+64
0x2BA8	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+68
0x2BAC	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+72
0x2BB0	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+76
0x2BB4	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+80
0x2BB8	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+84
0x2BBC	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+88
0x2BC0	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+92
0x2BC4	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+96
0x2BC8	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+100
0x2BCC	0x00000000 ;__GPIO_MODULE_TIM1_CH1_PE9+104
; end of __GPIO_MODULE_TIM1_CH1_PE9
;,0 :: _initBlock_27 [46]
; Containing: ?ICS?lstr9_Input_32Capture_32Complete_325ch [13]
;             ?ICS?lstr10_Input_32Capture_32Complete_325ch [12]
;             ?ICS?lstr11_Input_32Capture_32Complete_325ch [10]
;             ?ICS?lstr12_Input_32Capture_32Complete_325ch [11]
0x2BD0	0x72676E66 ;_initBlock_27+0 : ?ICS?lstr9_Input_32Capture_32Complete_325ch at 0x2BD0
0x2BD4	0x696F705F ;_initBlock_27+4
0x2BD8	0x7265746E ;_initBlock_27+8
0x2BDC	0x676E6600 ;_initBlock_27+12 : ?ICS?lstr10_Input_32Capture_32Complete_325ch at 0x2BDD
0x2BE0	0x696D5F72 ;_initBlock_27+16
0x2BE4	0x656C6464 ;_initBlock_27+20
0x2BE8	0x676E6600 ;_initBlock_27+24 : ?ICS?lstr11_Input_32Capture_32Complete_325ch at 0x2BE9
0x2BEC	0x69725F72 ;_initBlock_27+28
0x2BF0	0x6600676E ;_initBlock_27+32 : ?ICS?lstr12_Input_32Capture_32Complete_325ch at 0x2BF3
0x2BF4	0x5F72676E ;_initBlock_27+36
0x2BF8	0x6B6E6970 ;_initBlock_27+40
0x2BFC	0x0079 ;_initBlock_27+44
; end of _initBlock_27
;Input Capture Complete 5ch.c,0 :: ?ICS?lstr13_Input_32Capture_32Complete_325ch [11]
0x2BFE	0x72676E66 ;?ICS?lstr13_Input_32Capture_32Complete_325ch+0
0x2C02	0x7568745F ;?ICS?lstr13_Input_32Capture_32Complete_325ch+4
0x2C06	0x00626D ;?ICS?lstr13_Input_32Capture_32Complete_325ch+8
; end of ?ICS?lstr13_Input_32Capture_32Complete_325ch
;Input Capture Complete 5ch.c,0 :: ?ICS_FULLY_EXTENDED [4]
0x2C0C	0x00000000 ;?ICS_FULLY_EXTENDED+0
; end of ?ICS_FULLY_EXTENDED
;__Lib_System_4XX.c,0 :: ?ICS__Lib_System_4XX_APBAHBPrescTable [16]
0x2C10	0x00000000 ;?ICS__Lib_System_4XX_APBAHBPrescTable+0
0x2C14	0x04030201 ;?ICS__Lib_System_4XX_APBAHBPrescTable+4
0x2C18	0x04030201 ;?ICS__Lib_System_4XX_APBAHBPrescTable+8
0x2C1C	0x09080706 ;?ICS__Lib_System_4XX_APBAHBPrescTable+12
; end of ?ICS__Lib_System_4XX_APBAHBPrescTable
;Input Capture Complete 5ch.c,0 :: ?ICS_SAMPLE_TIM_PSC [2]
0x2C20	0x000D ;?ICS_SAMPLE_TIM_PSC+0
; end of ?ICS_SAMPLE_TIM_PSC
;Input Capture Complete 5ch.c,0 :: ?ICS_SAMPLE_TIM_RELOAD [2]
0x2C22	0xEA5F ;?ICS_SAMPLE_TIM_RELOAD+0
; end of ?ICS_SAMPLE_TIM_RELOAD
;Input Capture Complete 5ch.c,0 :: ?ICS_ENCODER_TIM_PSC [2]
0x2C24	0x0064 ;?ICS_ENCODER_TIM_PSC+0
; end of ?ICS_ENCODER_TIM_PSC
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0188     [168]    _GPIO_Clk_Enable
0x0230     [560]    _GPIO_Config
0x0460      [30]    __Lib_UART_123_45_6_UARTx_Write
0x0480      [16]    _Get_Fosc_kHz
0x0490     [252]    __Lib_GPIO_32F4xx_GPIO_Config_Pin_Alternate_Function
0x058C      [28]    _UART4_Write
0x05A8      [28]    _UART5_Write
0x05C4      [28]    _UART6_Write
0x05E0      [28]    _Delay_1us
0x05FC      [28]    _UART2_Write
0x0618      [28]    _UART1_Write
0x0634      [28]    _UART3_Write
0x0650     [132]    _RCC_GetClocksFrequency
0x06D4      [70]    _GPIO_Alternate_Function_Enable
0x071C     [380]    __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Init
0x0898      [82]    __LongDoubleToSignedIntegral
0x08EC     [136]    __Lib_ADC_123_32F20x_16ch_ADCx_Get_Sample
0x0974      [24]    _GPIO_Analog_Input
0x098C     [142]    __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Start
0x0A1C      [70]    __Lib_PWM_1234589_12_10_11_13_14_PWM_TIMx_Set_Duty
0x0A64      [80]    _WordToStr
0x0AB4     [660]    __Lib_UART_123_45_6_UARTx_Init_Advanced
0x0D48      [24]    _UART_Write
0x0D60      [16]    _abs
0x0D70      [38]    __UnsignedIntegralToLongDouble
0x0D98      [50]    __Lib_UART_123_45_6_UARTx_Write_Text
0x0DCC     [276]    __Lib_ADC_123_32F20x_16ch_ADCx_Init
0x0EE0     [372]    _ADC_Set_Input_Channel
0x1054     [108]    _LongToStr
0x10C0      [28]    _ADC1_Get_Sample
0x10DC     [110]    _IntToStr
0x114C      [88]    __LongDoubleToUnsignedIntegral
0x11A4      [76]    _LongWordToStr
0x11F0     [330]    __Div_DP
0x133C     [262]    __Mul_DP
0x1444      [38]    _strcmp
0x146C      [28]    _PWM_TIM1_Init
0x1488      [32]    _PWM_TIM1_Set_Duty
0x14A8      [52]    _UART1_Init
0x14DC      [54]    _UART_Write_Text
0x1514     [120]    _NVIC_IntEnable
0x158C      [28]    _GPIO_Digital_Output
0x15A8      [24]    _GPIO_Digital_Input
0x15C0      [28]    _PWM_TIM1_Start
0x15DC      [58]    ___FillZeros
0x1618      [20]    ___CC2DW
0x162C      [76]    __Lib_System_4XX_SystemClockSetDefault
0x1678      [56]    _init_UART
0x16B0      [44]    _move_pointer_finger
0x16DC     [268]    _print_finger_info
0x17E8     [136]    _Pcontrol_force
0x1870     [236]    _init_GPIO
0x195C      [52]    _ADC1_Init
0x1990      [80]    _InitTimer10
0x19E0     [220]    _init_finger
0x1ABC      [40]    _strcpy
0x1AE4      [28]    _UART1_Write_Text
0x1B00     [500]    _sample_finger
0x1CF4      [72]    _init_pointer_PWM
0x1D3C      [96]    _init_timer11
0x1D9C     [620]    _init_input_capture
0x2008     [172]    _emg_override_ISR
0x20B4     [144]    _Timer10_interrupt
0x2144      [36]    _timer11_ISR
0x2168     [376]    _timer3_ISR
0x22E0     [120]    _timer2_ISR
0x2358     [864]    __Lib_System_4XX_InitialSetUpRCCRCC2
0x26B8     [576]    _main
0x28F8      [36]    __Lib_System_4XX_InitialSetUpFosc
0x291C      [42]    ___EnableFPU
0x2948       [8]    ___GenExcept
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [4]    FARG_FloatToStr_fnum
0x0000       [8]    FARG_LongDoubleToStr_dnum
0x20000000      [13]    ?lstr9_Input_32Capture_32Complete_325ch
0x2000000D      [12]    ?lstr10_Input_32Capture_32Complete_325ch
0x20000019      [10]    ?lstr11_Input_32Capture_32Complete_325ch
0x20000023      [11]    ?lstr12_Input_32Capture_32Complete_325ch
0x2000002E      [11]    ?lstr13_Input_32Capture_32Complete_325ch
0x2000003A       [2]    _SAMPLE_TIM_PSC
0x2000003C       [2]    _SAMPLE_TIM_RELOAD
0x2000003E       [2]    _ENCODER_TIM_PSC
0x20000040       [4]    _PWM_FREQ_HZ
0x20000044      [16]    ?lstr20_Input_32Capture_32Complete_325ch
0x20000054       [3]    ?lstr21_Input_32Capture_32Complete_325ch
0x20000057      [36]    ?lstr22_Input_32Capture_32Complete_325ch
0x2000007B       [3]    ?lstr23_Input_32Capture_32Complete_325ch
0x2000007E      [36]    ?lstr24_Input_32Capture_32Complete_325ch
0x200000A2       [8]    ?lstr25_Input_32Capture_32Complete_325ch
0x200000AA      [10]    ?lstr26_Input_32Capture_32Complete_325ch
0x200000B4       [3]    ?lstr27_Input_32Capture_32Complete_325ch
0x200000B7      [36]    ?lstr28_Input_32Capture_32Complete_325ch
0x200000DB       [5]    ?lstr29_Input_32Capture_32Complete_325ch
0x200000E0      [48]    ?lstr30_Input_32Capture_32Complete_325ch
0x20000110       [5]    ?lstr31_Input_32Capture_32Complete_325ch
0x20000115      [13]    ?lstr8_Input_32Capture_32Complete_325ch
0x20000122       [2]    _NORMALIZATION_CONSTANT
0x20000124       [4]    _FORCE_K
0x20000128       [4]    _ENCODER_TIM_RELOAD
0x2000012C       [4]    _MCU_FREQUENCY
0x20000130      [13]    ?lstr15_Input_32Capture_32Complete_325ch
0x2000013D      [12]    ?lstr16_Input_32Capture_32Complete_325ch
0x20000149      [10]    ?lstr17_Input_32Capture_32Complete_325ch
0x20000153      [11]    ?lstr18_Input_32Capture_32Complete_325ch
0x2000015E      [11]    ?lstr19_Input_32Capture_32Complete_325ch
0x20000169      [22]    ?lstr14_Input_32Capture_32Complete_325ch
0x2000017F      [13]    ?lstr1_Input_32Capture_32Complete_325ch
0x2000018C      [12]    ?lstr2_Input_32Capture_32Complete_325ch
0x20000198      [10]    ?lstr3_Input_32Capture_32Complete_325ch
0x200001A2      [11]    ?lstr4_Input_32Capture_32Complete_325ch
0x200001AD      [11]    ?lstr5_Input_32Capture_32Complete_325ch
0x200001B8      [26]    ?lstr6_Input_32Capture_32Complete_325ch
0x200001D2       [2]    _SP_LOW
0x200001D4       [2]    _analogGo
0x200001D6       [2]    _doShutdown
0x200001D8       [4]    _FULLY_CONTRACTED
0x200001DC       [2]    _TERMINAL_PRINT_THRESH
0x200001DE       [9]    ?lstr7_Input_32Capture_32Complete_325ch
0x200001E8       [4]    _FULLY_EXTENDED
0x200001EC      [16]    __Lib_System_4XX_APBAHBPrescTable
0x200001FC       [2]    _PWM_PERIOD_TIM1
0x200001FE      [15]    _toStr
0x2000020E       [2]    _terminal_print_count
0x20000210       [8]    _encoder_timer_period_ms
0x20000218      [80]    _fngr_pointer
0x20000268      [80]    _fngr_middle
0x200002B8      [80]    _fngr_ring
0x20000308      [80]    _fngr_pinky
0x20000358      [80]    _fngr_thumb
0x200003A8       [2]    _setP
0x200003AA       [2]    _change_SP_flag
0x200003AC       [2]    _poll_flag
0x200003AE       [2]    _MPV
0x200003B0       [2]    _dutyCycle
0x200003B2       [2]    _emg_override_status
0x200003B4       [4]    _ADC_Get_Sample_Ptr
0x200003B8       [4]    ___System_CLOCK_IN_KHZ
0x200003BC       [4]    __VOLTAGE_RANGE
0x200003C0       [4]    _UART_Wr_Ptr
0x200003C4       [4]    _UART_Rd_Ptr
0x200003C8       [4]    _UART_Rdy_Ptr
0x200003CC       [4]    _UART_Tx_Idle_Ptr
0x200003D0       [4]    _tim2_overflow_count
0x200003D4       [4]    _tim3_overflow_count
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x2950       [4]    ?ICS_PWM_FREQ_HZ
0x2954      [16]    ?ICS?lstr20_Input_32Capture_32Complete_325ch
0x2964       [3]    ?ICS?lstr21_Input_32Capture_32Complete_325ch
0x2967      [36]    ?ICS?lstr22_Input_32Capture_32Complete_325ch
0x298B       [3]    ?ICS?lstr23_Input_32Capture_32Complete_325ch
0x298E      [36]    ?ICS?lstr24_Input_32Capture_32Complete_325ch
0x29B2       [8]    ?ICS?lstr25_Input_32Capture_32Complete_325ch
0x29BA      [10]    ?ICS?lstr26_Input_32Capture_32Complete_325ch
0x29C4       [3]    ?ICS?lstr27_Input_32Capture_32Complete_325ch
0x29C7      [36]    ?ICS?lstr28_Input_32Capture_32Complete_325ch
0x29EB       [5]    ?ICS?lstr29_Input_32Capture_32Complete_325ch
0x29F0      [48]    ?ICS?lstr30_Input_32Capture_32Complete_325ch
0x2A20       [5]    ?ICS?lstr31_Input_32Capture_32Complete_325ch
0x2A25      [13]    ?ICS?lstr8_Input_32Capture_32Complete_325ch
0x2A32       [2]    ?ICS_NORMALIZATION_CONSTANT
0x2A34       [4]    ?ICS_FORCE_K
0x2A38       [4]    ?ICS_ENCODER_TIM_RELOAD
0x2A3C       [4]    ?ICS_MCU_FREQUENCY
0x2A40      [13]    ?ICS?lstr15_Input_32Capture_32Complete_325ch
0x2A4D      [12]    ?ICS?lstr16_Input_32Capture_32Complete_325ch
0x2A59      [10]    ?ICS?lstr17_Input_32Capture_32Complete_325ch
0x2A63      [11]    ?ICS?lstr18_Input_32Capture_32Complete_325ch
0x2A6E      [11]    ?ICS?lstr19_Input_32Capture_32Complete_325ch
0x2A79      [22]    ?ICS?lstr14_Input_32Capture_32Complete_325ch
0x2A8F      [13]    ?ICS?lstr1_Input_32Capture_32Complete_325ch
0x2A9C      [12]    ?ICS?lstr2_Input_32Capture_32Complete_325ch
0x2AA8      [10]    ?ICS?lstr3_Input_32Capture_32Complete_325ch
0x2AB2      [11]    ?ICS?lstr4_Input_32Capture_32Complete_325ch
0x2ABD      [11]    ?ICS?lstr5_Input_32Capture_32Complete_325ch
0x2AC8      [26]    ?ICS?lstr6_Input_32Capture_32Complete_325ch
0x2AE2       [2]    ?ICS_SP_LOW
0x2AE4       [2]    ?ICS_analogGo
0x2AE6       [2]    ?ICS_doShutdown
0x2AE8       [4]    ?ICS_FULLY_CONTRACTED
0x2AEC       [2]    ?ICS_TERMINAL_PRINT_THRESH
0x2AEE       [9]    ?ICS?lstr7_Input_32Capture_32Complete_325ch
0x2AF8     [108]    __GPIO_MODULE_USART1_PA9_10
0x2B64     [108]    __GPIO_MODULE_TIM1_CH1_PE9
0x2BD0      [13]    ?ICS?lstr9_Input_32Capture_32Complete_325ch
0x2BDD      [12]    ?ICS?lstr10_Input_32Capture_32Complete_325ch
0x2BE9      [10]    ?ICS?lstr11_Input_32Capture_32Complete_325ch
0x2BF3      [11]    ?ICS?lstr12_Input_32Capture_32Complete_325ch
0x2BFE      [11]    ?ICS?lstr13_Input_32Capture_32Complete_325ch
0x2C0C       [4]    ?ICS_FULLY_EXTENDED
0x2C10      [16]    ?ICS__Lib_System_4XX_APBAHBPrescTable
0x2C20       [2]    ?ICS_SAMPLE_TIM_PSC
0x2C22       [2]    ?ICS_SAMPLE_TIM_RELOAD
0x2C24       [2]    ?ICS_ENCODER_TIM_PSC
